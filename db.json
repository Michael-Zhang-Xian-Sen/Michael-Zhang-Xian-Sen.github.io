{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/tags/index.md.bak","path":"tags/index.md.bak","modified":0,"renderable":0},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/1.ico","path":"img/1.ico","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/big.jpg","path":"img/big.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/pay.png","path":"img/pay.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/material/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header1.png","path":"img/sidebar_header1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/2.ico","path":"img/2.ico","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery 2.js","path":"js/gallery/gallery 2.js","modified":0,"renderable":1},{"_id":"source/tags/index.md 2.bak","path":"tags/index.md 2.bak","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"2851e52f7cd01b585e3689920c3706ac85b0d59b","modified":1597650665881},{"_id":"source/CNAME","hash":"118ce17550d1cc39449f881ca5f76fe8fda52ff3","modified":1579485275061},{"_id":"themes/material/.DS_Store","hash":"7c38e3e7bf32e7e5c20a961a31061610d50c4c30","modified":1580525350487},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1575251053424},{"_id":"themes/material/.gitignore","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1575251053424},{"_id":"themes/material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1575251053424},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1575251053425},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1575251053425},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1575251053425},{"_id":"themes/material/README.md","hash":"cc7b80f6bce7b910a7ba641abac1ade1311705f8","modified":1581573450079},{"_id":"themes/material/_config.template.yml","hash":"3e9eb8083c0188dbab50ce3ebccf9fb2a504d8fb","modified":1575251053426},{"_id":"themes/material/_config.yaml","hash":"3167fcee3c5f60aa0607f57089eff689f16abbfa","modified":1587698601948},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1575251053426},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1575251053435},{"_id":"themes/material/package.json","hash":"6b63bbc7e3c8532359dd2a80328f51f4e97474b9","modified":1580264324125},{"_id":"source/links/index.md.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053423},{"_id":"source/temp/PS学习笔记.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585317795316},{"_id":"source/temp/babel学习笔记.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587886535665},{"_id":"source/temp/java微服务.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587894768387},{"_id":"source/temp/npm使用小记.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586000619153},{"_id":"source/temp/想法.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588138355761},{"_id":"source/tags/index.md.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053423},{"_id":"source/about/index.md","hash":"86c608207aefda744d51e70d7bed098d49f98fc3","modified":1598242388179},{"_id":"source/about/index.md.bak","hash":"08409769c721e0da3ee6cde754f6c6f6b65e8d3e","modified":1575251053423},{"_id":"source/_data/gallery.yml","hash":"0c904c1daacdd3519d4f84ac29cebe2f873f79e3","modified":1580546577591},{"_id":"source/_data/links.yaml","hash":"a03389fd9a8addd92e8ad32e739118ab12b436c9","modified":1575251053420},{"_id":"source/gallery/index.md","hash":"32e639d06ecd66a0d767ff60508c6db70af9795e","modified":1580539492298},{"_id":"source/links/index.md","hash":"3fe8ca9c562fc0c356f330715bf53740303f6b99","modified":1575251053423},{"_id":"source/temp/BootstrapVue中元素的一些用法.md","hash":"843a544c91e05dc0d12de9acadb9afe6ac632103","modified":1581833832944},{"_id":"source/temp/JS Date对象.md","hash":"4a013b5c75324e0fdb1361b7397208ff649e437f","modified":1584604188722},{"_id":"source/temp/iTerm2.md","hash":"cb5101ee7cf72c1add92ba3dc48bf6d35e7410ff","modified":1586696971300},{"_id":"source/temp/js中的几种循环和数组、对象的遍历.md","hash":"acbccb8ba17ca80728bd5255bd66388d187d56f2","modified":1582619652407},{"_id":"source/temp/js小记：this的含义及进阶用法.md","hash":"0317a1c387bbdc0cc6bdfd3ac7c46d2451f365cb","modified":1587433791935},{"_id":"source/temp/mac配置代理.md","hash":"ed15cd8755f47a941b1e9a6b74b1c4867af9bee0","modified":1587459516638},{"_id":"source/temp/schema.md","hash":"586f4e2dd0e226aa1ce902cda4e94b740bf7e16c","modified":1584839108777},{"_id":"source/temp/vue-cli配置代理.md","hash":"ec22864fdd84f0e0f93bcec5072853308365872c","modified":1586482611547},{"_id":"source/temp/vue学习笔记.md","hash":"b0b751299f8886809e08f57a86e9049734b6d723","modified":1587789295226},{"_id":"source/temp/vue学习笔记:工具.md","hash":"e0e368aaa30fce1c90278892e0b7d587dedeafd6","modified":1588138371107},{"_id":"source/temp/vue的一些基础知识和个人理解.md","hash":"301d842a1f81b8a49341ba3710d4fd9209f260c7","modified":1586000625927},{"_id":"source/temp/web端设计规范.md","hash":"45bf5fa2229085d622f136fe7182018f4f5a87b6","modified":1587718169823},{"_id":"source/temp/《你不知道的JavaScript 上卷》第二部分.md","hash":"705be9e4d00ad7d35b42184de84a9159967014c8","modified":1589902503185},{"_id":"source/temp/关于npm.md","hash":"a038ef34a09203e4c9efa06c0e23daba904d91b0","modified":1585489984361},{"_id":"source/temp/关于科学上网.md","hash":"72f96834585f03fa76670dc94494eab46a75792a","modified":1584238803067},{"_id":"source/temp/前后端跨域方案整理.md","hash":"713e57e9dd04874546f08f0e9b1d8d355d1d73ee","modified":1584238812550},{"_id":"source/temp/同源策略.md","hash":"a5440c73f85b48f61618abd841e1c5e64da3a8f8","modified":1585317717866},{"_id":"source/temp/实用的vue工具：treeselect多选插件.md","hash":"dc9d2de123367ebeb4a40af50ff0ce57bbce3f0c","modified":1588605236272},{"_id":"source/temp/常识积累.md","hash":"1e44287546b2904cc6625fe011c0e82ad11df7df","modified":1582958807174},{"_id":"source/temp/并发模型与事件循环.md","hash":"8067a64c6cee0817826953bd3185a66fd3df309a","modified":1584239190381},{"_id":"source/temp/评估.md","hash":"3d3c4f3facf91726a0b590b3d602be4f656b0989","modified":1590459634165},{"_id":"source/temp/项目中的一些功能.md","hash":"2366b3fbb7062f5ce90b7ec1ab0440753f4fe74d","modified":1581332840488},{"_id":"source/temp/项目中的一些问题.md","hash":"584b89ed71d66d3e775fba576a4a9b95f1b0fadc","modified":1581333237838},{"_id":"source/temp/项目的一些思考.md","hash":"cde09fcaee057fb116aa381f39200ed6afb3b5ab","modified":1580816855635},{"_id":"source/tags/index.md","hash":"6a667ad05d11c6afe797afa070d3e43e6527e27c","modified":1575251053423},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1575251053424},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1575251053424},{"_id":"themes/material/languages/ar.yml","hash":"b8ffe10584fe49ed0218e57b27140b134e3022f8","modified":1575251053426},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1575251053426},{"_id":"themes/material/languages/en.yml","hash":"2d538f5b71b2837b75bdcb686f1431a48dcb6eda","modified":1575251053426},{"_id":"themes/material/languages/es.yml","hash":"aaf23ea448489ec01f7c6228e3bf4833e062ec34","modified":1575251053427},{"_id":"themes/material/languages/fr.yml","hash":"66a966e8a9a60bfe00829b20c1f5e26cd6390f73","modified":1575251053427},{"_id":"themes/material/languages/ja.yml","hash":"af5466576ce9f6cac8529feb57ac8ba5401a318f","modified":1575251053427},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1575251053427},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1575251053427},{"_id":"themes/material/languages/zh-CN.yml","hash":"563671897a5d4d04ddc2f4b8a45e8f2c366a77b9","modified":1575251053427},{"_id":"themes/material/languages/zh-TW.yml","hash":"516b74e942f849e716098d111c7c3a9f4847cb0a","modified":1575251053427},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1575251053435},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1579953305100},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1579953295197},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1575251053435},{"_id":"themes/material/source/.DS_Store","hash":"f81d5347c4bf20d3948d68cea9be285134671d7a","modified":1580525350489},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053427},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053435},{"_id":"source/_posts/IDE/使用idea开发spring boot项目生成的一些文件.md","hash":"b055d6a9a744310fc05f690f32d621f8f0966061","modified":1597656057139},{"_id":"source/_posts/css基础/CSS的那些坑.md","hash":"4254f96fb09fb2e23df0fa8640ec0dfece60c6c0","modified":1597655643578},{"_id":"source/_posts/css基础/换行造成空格间距的解决方案.md","hash":"a6165cf891f1bbc184447c98f4185266e2e3f8b3","modified":1597651293238},{"_id":"source/_posts/css基础/标准盒模型和怪异盒模型.md","hash":"a822ba1ef57a3af89c3ab9b6a0e56f250f6c0975","modified":1597651143749},{"_id":"source/_posts/es6/ES6学习笔记（二）:字符串的扩展.md","hash":"0f70f205b1ecb37cdd15a7fac1b6eaae346228ad","modified":1597655699967},{"_id":"source/_posts/es6/ES6：let和const关键字的总结.md","hash":"bd676ef6937f473c0f62f5906a2e88cd2c2543b3","modified":1597655703413},{"_id":"source/_posts/http/http_afternoon_tea.md","hash":"c91040faf01c9367a6dd8f5214cdebfd186cc6a4","modified":1597655679577},{"_id":"source/_posts/java/java lombok插件.md","hash":"26f9548123c535422f3c3e35b86d637c2a750a3b","modified":1597655753638},{"_id":"source/_posts/js基础/Attribute‘n'property.md","hash":"f4768a1dff802adc96c385d0fb7df5bbf644136d","modified":1597655634162},{"_id":"source/_posts/js基础/js学习：js遍历总结.md","hash":"19ef736a3095ec8ef687ab7c9b89b6de17cc2f94","modified":1597651388379},{"_id":"source/_posts/js基础/js对象判空.md","hash":"fb704c813a7fd98aeeaab186611829d91ce338b5","modified":1597655760077},{"_id":"source/_posts/js基础/《你不知道的JavaScript 上卷》第一部分.md","hash":"eed16ed499c8c3c4370132d2688c8080b0fd76f0","modified":1597655737750},{"_id":"source/_posts/js基础/关于异步方法一.md","hash":"af1afb81e14a3da49f17ac314d5038405e9ca74c","modified":1597651707584},{"_id":"source/_posts/js基础/关于异步方法二.md","hash":"8dacb889660b412100f95a952142cf4bb25538b8","modified":1597651712121},{"_id":"source/_posts/js基础/关于箭头函数需要注意的地方.md","hash":"922257b4a5162c616f7d861037025048e9ee3930","modified":1597651685619},{"_id":"source/_posts/mysql/Mysql小记.md","hash":"9077d6c9d111a756916d493b9c1d7e5ba2e3dfa1","modified":1597656083069},{"_id":"source/_posts/sql/sql语法：JOIN子句.md","hash":"0a278658afef9c3aaeae9ba555c12fec04dd1dee","modified":1597656168324},{"_id":"source/_posts/sql/sql语法：union操作符.md","hash":"85919f01eefa2cf19b47473d1be6b33e41fac33a","modified":1597656180438},{"_id":"source/_posts/vim/vim中文乱码的解决方案.md","hash":"1d325c49f632e818bc3b346022fba9867698a514","modified":1597656189490},{"_id":"source/_posts/vue/vuex学习笔记.md","hash":"09ff507059d0e8d4affa5eff3bab06633b3e1398","modified":1597656981263},{"_id":"source/_posts/vue/vue学习笔记:可复用性&组合.md","hash":"62db24325ef4252c89c6c6ec181e274dfdf7b7df","modified":1598069128321},{"_id":"source/_posts/代码质量检查/代码检测工具eslint初印象.md","hash":"5096b8e28a609d59aee24480b1210ed154fe1c82","modified":1597656983415},{"_id":"source/_posts/代码质量检查/使用SonarQube进行代码质量检查.md","hash":"d4a74ae4d8b5d83318a974e600a639f4b900dab0","modified":1597651519946},{"_id":"source/_posts/命名规范及最佳实践/js语言最佳实践.md","hash":"5f4d9867282ee034a0dbd8fca6d65d5b648a6a25","modified":1597656036932},{"_id":"source/_posts/命名规范及最佳实践/命名规范：js.md","hash":"f654687377fe53d920249b1454b8dd3302f47cb8","modified":1597651970782},{"_id":"source/_posts/浏览器/浏览器存储总结.md","hash":"d4884257a53978c49990d1a12eb7886fc59e1dde","modified":1597651264140},{"_id":"source/_posts/版本管理工具/版本管理工具：git小记.md","hash":"21b498aeb9261a2306b216e35c612c22337c1478","modified":1597655998106},{"_id":"source/_posts/版本管理工具/版本管理工具：svn小记.md","hash":"e00e9269048378a88071ed4e1b06d7b839e7e8fc","modified":1597655988814},{"_id":"source/_posts/环境搭建/Mac bash配置.md","hash":"f21fe4d8f25369a21bfb2a1bc718e02e818c89f1","modified":1597655892042},{"_id":"source/_posts/环境搭建/build-blog.md","hash":"d44bdbf5aeb23dc05663c05eb1de016cae6b0319","modified":1597651358030},{"_id":"source/_posts/环境搭建/mac搭建mysql环境.md","hash":"11c2ba9c528de2ed4a9ed8978f3876f4f8d0f35d","modified":1597650951721},{"_id":"source/_posts/环境搭建/科学上网.md","hash":"55631d6d29e88e4bc4e1c6db3d845495f17a82ab","modified":1597651272166},{"_id":"source/_posts/编程实践/title-icon.md","hash":"6d0759fe7b226d882b9490121c94747e215e0be9","modified":1597652103524},{"_id":"source/_posts/设计/「写给大家看的设计书」.md","hash":"d4f62e7c8f92b0c1d33446a1a5127c75dd9ef8b0","modified":1597655960454},{"_id":"source/_posts/设计模式/js设计模式：发布订阅模式.md","hash":"64ff3f54fc1d6f36e18f609f6ed06c7bdebe5fa2","modified":1597650675984},{"_id":"source/_posts/设计模式/设计模式.md","hash":"81467d8e76c99e028f46d2f25709b3a9901f4639","modified":1597651349060},{"_id":"source/_posts/诗/daydream.md","hash":"d1351ef20b9725950ecaa21cb07d7a2cfb485dae","modified":1597655663191},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1575251053428},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"9c6e728a736eaba7edbcaf6862e5dcef8edd2a9e","modified":1575251053428},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"31095a56feaf04a710e8302ccb18e2d4d10b97ba","modified":1575251053428},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"ae949e16cbd20d895ba3c0b64f3992bf28d81e06","modified":1575251053428},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1575251053428},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1575251053428},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"1b1a18b49674d2e78672a69c6ced6ff35f1b63e9","modified":1575251053428},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1575251053428},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"9956cc20b84b67334dcc80a5d4396f9064d4a804","modified":1575251053428},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"f564ba4b36363882154870558091383887fffdf8","modified":1575251053429},{"_id":"themes/material/layout/_partial/config_footer.ejs","hash":"bd520f4e8a381494c78e3c00905c80a9cd807f97","modified":1575251053429},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1575251053429},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"c17e2da7d6cb0e4104fc64a541f4c81f4abed095","modified":1575251053429},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1575251053429},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"75ecc32a258857424c48a2ebb0b5b9f3b30614a5","modified":1575251053429},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1575251053429},{"_id":"themes/material/layout/_partial/head.ejs","hash":"253b6ce7b602a649ebf92a80c18dffa01608548d","modified":1580036896881},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"88c604ae4f70ccf24289bc967f18ada697013304","modified":1575251053430},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1575251053430},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1575251053430},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1575251053430},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1575251053430},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"b6e5af993245a2e3caa6eb66009503ec52c82f5b","modified":1575251053430},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1575251053430},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1575251053430},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"44aba38692abc609f28b55bff81362a1c03ce36c","modified":1575251053431},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1575251053431},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1575251053431},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1575251053431},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"f3ed6673a774cd5a27c94dfe174e8f7344f4ebbe","modified":1575251053431},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"1c0773c3b2cf33aad0e0373540e11540e5137c75","modified":1575251053431},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1575251053433},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1575251053433},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1575251053433},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"843818bffeaebe5e3fa07c90d260bb912555cb3b","modified":1575251053434},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"52fcfe5b70c25378e48bb67daf85d952b32d34b2","modified":1575251053434},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"f03bc95a0c9b4905413b8fdfefc1af463b51e828","modified":1580537346138},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1575251053434},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1575251053434},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1575251053434},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"ab544bc337a48bdd30f9cb146db6a287bb36a10f","modified":1575251053434},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1575251053434},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1575251053434},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"c52bbfe62863cd141925747b2575a6a6858444d1","modified":1575251053435},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1575251053435},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1575251053435},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"c604f337d219bccf3f315e984cf12a6658dbd7a2","modified":1575251053436},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1575251053436},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1575251053436},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1575251053436},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1575251053436},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1575251053436},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1575251053437},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1575251053437},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1575251053437},{"_id":"themes/material/source/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1575251053438},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1575251053438},{"_id":"themes/material/source/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1575251053438},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1575251053440},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1575251053441},{"_id":"themes/material/source/img/.DS_Store","hash":"fabbc298febac976ebd498b2a673ad2d5472b5b2","modified":1580525328925},{"_id":"themes/material/source/img/1.ico","hash":"7abe40959a68684731195f26e05fd76a293efbef","modified":1575251053458},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1575251053459},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1575251053459},{"_id":"themes/material/source/img/big.jpg","hash":"00b98bdf869a93e96db64ed31c51ec7faf795627","modified":1575251053459},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1575251053459},{"_id":"themes/material/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1575251053460},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1575251053460},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1575251053462},{"_id":"themes/material/source/img/pay.png","hash":"cb14801b182fdbb6aa0fb566141068289e761c5e","modified":1575251053462},{"_id":"themes/material/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1575251053462},{"_id":"themes/material/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1575251053469},{"_id":"themes/material/source/img/sidebar_header1.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1575251053472},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1575251053472},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1575251053473},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1575251053473},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1575251053474},{"_id":"themes/material/source/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1575251053475},{"_id":"themes/material/source/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1575251053475},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1575251053475},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1575251053475},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1575251053475},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1575251053476},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1575251053476},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1575251053438},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1575251053440},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1575251053458},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1575251053458},{"_id":"themes/material/source/img/2.ico","hash":"56b7589ed259f2486547c5366bb6fc4fcc94eda0","modified":1575251053459},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1575251053460},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1575251053473},{"_id":"themes/material/source/js/js.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1575251053474},{"_id":"themes/material/source/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1575251053474},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"c24af97754140f221d20323a3e5aac9dd02889d4","modified":1575251053431},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"61a891acb13e71289f360c91cb27fb88f81848ec","modified":1575251053431},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"8bff3b1bd066eef693319b82400c353b2d6736e7","modified":1575251053432},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1575251053437},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1575251053439},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1575251053439},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1575251053456},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1575251053457},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1575251053460},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1575251053460},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1575251053460},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1575251053460},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1575251053461},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1575251053461},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1575251053461},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1575251053462},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1575251053462},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1575251053464},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1575251053466},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1575251053467},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1575251053467},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1575251053468},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1575251053469},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1575251053472},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1575251053463},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1575251053463},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1575251053464},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1575251053464},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1575251053464},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1575251053465},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1575251053466},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1575251053466},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1575251053466},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1575251053467},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1575251053467},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1575251053468},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1575251053469},{"_id":"themes/material/layout/_widget/comment/163gentie/common.ejs","hash":"ac56d01746ef2f72d54bff4b61e0ca0089c5c164","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/163gentie/main.ejs","hash":"e84afb44929f4dab8cf279b958d472955bc5f034","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/163gentie/enter.ejs","hash":"6e057829fa926cc02e3e2ebfdee7c244a9b31dd7","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1575251053432},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1575251053433},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1575251053433},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1575251053433},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1575251053433},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1575251053433},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"fa89d225dafa4a6b0f6be6fe395ada0be172c4ae","modified":1575251053433},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1575251053457},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1575251053448},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1575251053450},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1575251053453},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1575251053443},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1575251053445},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1575251053455},{"_id":"themes/material/source/img/sidebar_header.png","hash":"3bf086915531c190ed9496b9dadc695267cf058c","modified":1575251053471},{"_id":"public/atom.xml","hash":"0be16d82131e45b3d7fe4a255bb2938360fb0b16","modified":1598242397855},{"_id":"public/sitemap.xml","hash":"10149fe8adaec596b545978263c8a69b17f27b27","modified":1598243860071},{"_id":"public/search.xml","hash":"677a2a880f4d3e7f350ea95007cdac66d1a6f7d4","modified":1598243860070},{"_id":"public/content.json","hash":"4b09d4f6773146dff38ff8816474cf5ac4b0a3de","modified":1598242397855},{"_id":"public/temp/PS学习笔记.html","hash":"db250add482cf97654caee7dda6bd16973658641","modified":1597659094715},{"_id":"public/temp/babel学习笔记.html","hash":"0ee8a8c5d869328298e2d0b77e73f87cdd8ba372","modified":1597659094715},{"_id":"public/temp/java微服务.html","hash":"fe1cef40e958325a6abefc87c0e533ad4ec4c4d6","modified":1597659094715},{"_id":"public/temp/npm使用小记.html","hash":"a442d0754f82299ce56948b88b4d0d81986dc22f","modified":1597659094715},{"_id":"public/temp/想法.html","hash":"f8dc80d7ebd40c07d4370d5b261d930c98d3adb9","modified":1597659094715},{"_id":"public/about/index.html","hash":"40febd97d4ddad9520549eacea519b0e8c7dd7df","modified":1598242397861},{"_id":"public/gallery/index.html","hash":"005f8a8f4609d0d55a6294450101c26aad60c192","modified":1597659094715},{"_id":"public/links/index.html","hash":"5522917841044540534d3145ec504f6d5237eb8a","modified":1597658281982},{"_id":"public/temp/BootstrapVue中元素的一些用法.html","hash":"ebf8890964ea5fde9e9262376c4d3ab8978a4bef","modified":1597659094715},{"_id":"public/temp/JS Date对象.html","hash":"1f749051236e1f6df7e3d93319d7d60557b514cd","modified":1597659094716},{"_id":"public/temp/iTerm2.html","hash":"4658847dba39f5f88ac6877c83591ecae4670d93","modified":1597659094716},{"_id":"public/temp/js中的几种循环和数组、对象的遍历.html","hash":"9ef730cee76eb5298b71e8fe7f97d24eb7451420","modified":1597659094716},{"_id":"public/temp/js小记：this的含义及进阶用法.html","hash":"ed460a9ffe9a41e136f49359611f4467892806b2","modified":1597659094716},{"_id":"public/temp/mac配置代理.html","hash":"67f3f59333378c7ee1d4ebec9deebd155a153a6b","modified":1597659094716},{"_id":"public/temp/schema.html","hash":"c313647409792ba28343c2286dbfde98895486e7","modified":1597659094716},{"_id":"public/temp/vue-cli配置代理.html","hash":"16a50bdeaeb91b391e0e8cf65667b44eb5417229","modified":1597659094716},{"_id":"public/temp/vue学习笔记.html","hash":"95499127ec6cea8c8205636a10d95b4ddd3a911b","modified":1597659094716},{"_id":"public/temp/vue学习笔记:工具.html","hash":"0e214dde96faafffa6e0498d2b335ef29ecbbb62","modified":1597659094716},{"_id":"public/temp/vue的一些基础知识和个人理解.html","hash":"3b58e48e78cce9e18b83c01147c963492d0b908d","modified":1597659094716},{"_id":"public/temp/web端设计规范.html","hash":"2dd1b023b35884b7216913f439e865e052b91286","modified":1597659094716},{"_id":"public/temp/《你不知道的JavaScript 上卷》第二部分.html","hash":"40064ba90bebf63342361abd96a96e66ae20f22a","modified":1597659094717},{"_id":"public/temp/关于npm.html","hash":"a1798db990d34de154d068088e3b70e64b748cc9","modified":1597659094717},{"_id":"public/temp/关于科学上网.html","hash":"7b7fdeba0b2233f5f895d8f3e8c00e9ca317c4fb","modified":1597659094717},{"_id":"public/temp/前后端跨域方案整理.html","hash":"415215bfabcd5b3e644efcea1a1631d208f9cf96","modified":1597659094717},{"_id":"public/temp/同源策略.html","hash":"c30206c3f2b6435d9f64506ddb85535b9482c23c","modified":1597659094717},{"_id":"public/temp/实用的vue工具：treeselect多选插件.html","hash":"ab5d2634fa10c7d6081f8efe570f5a1e850b59bd","modified":1597659094718},{"_id":"public/temp/常识积累.html","hash":"525c8c1a3dc4154f112ff083017151a4698ea1dc","modified":1597659094718},{"_id":"public/temp/并发模型与事件循环.html","hash":"a5b847fbaebe2c22e5db3fd3101955af57ff6dda","modified":1597659094718},{"_id":"public/temp/评估.html","hash":"581a5d15f35325d6d0faa1fe95787630aaf385d4","modified":1597659094718},{"_id":"public/temp/项目中的一些功能.html","hash":"1e628a2b169b65a2ae159f9b6a486bba1f48fffd","modified":1597659094718},{"_id":"public/temp/项目中的一些问题.html","hash":"e0c406a8cede65220211e5c4b5782483124edf81","modified":1597659094718},{"_id":"public/temp/项目的一些思考.html","hash":"6ad2bc12fb34a220e08a82dc6a3ca4d9d85f67fa","modified":1597659094718},{"_id":"public/tags/index.html","hash":"33e4ba9314f9901a637211ef3d05bc0e2b7c74d1","modified":1598241724174},{"_id":"public/2020/08/17/浏览器/浏览器存储总结/index.html","hash":"4b04de33f7a550d8c6bfe6e031f81e4700c8c498","modified":1598241724174},{"_id":"public/2020/08/03/版本管理工具/版本管理工具：svn小记/index.html","hash":"c61fc3664556f6db68cc0cf9b6b6263cd0ca13a1","modified":1598241724174},{"_id":"public/2020/08/02/命名规范及最佳实践/命名规范：js/index.html","hash":"6e9d168782d40596c1097a6bcd69d6680c2af0c1","modified":1597659094718},{"_id":"public/2020/08/01/版本管理工具/版本管理工具：git小记/index.html","hash":"4a60919d270c54b7b92a27d03ea8cf577b091176","modified":1598241724174},{"_id":"public/2020/08/01/js基础/js对象判空/index.html","hash":"516df19106ab38786d7a560de5039eceff825bd8","modified":1597659094718},{"_id":"public/2020/07/02/环境搭建/Mac bash配置/index.html","hash":"8501ab72d6c63204c97708b44f0659ef287875d0","modified":1598241724174},{"_id":"public/2020/07/01/IDE/使用idea开发spring boot项目生成的一些文件/index.html","hash":"604cfce61d762cb9191882c1556c089dfc6fd667","modified":1597659094718},{"_id":"public/2020/07/01/js基础/关于箭头函数需要注意的地方/index.html","hash":"9ff54468efcf44a59d0319d076d7e9293ab29506","modified":1598241724174},{"_id":"public/2020/04/29/es6/ES6学习笔记（二）:字符串的扩展/index.html","hash":"e499bbcdb5bdaacb6832f6c1bfbed30eafd44980","modified":1598241724174},{"_id":"public/2020/04/24/vue/vuex学习笔记/index.html","hash":"2e0b51804f0dfe8951b22fbc5f6bee9327d45197","modified":1598241724174},{"_id":"public/2020/04/24/vue/vue学习笔记:可复用性&组合/index.html","hash":"879e48d6fa663ac2ee5054d629c3ae9c943bc221","modified":1597659094719},{"_id":"public/2020/04/23/js基础/js学习：js遍历总结/index.html","hash":"1e77d30c3a3d1d1bcc69dd3490ab0599a169518c","modified":1597659094719},{"_id":"public/2020/04/09/代码质量检查/使用SonarQube进行代码质量检查/index.html","hash":"51f3f5e0572ae87bea201be09b7a47811805be7d","modified":1598241724174},{"_id":"public/2020/04/08/设计模式/js设计模式：发布订阅模式/index.html","hash":"8642ed079b7a35e45ee0505091b00f602eb4234a","modified":1598241724174},{"_id":"public/2020/03/27/css基础/CSS的那些坑/index.html","hash":"e6678d4431fd1d0d17fba8ad857df6c2621176aa","modified":1598241724174},{"_id":"public/2020/03/23/es6/ES6：let和const关键字的总结/index.html","hash":"57289efc4c78070c6a5c13f7ecf4059a2f2d5a93","modified":1598241724174},{"_id":"public/2020/03/15/mysql/Mysql小记/index.html","hash":"b72ca685e0e99554e9ccbae43e8dae34df61e23c","modified":1598241724174},{"_id":"public/2020/03/15/环境搭建/mac搭建mysql环境/index.html","hash":"d2cd83ca2837384e724a02a61adb4295dd2ed64a","modified":1597659094721},{"_id":"public/2020/03/11/代码质量检查/代码检测工具eslint初印象/index.html","hash":"ccd88b094a2213db894b85e263e54697909de913","modified":1597659094721},{"_id":"public/2020/03/10/js基础/关于异步方法二/index.html","hash":"e027d63e38341acb88af5be65b62ae032996c2f1","modified":1597659094721},{"_id":"public/2020/03/05/js基础/关于异步方法一/index.html","hash":"f10ba0fb52b46bed1588bce5c3a2b799b223df70","modified":1597659094721},{"_id":"public/2020/01/31/js基础/《你不知道的JavaScript 上卷》第一部分/index.html","hash":"26cef98a2a037d284a0605b7aa061b2de1932f49","modified":1597659094721},{"_id":"public/2020/01/26/环境搭建/科学上网/index.html","hash":"fd3fdc9881efdea390a1d0fa128079f25ff68b9a","modified":1597659094721},{"_id":"public/2019/12/02/设计模式/设计模式/index.html","hash":"786e39ec3dc63084ed952bdfaed17706436957d5","modified":1598241724174},{"_id":"public/2018/04/23/诗/daydream/index.html","hash":"baa782b6b34a6c45694e2589cbb01ffeeec1db07","modified":1598241724174},{"_id":"public/2017/10/27/sql/sql语法：union操作符/index.html","hash":"fda84c5e863465c065a96114a3fd100df2957006","modified":1597659094721},{"_id":"public/2017/10/27/sql/sql语法：JOIN子句/index.html","hash":"7c1f54dce5aa5e517045356117663bc5dd0a5786","modified":1597659094721},{"_id":"public/2017/10/24/vim/vim中文乱码的解决方案/index.html","hash":"4ae2c27d6130973f9b0514d44e2eb05d1017482f","modified":1597659094721},{"_id":"public/2017/08/07/css基础/标准盒模型和怪异盒模型/index.html","hash":"9178cb58f020b913e23a720b374bd8140953a272","modified":1597659094721},{"_id":"public/2017/10/14/css基础/换行造成空格间距的解决方案/index.html","hash":"e03622a952a9b7a44916b6b7bc5a687761141d56","modified":1597659094721},{"_id":"public/2017/08/07/设计/「写给大家看的设计书」/index.html","hash":"ff81ef60bb0a034f9af761be3ad1de21d1dba19b","modified":1597659094721},{"_id":"public/2017/08/01/js基础/Attribute‘n'property/index.html","hash":"62eb6d6a0b10051a10a06528d5dc684544aae7b1","modified":1597659094721},{"_id":"public/2017/07/30/命名规范及最佳实践/js语言最佳实践/index.html","hash":"0264f272b0c0fc9bd9c9d840057b20beda89f098","modified":1597659094721},{"_id":"public/2017/06/14/java/java lombok插件/index.html","hash":"7b8a42f5fc55a3bdf285718fd2baf9bb2ac16b7a","modified":1597659094721},{"_id":"public/2017/06/14/http/http_afternoon_tea/index.html","hash":"126346f35d8cb2be3e2486b5027d4e965e9b6dce","modified":1597659094721},{"_id":"public/2017/05/24/编程实践/title-icon/index.html","hash":"9add6e126014be7fda4a4a0fb97de6bf2eab87f4","modified":1597659094722},{"_id":"public/2017/05/10/环境搭建/build-blog/index.html","hash":"a83063a5d045cb50d87191b0bf1cd006d57a1a55","modified":1597659094722},{"_id":"public/categories/es6/index.html","hash":"eef14d52f08de862229eadadb426f8dbd614e205","modified":1598241724175},{"_id":"public/categories/css/index.html","hash":"9283299e218f8946a68228f033c12583b569cfb1","modified":1598241724175},{"_id":"public/categories/前端/index.html","hash":"aa432f79955109d651ceab7ad4cd7fd6426a428b","modified":1598241724175},{"_id":"public/categories/前端/page/2/index.html","hash":"c81c6416549eff89ff42ae4ac3c1631809d5a3c4","modified":1598241724175},{"_id":"public/categories/读书笔记/index.html","hash":"21b60d94dc32d53e97a676ccf217a459b3bfbf9f","modified":1597658281988},{"_id":"public/categories/Java/index.html","hash":"fdd13e94b0bfedf7db845bff286cfc0e36d91684","modified":1597659094722},{"_id":"public/categories/sql/index.html","hash":"6f219cb78bc68f8e2e4c082ffdced7080f3202b5","modified":1597659094722},{"_id":"public/categories/mysql/index.html","hash":"2456e007c9469249e78ad182122f3bad68111a72","modified":1597659094722},{"_id":"public/categories/工具/index.html","hash":"8bb888750e7a76c65e38716ec2c1c9536beeaba9","modified":1597659094722},{"_id":"public/categories/js/index.html","hash":"737941b1bb64acc0699e471314b6d4dbb660aaac","modified":1597659094722},{"_id":"public/categories/后端/index.html","hash":"0337916ec5d29c127138b040d317ee540505c455","modified":1597659094722},{"_id":"public/categories/mac/index.html","hash":"b31f22c35b604818277e4baf822d8466bd1d0abc","modified":1597659094722},{"_id":"public/categories/环境搭建/index.html","hash":"2351c9f83c50d068fb59bdb04817d64804389de9","modified":1597659094722},{"_id":"public/categories/计算机网络/index.html","hash":"ec46969c507dcd82a29f7612a55546365bb4f1ca","modified":1597658281989},{"_id":"public/categories/设计模式/index.html","hash":"d651e26219408ebb3e56a20fcab8819be0325d66","modified":1597659094722},{"_id":"public/categories/软件设计/index.html","hash":"b3aca6872b79216ec48f4835fc9771d764e6a66a","modified":1598241724175},{"_id":"public/categories/现代诗/index.html","hash":"73242e93bfdc719e6630a98b49da16177439d377","modified":1597658281989},{"_id":"public/index.html","hash":"75ae65a520e1cc0f2bb9a075c96e2c815782de4b","modified":1598242397861},{"_id":"public/page/2/index.html","hash":"9659926ed195da6470859471be1930951d52d92f","modified":1598242397861},{"_id":"public/page/3/index.html","hash":"10b217805f171100318637f7dbbf6b21451b418a","modified":1598242397861},{"_id":"public/page/4/index.html","hash":"3c4c5218e785c94cc0aa87336af9ac0fbb69c7a7","modified":1598242397861},{"_id":"public/tags/es6/index.html","hash":"6c5fbd965f80ddf9b4feb70a417c83adfec45024","modified":1598241724175},{"_id":"public/tags/js/index.html","hash":"e2d52b07e184aae7e458f5c0fc88c66dfb261aa3","modified":1598241724175},{"_id":"public/tags/css/index.html","hash":"45dc9759e2063531afb06462708c54499c92b219","modified":1598241724176},{"_id":"public/tags/前端/index.html","hash":"8e9f779da10d1ec3c213449d015883c9312eb593","modified":1598241724176},{"_id":"public/tags/读书笔记/index.html","hash":"285a4b6148d71e1adfdc8d688e82f48952a1a6ac","modified":1597658281989},{"_id":"public/tags/前端/page/2/index.html","hash":"a7e063d2f93980e9978d3fadd6e0af5d35205c7a","modified":1598241724176},{"_id":"public/tags/设计/index.html","hash":"ebadc5d62a93234af78992b7e0fd1381db2cdc20","modified":1597658281989},{"_id":"public/tags/let/index.html","hash":"22e1cb796cbd4ee70c279d3fa86776d17b0d1b11","modified":1597659094723},{"_id":"public/tags/Java插件/index.html","hash":"d3f1b16a882f01254e4732befe56f587c602a695","modified":1597659094723},{"_id":"public/tags/js异步/index.html","hash":"e4663a4a6877ffc5359ada513d0a3ae46bbcb38d","modified":1597659094724},{"_id":"public/tags/mysql/index.html","hash":"1d099a28934996e8b4f67dc880c29894dfcb3daf","modified":1597659094724},{"_id":"public/tags/sql/index.html","hash":"10a0fe22a80578d5a2b634e715f451273c8a546b","modified":1597659094724},{"_id":"public/tags/工具/index.html","hash":"96e40676e836be6f656f4257a39534dd0908e330","modified":1597659094724},{"_id":"public/tags/vim/index.html","hash":"0264dfc563731d190e6da4d1059113903ebef7d5","modified":1597659094724},{"_id":"public/tags/vue/index.html","hash":"e5d1ef6490ca3b2fc625ddfdba51a1bf2022d4f0","modified":1598241724176},{"_id":"public/tags/代码质量检查/index.html","hash":"50bf34e69b5a504a39eb3431b9f84f16210b8050","modified":1597659094724},{"_id":"public/tags/eslint/index.html","hash":"c4a9ca9e451d68cdddb92e0f825c013a3b7eb036","modified":1597659094724},{"_id":"public/tags/SonarQube/index.html","hash":"d6c494448f1a4f7fa1c8087548c2259d7a8fe7c4","modified":1597659094724},{"_id":"public/tags/命名规范/index.html","hash":"3bfbfe792d3c62853471d5b0fa60b8a684c3faf8","modified":1597659094724},{"_id":"public/tags/浏览器原理/index.html","hash":"1012efbcd73b8bf90dd8b46f88a9e614da9942a7","modified":1598241724176},{"_id":"public/tags/git/index.html","hash":"8dddd240cc5f092af278ba3562bda8bf13604ec2","modified":1597659094724},{"_id":"public/tags/版本管理工具/index.html","hash":"105ce75998263a42d8490ef94b664ed6b43e1993","modified":1597659094724},{"_id":"public/tags/svn/index.html","hash":"425776d661b031b48f13dc0ba9d3db7d3871c7da","modified":1597659094724},{"_id":"public/tags/mac/index.html","hash":"e85a40336d334f2e5766333e71898514e741998a","modified":1597659094724},{"_id":"public/tags/win10/index.html","hash":"11e8da72f42d03b88c8c53bc842b038860ab2de8","modified":1597659094724},{"_id":"public/tags/博客/index.html","hash":"84e4d999ec8f1a6e403f2f0ecdd6dcf9f0f8f1ed","modified":1597659094724},{"_id":"public/tags/环境搭建/index.html","hash":"b25dc945db43ead9efbdb2bdf4beef054ef9f8da","modified":1597659094724},{"_id":"public/tags/vps/index.html","hash":"2bf82d89c117656d36d64652c17143123f4a1a99","modified":1597658281991},{"_id":"public/tags/设计模式/index.html","hash":"1c5eea97f9d6b89a1a4311c0762f9b836c178985","modified":1597659094724},{"_id":"public/tags/软件设计/index.html","hash":"0044e021b8f40cceeb16238da4e08866128193f6","modified":1598241724176},{"_id":"public/tags/诗歌/index.html","hash":"3f578c53d39f13ef4363cee30ca39f6357280ded","modified":1597659094725},{"_id":"public/archives/index.html","hash":"109e6ade3c59823dd212c46159a95b97dc41bb98","modified":1598242397861},{"_id":"public/archives/page/2/index.html","hash":"427c4213e22426c19c0fe0745ec8ed09fac1ed4f","modified":1598242397861},{"_id":"public/archives/page/3/index.html","hash":"7290cbb040418197144acc271d23a5ff12ef2c63","modified":1598242397861},{"_id":"public/archives/page/4/index.html","hash":"2427a6e11ed887c5cf3d2907b913e8f56e41bc2e","modified":1598242397861},{"_id":"public/archives/2017/index.html","hash":"40b5782c1a0a92db2c96590547bbf18157190f20","modified":1597658281991},{"_id":"public/archives/2017/page/2/index.html","hash":"e0c19c9dbfbe9ef3e5450e95f728573e234d2b8e","modified":1597659094722},{"_id":"public/archives/2017/05/index.html","hash":"2b38f1cafec5afe61a2b93b9ca76b73175cbd0f8","modified":1597658281991},{"_id":"public/archives/2017/06/index.html","hash":"c0883bb35d034045d9262667306464a0faddb429","modified":1597658281991},{"_id":"public/archives/2017/07/index.html","hash":"ce80724393a57eeba8d0aaf8d82a192014b43a4b","modified":1597659094722},{"_id":"public/archives/2017/08/index.html","hash":"903ca1a658535040648ff18f1e74cd63b4b01f76","modified":1597658281991},{"_id":"public/archives/2017/10/index.html","hash":"ec77385fb1724c1990cab580f69fdd354576944b","modified":1597658281991},{"_id":"public/archives/2018/index.html","hash":"3b5a6ef0f1e6af68574640d8da94a9babfa06c3e","modified":1597658281991},{"_id":"public/archives/2018/04/index.html","hash":"d844f547e49452cd8418884d20e82911f0e17b5d","modified":1597658281991},{"_id":"public/archives/2019/index.html","hash":"c502f07779c08ceeab600edfb11c4cc6080e17fa","modified":1598241724175},{"_id":"public/archives/2019/12/index.html","hash":"12036971b85caf17e125608282318813978ee3f1","modified":1598241724175},{"_id":"public/archives/2020/index.html","hash":"478245a0eee9f8dc844748933f489b8c0d8b4969","modified":1598242397861},{"_id":"public/archives/2020/page/2/index.html","hash":"1dac948896114d7843aa6f156b5007f02d6beff1","modified":1598242397862},{"_id":"public/archives/2020/page/3/index.html","hash":"87e1c19653f63546e92a9542174a4423f86a7fbc","modified":1598242397862},{"_id":"public/archives/2020/01/index.html","hash":"0554d36df3df2b96edc2583f93940b386c17d297","modified":1597659094723},{"_id":"public/archives/2020/03/index.html","hash":"7ac52ec6f9f93c55a4029353c61433895a3fb106","modified":1598241724175},{"_id":"public/archives/2020/04/index.html","hash":"049fe26c844a07694d6a3b25228fc5a5dba9d75e","modified":1598241724175},{"_id":"public/archives/2020/07/index.html","hash":"93ed298fa0a55346dee6a1858479e86f0da7df95","modified":1597659094723},{"_id":"public/archives/2020/08/index.html","hash":"4b7e8c6f0db8098a029b4b224345959bd536f775","modified":1598242397862},{"_id":"themes/material/..travis 2.yml.icloud","hash":"49d7d4dbf5babf951b2a78e9ef833c30d1ffb8a3","modified":1575251053000},{"_id":"themes/material/.eslintrc 2.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1575251053000},{"_id":"themes/material/.._config 2.yaml.icloud","hash":"44f536e313553969dc513219db38dfde4d4239a7","modified":1587698601000},{"_id":"themes/material/.._config.template 2.yml.icloud","hash":"7365b286f3af2274c10f9a78624b7485afb0c63a","modified":1575251053000},{"_id":"themes/material/.gitignore 2","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1575251053000},{"_id":"themes/material/CONTRIBUTING.zh-cn 2.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1575251053000},{"_id":"themes/material/CONTRIBUTING 2.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1575251053000},{"_id":"themes/material/README 2.md","hash":"cc7b80f6bce7b910a7ba641abac1ade1311705f8","modified":1581573450000},{"_id":"themes/material/LICENSE 2","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1575251053000},{"_id":"themes/material/contributing 2.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1575251053000},{"_id":"themes/material/lint 2.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1575251053000},{"_id":"themes/material/package 2.json","hash":"6b63bbc7e3c8532359dd2a80328f51f4e97474b9","modified":1580264324000},{"_id":"source/gallery/index 2.md","hash":"32e639d06ecd66a0d767ff60508c6db70af9795e","modified":1580539492000},{"_id":"source/_posts/.DS_Store","hash":"0242e6ce6c5d47e254d7459416c5d33cd1e203a5","modified":1597714336274},{"_id":"source/about/.index.md 2.bak.icloud","hash":"3596a3c9e30a5e9ce0da82737616eaf8c5fa9611","modified":1575251053000},{"_id":"source/about/index 2.md","hash":"76ddfa7a9cf74cefcee0d17778a0621a1f42cb3a","modified":1586265737000},{"_id":"source/links/.index.md 2.bak.icloud","hash":"7f26dcf77ccc7939bda7c4bde5963ee33179f682","modified":1575251053000},{"_id":"source/links/index 2.md","hash":"3fe8ca9c562fc0c356f330715bf53740303f6b99","modified":1575251053000},{"_id":"source/tags/.index.md 2.bak.icloud","hash":"7f26dcf77ccc7939bda7c4bde5963ee33179f682","modified":1575251053000},{"_id":"source/tags/index 2.md","hash":"6a667ad05d11c6afe797afa070d3e43e6527e27c","modified":1575251053000},{"_id":"themes/material/.github/ISSUE_TEMPLATE 2.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1575251053000},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE 2.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1575251053000},{"_id":"themes/material/layout/.index 2.ejs.icloud","hash":"be6a5ac2ee4dab7f876f414b21fae8b2a1beb3c5","modified":1575251053000},{"_id":"themes/material/layout/.layout 2.ejs.icloud","hash":"a44599e7242615b644b6513a10c983e948998290","modified":1579953305000},{"_id":"themes/material/layout/.post 2.ejs.icloud","hash":"447d3c417882cbe2bae5a07a30c4c8d78e635b94","modified":1579953295000},{"_id":"themes/material/languages/.ar 2.yml.icloud","hash":"8a659a883d542dca8a81ab7fd5887562a7dbf5cd","modified":1575251053000},{"_id":"themes/material/languages/.de 2.yml.icloud","hash":"e5b1f91bfc833b9b4d908f7f2b558007a2cc078f","modified":1575251053000},{"_id":"themes/material/languages/.en 2.yml.icloud","hash":"d226086db0001d40f9b3059932549a45eaca8db4","modified":1575251053000},{"_id":"themes/material/languages/.es 2.yml.icloud","hash":"c25cf4f7b7602e2b0f9b3c8b7791e7f435fcb0e8","modified":1575251053000},{"_id":"themes/material/languages/.fr 2.yml.icloud","hash":"843ce638e39fcb14d5866e0b67462479ab29fcd3","modified":1575251053000},{"_id":"themes/material/languages/.ja 2.yml.icloud","hash":"645dd447f4a34472624f8455d8b83eff41f89ba6","modified":1575251053000},{"_id":"themes/material/languages/.ms 2.yml.icloud","hash":"43632fa5bb7dfef23705d4b993181e24a575f026","modified":1575251053000},{"_id":"themes/material/languages/.pt-BR 2.yml.icloud","hash":"97094584b48e825c122de2304c3988b8a4a7663b","modified":1575251053000},{"_id":"themes/material/languages/.zh-CN 2.yml.icloud","hash":"11168e61103519d169f5f99a01e8c3ec010cf793","modified":1575251053000},{"_id":"themes/material/languages/.zh-TW 2.yml.icloud","hash":"4e6ef7c57aa966e520441bd1f826849e779427c0","modified":1575251053000},{"_id":"themes/material/scripts/helper 2.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1575251053000},{"_id":"themes/material/scripts/lib/font_lsload 2.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053000},{"_id":"source/_posts/Node/node入门.md","hash":"d2a03093f8730e50d1994a6fd7e9151bb4ba846b","modified":1598241395657},{"_id":"source/_posts/css基础/dispaly:none与visibility的辨析.md","hash":"b9d5d6150a63f75c3b3ed9a9488ea2d580d42fc0","modified":1597676971544},{"_id":"source/_posts/css基础/test外边距折叠.html","hash":"310b38e15a329388bb92205db87d53b845ec1993","modified":1597720334348},{"_id":"source/_posts/css基础/外边距折叠.md","hash":"4fcb800dd8217f9391c732d9f79e832aabec7e11","modified":1597678547618},{"_id":"source/_posts/css基础/定位、文档流与文本流.md","hash":"0510eb6df4f38f26aa7ec409c7da87259a2e5d59","modified":1597676924300},{"_id":"source/_posts/js基础/js遍历总结.md","hash":"692c303df4f523d88a29c502529fd41655b8ef52","modified":1598081043853},{"_id":"source/_posts/js基础/js数据类型.md","hash":"2e92fe14dfbbcfbc18deb9a7a8cb90ae109d0bba","modified":1598069448831},{"_id":"source/_posts/js基础/js引用类型.md","hash":"098e89f8c6fd8773962d9297ab2455e44722f877","modified":1598081014426},{"_id":"source/_posts/js基础/js对象.md","hash":"b42204192089680bbeb540701197964ce0206bf4","modified":1598197204456},{"_id":"source/_posts/js基础/常用console方法总结.md","hash":"586673956bdf616ad8d24556d9529b1c137b40c4","modified":1597979381659},{"_id":"source/_posts/vue/实用的vue工具：treeselect多选插件.md","hash":"2221ff4d1cb9ab7a13efa4b89181dc41820ae91c","modified":1598069112639},{"_id":"source/_posts/浏览器/同源策略及跨域.md","hash":"b2a2c52739bf6a7d550ba395c99b278ad4e3deaf","modified":1598241634943},{"_id":"source/_posts/浏览器/Chrome浏览器的渲染过程.md","hash":"f2799bbb5e30c1f996bd200084a6d8d1e952e3c6","modified":1597677883214},{"_id":"themes/material/layout/_widget/.leancloud-like 2.ejs.icloud","hash":"f66dff34f5fa7d7802e9402e0b34f88c12ddf603","modified":1575251053000},{"_id":"themes/material/layout/_widget/.leancloud-views 2.ejs.icloud","hash":"82be6a39d8ba53a4f3749457e952e6faf6e54636","modified":1575251053000},{"_id":"themes/material/layout/_widget/.mathjax 2.ejs.icloud","hash":"089a52b4aefdf0d6d3b87775ac129c5d5f436ac6","modified":1575251053000},{"_id":"themes/material/layout/_widget/.leancloud-views_num 2.ejs.icloud","hash":"c0c97e4b2b636f6f81df2a862f255680b14fb5e5","modified":1575251053000},{"_id":"themes/material/layout/_widget/.page-links 2.ejs.icloud","hash":"d219b62da32b62cbedaa8a68498f9d9f115ae6e8","modified":1575251053000},{"_id":"themes/material/layout/_widget/.page-tagcloud 2.ejs.icloud","hash":"02c2c7ee35101dca84a0c340386012972993c10e","modified":1575251053000},{"_id":"themes/material/layout/_widget/.page-gallery 2.ejs.icloud","hash":"8c6365e2ec72ae0b22a57eeddc36a32bc82291fe","modified":1580537346000},{"_id":"themes/material/layout/_widget/.qrcode 2.ejs.icloud","hash":"7511976172913d05e8e9392a3b530b761ea14161","modified":1575251053000},{"_id":"themes/material/layout/_widget/.search-local-js 2.ejs.icloud","hash":"5ab1f47a95d67fb517c199cc075cbab58f75d0ab","modified":1575251053000},{"_id":"themes/material/layout/_widget/.nprogress 2.ejs.icloud","hash":"f67ca7ca72de3f99a98d95ef6201858b75a84ebc","modified":1575251053000},{"_id":"themes/material/layout/_widget/.page-timeline 2.ejs.icloud","hash":"b9366b477b27ab481e656ecac7d68de6893f4d2f","modified":1575251053000},{"_id":"themes/material/layout/_widget/.search-swiftype-js 2.ejs.icloud","hash":"61b7ba5a1071f321a1f211daa2a0b89cb8695343","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Isolation-post-info 2.ejs.icloud","hash":"a39d40db11a11441ffea34c95fad28daa6265a65","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Paradox-post-info 2.ejs.icloud","hash":"38d76f704c1d9808ffb797494f22bcb506488a1a","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Paradox-post_entry 2.ejs.icloud","hash":"585c2c76338b8e3a0702e56ef4094fbc928ffdee","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Isolation-post_entry 2.ejs.icloud","hash":"3ecee7fc8f75360256df4073c3b52471cc4473bd","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Paradox-post-thumbnail 2.ejs.icloud","hash":"155c8371c5a4a7465444fe6876c3fb825cc29b77","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Paradox-post_entry-thumbnail 2.ejs.icloud","hash":"e74db17c3f5e570298c9d72ef527bdb2496d7589","modified":1575251053000},{"_id":"themes/material/layout/_partial/.blog_info 2.ejs.icloud","hash":"44839b78af488589939a88073a152c6bb6e462a9","modified":1575251053000},{"_id":"themes/material/layout/_partial/.Paradox-search 2.ejs.icloud","hash":"b966c4687143e842b7c48033f9b79c63541ec1b1","modified":1575251053000},{"_id":"themes/material/layout/_partial/.comment 2.ejs.icloud","hash":"a866efd683ede8f0c3bc9e4e98522bbf4a823c05","modified":1575251053000},{"_id":"themes/material/layout/_partial/.config_css 2.ejs.icloud","hash":"f9684f7827e5ce6f37d087cd8187047483410b53","modified":1575251053000},{"_id":"themes/material/layout/_partial/.config_font 2.ejs.icloud","hash":"a01cd2d8499e9ea1fc87a3153f209c58e706a73c","modified":1575251053000},{"_id":"themes/material/layout/_partial/.daily_pic 2.ejs.icloud","hash":"a8d907cd55f8a9f819168db914d77f53c2e8a9a9","modified":1575251053000},{"_id":"themes/material/layout/_partial/.footer 2.ejs.icloud","hash":"ca25470a3fd40921788355b2d012ff7d6c2042df","modified":1575251053000},{"_id":"themes/material/layout/_partial/.footer-left 2.ejs.icloud","hash":"2cfa61e493f7164c933fcf5fc60f9f492e6c946e","modified":1575251053000},{"_id":"themes/material/layout/_partial/.config_footer 2.ejs.icloud","hash":"36511597f0abd0b69844171070441c7050d06c1c","modified":1575251053000},{"_id":"themes/material/layout/_partial/.head 2.ejs.icloud","hash":"dd514f823484a3b7f1b37bef363eafa8803db02b","modified":1580036896000},{"_id":"themes/material/layout/_partial/.footer_top 2.ejs.icloud","hash":"f943c1173faae10c7ab8b7934d79b8814a8ed3ec","modified":1575251053000},{"_id":"themes/material/layout/_partial/.import_js 2.ejs.icloud","hash":"a0706f368dbb636b2f33973f86dc69929941c1f6","modified":1575251053000},{"_id":"themes/material/layout/_partial/.isolate-sns_list 2.ejs.icloud","hash":"1d2392f243b51cc84b9cdad6dc347f7eda350a35","modified":1575251053000},{"_id":"themes/material/layout/_partial/.footer-option 2.ejs.icloud","hash":"9091c3117bc9091e5cc32a273d15bc4f3eb41e91","modified":1575251053000},{"_id":"themes/material/layout/_partial/.post-content 2.ejs.icloud","hash":"2d5e4413908a025bacd2a7df632bfc5fc105b8c3","modified":1575251053000},{"_id":"themes/material/layout/_partial/.post-header 2.ejs.icloud","hash":"a9110d93a313bedb721cb1c67e4bb834d675d31b","modified":1575251053000},{"_id":"themes/material/layout/_partial/.post-nav 2.ejs.icloud","hash":"72922c29dda55c3703c6f6aef95bbbc194faf7e3","modified":1575251053000},{"_id":"themes/material/layout/_partial/.sidebar 2.ejs.icloud","hash":"a68ae02c097382e166ee3e98b1baa0518af7957b","modified":1575251053000},{"_id":"themes/material/layout/_partial/.post-info-share 2.ejs.icloud","hash":"5fd844c8cb4b5e3baae674404f4f00649d7c8b22","modified":1575251053000},{"_id":"themes/material/layout/_partial/.isolate_info 2.ejs.icloud","hash":"11b04bc2c10f9be2805385978f684f005a178dfd","modified":1575251053000},{"_id":"themes/material/layout/_partial/.sidebar-footer 2.ejs.icloud","hash":"a1617476f8dc96b5b4d1a23dcff288c2bd39d586","modified":1575251053000},{"_id":"themes/material/layout/_partial/.sidebar-header 2.ejs.icloud","hash":"9dc476036a002288bcbcf2fdbbed74527b3418fa","modified":1575251053000},{"_id":"themes/material/layout/_partial/.sidebar-footer_image 2.ejs.icloud","hash":"29586620e0fb10552381eee8419d499557dea51d","modified":1575251053000},{"_id":"themes/material/layout/_partial/.sidebar-navigation 2.ejs.icloud","hash":"0c7c5fd3ff7d0d8256457fc2520a60067efd97a6","modified":1575251053000},{"_id":"themes/material/layout/_partial/.structured-data 2.ejs.icloud","hash":"ff38061c5cb6bdd1941e928c79d2f3502f82b060","modified":1575251053000},{"_id":"themes/material/layout/_partial/.toc_button 2.ejs.icloud","hash":"c0e430b942dc56aaf5e9cb8517f1c521b7238d30","modified":1575251053000},{"_id":"themes/material/scripts/lib/css_lsload 2.js","hash":"c52bbfe62863cd141925747b2575a6a6858444d1","modified":1575251053000},{"_id":"themes/material/scripts/lib/get_file_hex 2.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1575251053000},{"_id":"themes/material/scripts/lib/js_hex 2.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1575251053000},{"_id":"themes/material/scripts/lib/js_lsload 2.js","hash":"c604f337d219bccf3f315e984cf12a6658dbd7a2","modified":1575251053000},{"_id":"themes/material/scripts/lib/path_for 2.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1575251053000},{"_id":"themes/material/source/css/.disqus-proxy 2.css.icloud","hash":"0210cbdaf1068243541326dca2abf4b29701ab42","modified":1575251053000},{"_id":"themes/material/source/css/.disqus-proxy.min 2.css.icloud","hash":"0fc713433b86f5d51dfad5bacbf37c6b7afdad5d","modified":1575251053000},{"_id":"themes/material/source/css/.duoshuo 2.css.icloud","hash":"4c11264a0988cdad8f0c4988237ae014ce2c2682","modified":1575251053000},{"_id":"themes/material/source/css/.gallery.min 2.css.icloud","hash":"d9cc729f970e62761a0e963fde9f82730bb2b811","modified":1575251053000},{"_id":"themes/material/source/css/.duoshuo.min 2.css.icloud","hash":"21c355eefd20d0dde37f42aa07f61ba8ec4cfa06","modified":1575251053000},{"_id":"themes/material/source/css/.fontawesome.min 2.css.icloud","hash":"328b9822e63dfabd6660afa8ca492aa0c2c13f74","modified":1575251053000},{"_id":"themes/material/source/css/.ie-blocker 2.css.icloud","hash":"7e6a9df2f98324cd7c947e52272f4172d4228d1a","modified":1575251053000},{"_id":"themes/material/source/css/.style 2.css.icloud","hash":"4517e5a75013d943effc0103b75d74f6c38724d6","modified":1575251053000},{"_id":"themes/material/source/css/.material.min 2.css.icloud","hash":"e69d0dc0495f2501b7703fb56e11da8bc1d7322d","modified":1575251053000},{"_id":"themes/material/source/css/.material 2.css.icloud","hash":"046a78a0639b1ec583e8d3d0547f3d59ffb0aeb4","modified":1575251053000},{"_id":"themes/material/source/css/.style.min 2.css.icloud","hash":"07e82e9b3bb4fd623252a27880a9d6bb4278e78a","modified":1575251053000},{"_id":"themes/material/source/css/.uc 2.css.icloud","hash":"f8cce04357794a1f27ef040b58687f78f80d3f57","modified":1575251053000},{"_id":"themes/material/source/fonts/.FontAwesome 2.otf.icloud","hash":"3847d418e4db1fad8ab9aba8b06194c1e9460282","modified":1575251053000},{"_id":"themes/material/source/fonts/.MaterialIcons-Regular 2.eot.icloud","hash":"139966470a7528b5f267bf54f17b4bce62d28f3b","modified":1575251053000},{"_id":"themes/material/source/fonts/.MaterialIcons-Regular 2.ttf.icloud","hash":"5671c1ea21a9db591c5afb7449ba356475592136","modified":1575251053000},{"_id":"themes/material/source/fonts/.MaterialIcons-Regular 2.woff.icloud","hash":"b258739ab1eb4efbfa32c897751c80a296745da3","modified":1575251053000},{"_id":"themes/material/source/fonts/.MaterialIcons-Regular 2.woff2.icloud","hash":"69755dcfff922c21657003f531a518cd4639c9c9","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Black 2.ttf.icloud","hash":"9d2788cc92281fbaae1de30cc16c867791c05a9b","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Bold 2.ttf.icloud","hash":"b07d290be211b0f602c53ac4eaa5555312053fd9","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Light 2.ttf.icloud","hash":"d9f8b96f94639a5defe1c6c24cc71edc3d596452","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Medium 2.ttf.icloud","hash":"d8f8d9d5d61ec39cb1b82686cdc0f56bd0cb8063","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Regular 2.ttf.icloud","hash":"2a8b4cd0a77938e5f762faed32bcaebad5b6c96c","modified":1575251053000},{"_id":"themes/material/source/fonts/.Roboto-Thin 2.ttf.icloud","hash":"26ca3bb80287af6b0c6ae2cf8753ad81b032dca8","modified":1575251053000},{"_id":"themes/material/source/fonts/.fontawesome-webfont 2.eot.icloud","hash":"7fa6d58e7f8cad77d412bac4027a41eb01b15f35","modified":1575251053000},{"_id":"themes/material/source/fonts/.fontawesome-webfont 2.ttf.icloud","hash":"cf6e755c6566c58f826dbe8c3a8a2c10656896c6","modified":1575251053000},{"_id":"themes/material/source/fonts/.fontawesome-webfont 2.woff.icloud","hash":"019ff9226224e6ad9e20add60c441876a8a234aa","modified":1575251053000},{"_id":"themes/material/source/fonts/.fontawesome-webfont 2.woff2.icloud","hash":"f9380257a5ff7098c9d1cc212fec4592a6a2514c","modified":1575251053000},{"_id":"themes/material/source/img/.sidebar_header 2.png.icloud","hash":"f98258285d11bc40417a785ccd7a2d24974ba3ee","modified":1575251053000},{"_id":"themes/material/source/img/1 2.ico","hash":"7abe40959a68684731195f26e05fd76a293efbef","modified":1575251053000},{"_id":"themes/material/source/img/avatar 2.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1575251053000},{"_id":"themes/material/source/img/bg 2.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1575251053000},{"_id":"themes/material/source/img/big 2.jpg","hash":"00b98bdf869a93e96db64ed31c51ec7faf795627","modified":1575251053000},{"_id":"themes/material/source/img/browserstack_logo 2.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1575251053000},{"_id":"themes/material/source/img/default-skin 2.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1575251053000},{"_id":"themes/material/source/img/favicon 2.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1575251053000},{"_id":"themes/material/source/img/logo 2.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1575251053000},{"_id":"themes/material/source/img/preloader 2.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1575251053000},{"_id":"themes/material/source/img/pay 2.png","hash":"cb14801b182fdbb6aa0fb566141068289e761c5e","modified":1575251053000},{"_id":"themes/material/source/img/scrollbar_arrow 2.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1575251053000},{"_id":"themes/material/source/img/upyun_logo 2.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1575251053000},{"_id":"themes/material/source/img/sidebar_header1 2.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1575251053000},{"_id":"themes/material/source/js/ie-blocker.en 2.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1575251053000},{"_id":"themes/material/source/js/ie-blocker.zhCN 2.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1575251053000},{"_id":"themes/material/source/js/lazyload.min 2.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1575251053000},{"_id":"themes/material/source/js/lsloader 2.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1575251053000},{"_id":"themes/material/source/js/lsloader.min 2.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1575251053000},{"_id":"themes/material/source/js/nprogress 2.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1575251053000},{"_id":"themes/material/source/js/mathjax 2.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1575251053000},{"_id":"themes/material/source/js/queue 2.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1575251053000},{"_id":"themes/material/source/js/queue.min 2.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1575251053000},{"_id":"themes/material/source/js/smoothscroll 2.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1575251053000},{"_id":"themes/material/source/img/2 2.ico","hash":"56b7589ed259f2486547c5366bb6fc4fcc94eda0","modified":1575251053000},{"_id":"themes/material/source/img/daily_pic 2.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1575251053000},{"_id":"themes/material/source/js/jquery.min 2.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1575251053000},{"_id":"themes/material/source/js/js 2.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1575251053000},{"_id":"themes/material/source/js/js.min 2.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/.baidu-analytics 2.ejs.icloud","hash":"d87a70e4774e73de944025e5655d397c37c82b87","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/.cnzz-analytics 2.ejs.icloud","hash":"6c35bc09351a311c6c16dff54ccef299fd09d69f","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/.google-analytics 2.ejs.icloud","hash":"33103217d4354747920a64eef88815842084e6ff","modified":1575251053000},{"_id":"themes/material/source/img/gallery/arrow 2.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1575251053000},{"_id":"themes/material/source/img/gallery/close 2.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili 2.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1575251053000},{"_id":"themes/material/source/img/gallery/spinner 2.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-facebook 2.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-github 2.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-gplus 2.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-instagram 2.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin 2.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-telegram 2.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr 2.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-twitter 2.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu 2.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1575251053000},{"_id":"themes/material/source/img/footer/footer_ico-weibo 2.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1575251053000},{"_id":"themes/material/source/img/random/material-10 2.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1575251053000},{"_id":"themes/material/source/img/random/material-12 2.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1575251053000},{"_id":"themes/material/source/img/random/material-17 2.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1575251053000},{"_id":"themes/material/source/img/random/material-19 2.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1575251053000},{"_id":"themes/material/source/img/random/material-3 2.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1575251053000},{"_id":"themes/material/source/img/random/material-4 2.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1575251053000},{"_id":"themes/material/source/img/random/material-6 2.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1575251053000},{"_id":"themes/material/source/img/random/material-8 2.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1575251053000},{"_id":"themes/material/source/img/random/material-9 2.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1575251053000},{"_id":"themes/material/source/js/gallery/gallery 2.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1575251053000},{"_id":"themes/material/source/img/random/material-1 2.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1575251053000},{"_id":"themes/material/source/img/random/material-11 2.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1575251053000},{"_id":"themes/material/source/img/random/material-15 2.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1575251053000},{"_id":"themes/material/source/img/random/material-16 2.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1575251053000},{"_id":"themes/material/source/img/random/material-13 2.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1575251053000},{"_id":"themes/material/source/img/random/material-18 2.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1575251053000},{"_id":"themes/material/source/img/random/material-2 2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1575251053000},{"_id":"themes/material/source/img/random/material-5 2.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1575251053000},{"_id":"themes/material/source/img/random/material-7 2.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/.main 2.ejs.icloud","hash":"c7b39c76d7d321be3c8df7d951a964c4c4904978","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/.common 2.ejs.icloud","hash":"0b31ee0acbb69ee1bbd4a4f10d2515337dad1391","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/.enter 2.ejs.icloud","hash":"92d5f14ac956355a32d8cdaab0ea1e3cc6554a2b","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/.common 2.ejs.icloud","hash":"acbd04d1645c25c0fb972ba80bce6da42c1a1477","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/.enter 2.ejs.icloud","hash":"973b492419ca6268f04ad3a11d5fce07d5b4b9fc","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/.main 2.ejs.icloud","hash":"a2b6aa49a2d18bc4b67b69c90f6554988a74f459","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/.common 2.ejs.icloud","hash":"5403baaa18f15b814abea780948bc784bf14c38c","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/.enter 2.ejs.icloud","hash":"11dc9f41e6d4ab204a6cda9ca7652014adac975e","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/.main 2.ejs.icloud","hash":"89c6870f1694e42cfb08b860907cbe1e189a7a37","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/.enter 2.ejs.icloud","hash":"973b492419ca6268f04ad3a11d5fce07d5b4b9fc","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/.main 2.ejs.icloud","hash":"c360bd20ba2bdb15450424a5aafcac41e039d45a","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/.common 2.ejs.icloud","hash":"79cccb1feff2998aeb7bdba94dfd21d2b06d8afb","modified":1575251053000},{"_id":"themes/material/source/img/random/material-14 2.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1575251053000},{"_id":"themes/material/source/fonts/fontawesome-webfont 2.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1575251053000},{"_id":"public/gallery/index 2.html","hash":"5c25cb374933770680268e9a3b917cc24a9f6c17","modified":1598241724182},{"_id":"public/about/index 2.html","hash":"e6c5d311ee958ee867d271e6b171b67a9429fe76","modified":1598241724183},{"_id":"public/links/index 2.html","hash":"2eba4ca4a23890c9a238cfd6d0b54f9ce2d82e95","modified":1598241724183},{"_id":"public/tags/index 2.html","hash":"7a67fd80e9723cc09d35ddb9d60025725cb8d34c","modified":1598241724184},{"_id":"public/2020/08/23/js基础/js对象/index.html","hash":"54e1355ee25e68a9489f6d78da8778e801b2ce6f","modified":1598241724184},{"_id":"public/2020/08/23/Node/node入门/index.html","hash":"410576f0ec08cd8d5f3328b6af0eeff1268b86d1","modified":1598242397861},{"_id":"public/2020/08/17/css基础/test外边距折叠/index.html","hash":"1b9a5f3b2d0ec7014c57380d6614c0024ae7a686","modified":1598241724184},{"_id":"public/2020/08/17/css基础/外边距折叠/index.html","hash":"5103334f53334e94b89d79cbf0b75e5eae37c855","modified":1598242397861},{"_id":"public/2020/08/17/css基础/定位、文档流与文本流/index.html","hash":"8b2178368815fe74da7089189848c067118616f6","modified":1598241724184},{"_id":"public/2020/08/17/浏览器/Chrome浏览器的渲染过程/index.html","hash":"c1cd8c464d9ec5f65f2105c3938a28161d6fd08a","modified":1598241724184},{"_id":"public/2020/08/17/css基础/dispaly:none与visibility的辨析/index.html","hash":"1d8034e622f681620c5927bf93d7167ff4cbf87c","modified":1598241724184},{"_id":"public/2020/05/20/js基础/常用console方法总结/index.html","hash":"5720708ee45f5cac9c72e6992826d60b91790705","modified":1598241724184},{"_id":"public/2020/05/04/js基础/js数据类型/index.html","hash":"e4877b35ab3498d0a622bc2cb2f452a90b3a9205","modified":1598241724184},{"_id":"public/2020/04/23/js基础/js遍历总结/index.html","hash":"dfeb894b34ae630997a5e2dbdcc0f0ca0c66be93","modified":1598241724184},{"_id":"public/2020/04/20/vue/vue学习笔记:可复用性&组合/index.html","hash":"9fe05d63c309bb616793a859adad7a4a9f975cb9","modified":1598241724184},{"_id":"public/2020/04/02/vue/实用的vue工具：treeselect多选插件/index.html","hash":"0767d2a08c1e6356c0805afbbcf258629bf572ad","modified":1598241724184},{"_id":"public/2020/03/16/js基础/js引用类型/index.html","hash":"3beeffa3d256196b334a4275948745751d7c68da","modified":1598241724184},{"_id":"public/2019/12/02/浏览器/同源策略及跨域/index.html","hash":"9a84493825cc2dd509e916a2e6919926a70cd2dd","modified":1598241724185},{"_id":"public/categories/NodeJS/index.html","hash":"0972461d2e7622cf4a868d88b57db407bde356f0","modified":1598241724185},{"_id":"public/archives/page/5/index.html","hash":"7c87d06e8dd81c8a68fa5ea965b7cd7970edd223","modified":1598242397861},{"_id":"public/archives/2020/page/4/index.html","hash":"56d233bd77f01fdefb00430c234b9a19f042daf7","modified":1598242397862},{"_id":"public/archives/2020/05/index.html","hash":"a5f0f86b109b37c6768db8656e7404d3f3292dfe","modified":1598241724185},{"_id":"public/archives/2020/08/page/2/index.html","hash":"85095b5015396c8bbb6e93f07bb030bd674be254","modified":1598241724185},{"_id":"public/page/5/index.html","hash":"f996cc7b5847597f654f4681856ff1b3fe5f9cfb","modified":1598242397861},{"_id":"public/tags/NodeJS/index.html","hash":"77f9a66cbbcdf0faecb3d5591f075eb4697dad9c","modified":1598241724185},{"_id":"public/img/avatar 2.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1598241724189},{"_id":"public/img/bg 2.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1598241724189},{"_id":"public/img/favicon 2.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1598241724189},{"_id":"public/img/browserstack_logo 2.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1598241724189},{"_id":"public/img/default-skin 2.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1598241724189},{"_id":"public/img/big 2.jpg","hash":"00b98bdf869a93e96db64ed31c51ec7faf795627","modified":1598241724189},{"_id":"public/img/logo 2.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1598241724189},{"_id":"public/img/preloader 2.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1598241724189},{"_id":"public/img/scrollbar_arrow 2.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1598241724189},{"_id":"public/img/upyun_logo 2.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1598241724189},{"_id":"public/img/pay 2.png","hash":"cb14801b182fdbb6aa0fb566141068289e761c5e","modified":1598241724189},{"_id":"public/img/sidebar_header1 2.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1598241724189},{"_id":"public/img/gallery/close 2.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1598241724189},{"_id":"public/img/gallery/arrow 2.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1598241724189},{"_id":"public/img/footer/footer_ico-bilibili 2.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1598241724189},{"_id":"public/img/gallery/spinner 2.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1598241724189},{"_id":"public/img/footer/footer_ico-facebook 2.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1598241724189},{"_id":"public/img/footer/footer_ico-github 2.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1598241724189},{"_id":"public/img/footer/footer_ico-gplus 2.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1598241724189},{"_id":"public/img/footer/footer_ico-instagram 2.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1598241724190},{"_id":"public/img/footer/footer_ico-linkedin 2.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1598241724190},{"_id":"public/img/footer/footer_ico-telegram 2.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1598241724190},{"_id":"public/img/footer/footer_ico-tumblr 2.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1598241724190},{"_id":"public/img/footer/footer_ico-twitter 2.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1598241724190},{"_id":"public/img/footer/footer_ico-zhihu 2.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1598241724190},{"_id":"public/img/footer/footer_ico-weibo 2.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1598241724190},{"_id":"public/img/random/material-10 2.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1598241724190},{"_id":"public/img/random/material-12 2.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1598241724190},{"_id":"public/img/random/material-17 2.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1598241724190},{"_id":"public/img/random/material-6 2.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1598241724190},{"_id":"public/img/random/material-3 2.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1598241724191},{"_id":"public/img/random/material-4 2.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1598241724191},{"_id":"public/img/random/material-9 2.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1598241724191},{"_id":"public/img/random/material-8 2.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1598241724191},{"_id":"public/img/1 2.ico","hash":"7abe40959a68684731195f26e05fd76a293efbef","modified":1598241724194},{"_id":"public/img/2 2.ico","hash":"56b7589ed259f2486547c5366bb6fc4fcc94eda0","modified":1598241724194},{"_id":"public/img/daily_pic 2.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1598241724194},{"_id":"public/img/random/material-19 2.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1598241724194},{"_id":"public/img/random/material-1 2.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1598241724194},{"_id":"public/img/random/material-11 2.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1598241724194},{"_id":"public/img/random/material-15 2.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1598241724194},{"_id":"public/img/random/material-13 2.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1598241724194},{"_id":"public/img/random/material-18 2.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1598241724194},{"_id":"public/img/random/material-2 2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1598241724195},{"_id":"public/img/random/material-5 2.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1598241724195},{"_id":"public/img/random/material-7 2.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1598241724195},{"_id":"public/img/random/material-14 2.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1598241724195},{"_id":"public/js/ie-blocker.en 2.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1598241724197},{"_id":"public/js/lazyload.min 2.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1598241724197},{"_id":"public/js/ie-blocker.zhCN 2.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1598241724197},{"_id":"public/js/lsloader 2.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1598241724197},{"_id":"public/js/lsloader.min 2.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1598241724197},{"_id":"public/js/nprogress 2.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1598241724197},{"_id":"public/js/queue 2.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1598241724197},{"_id":"public/js/queue.min 2.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1598241724197},{"_id":"public/js/smoothscroll 2.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1598241724197},{"_id":"public/js/mathjax 2.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1598241724197},{"_id":"public/js/js.min 2.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1598241724197},{"_id":"public/js/jquery.min 2.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1598241724197},{"_id":"public/js/js 2.js","hash":"15ab2a8a59623db0faaea3c50e0f347cc0dc810e","modified":1598241724197},{"_id":"public/js/gallery/gallery 2.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1598241724198},{"_id":"public/img/random/material-16 2.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1598241724198},{"_id":"public/fonts/fontawesome-webfont 2.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1598241724205},{"_id":"themes/material/.travis 2.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1575251053000},{"_id":"themes/material/_config 2.yaml","hash":"3167fcee3c5f60aa0607f57089eff689f16abbfa","modified":1587698601000},{"_id":"themes/material/_config.template 2.yml","hash":"3e9eb8083c0188dbab50ce3ebccf9fb2a504d8fb","modified":1575251053000},{"_id":"source/links/index.md 2.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053000},{"_id":"source/tags/index.md 2.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053000},{"_id":"themes/material/languages/de 2.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1575251053000},{"_id":"themes/material/languages/ar 2.yml","hash":"b8ffe10584fe49ed0218e57b27140b134e3022f8","modified":1575251053000},{"_id":"themes/material/languages/en 2.yml","hash":"2d538f5b71b2837b75bdcb686f1431a48dcb6eda","modified":1575251053000},{"_id":"themes/material/languages/es 2.yml","hash":"aaf23ea448489ec01f7c6228e3bf4833e062ec34","modified":1575251053000},{"_id":"themes/material/languages/fr 2.yml","hash":"66a966e8a9a60bfe00829b20c1f5e26cd6390f73","modified":1575251053000},{"_id":"themes/material/languages/ja 2.yml","hash":"af5466576ce9f6cac8529feb57ac8ba5401a318f","modified":1575251053000},{"_id":"themes/material/languages/ms 2.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1575251053000},{"_id":"themes/material/languages/pt-BR 2.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1575251053000},{"_id":"themes/material/languages/zh-CN 2.yml","hash":"563671897a5d4d04ddc2f4b8a45e8f2c366a77b9","modified":1575251053000},{"_id":"themes/material/languages/zh-TW 2.yml","hash":"516b74e942f849e716098d111c7c3a9f4847cb0a","modified":1575251053000},{"_id":"themes/material/layout/index 2.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1575251053000},{"_id":"themes/material/layout/layout 2.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1579953305000},{"_id":"themes/material/layout/post 2.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1579953295000},{"_id":"themes/material/layout/_partial/Isolation-post-info 2.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1575251053000},{"_id":"themes/material/layout/_partial/Isolation-post_entry 2.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1575251053000},{"_id":"themes/material/layout/_partial/Paradox-post-info 2.ejs","hash":"9c6e728a736eaba7edbcaf6862e5dcef8edd2a9e","modified":1575251053000},{"_id":"themes/material/layout/_partial/Paradox-post_entry 2.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1575251053000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail 2.ejs","hash":"ae949e16cbd20d895ba3c0b64f3992bf28d81e06","modified":1575251053000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail 2.ejs","hash":"31095a56feaf04a710e8302ccb18e2d4d10b97ba","modified":1575251053000},{"_id":"themes/material/layout/_partial/Paradox-search 2.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1575251053000},{"_id":"themes/material/layout/_partial/blog_info 2.ejs","hash":"1b1a18b49674d2e78672a69c6ced6ff35f1b63e9","modified":1575251053000},{"_id":"themes/material/layout/_partial/comment 2.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1575251053000},{"_id":"themes/material/layout/_partial/config_css 2.ejs","hash":"9956cc20b84b67334dcc80a5d4396f9064d4a804","modified":1575251053000},{"_id":"themes/material/layout/_partial/config_font 2.ejs","hash":"f564ba4b36363882154870558091383887fffdf8","modified":1575251053000},{"_id":"themes/material/layout/_partial/config_footer 2.ejs","hash":"bd520f4e8a381494c78e3c00905c80a9cd807f97","modified":1575251053000},{"_id":"themes/material/layout/_partial/daily_pic 2.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1575251053000},{"_id":"themes/material/layout/_partial/footer 2.ejs","hash":"75ecc32a258857424c48a2ebb0b5b9f3b30614a5","modified":1575251053000},{"_id":"themes/material/layout/_partial/footer-left 2.ejs","hash":"c17e2da7d6cb0e4104fc64a541f4c81f4abed095","modified":1575251053000},{"_id":"themes/material/layout/_partial/footer-option 2.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1575251053000},{"_id":"themes/material/layout/_partial/footer_top 2.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1575251053000},{"_id":"themes/material/layout/_partial/head 2.ejs","hash":"253b6ce7b602a649ebf92a80c18dffa01608548d","modified":1580036896000},{"_id":"themes/material/layout/_partial/isolate-sns_list 2.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1575251053000},{"_id":"themes/material/layout/_partial/import_js 2.ejs","hash":"88c604ae4f70ccf24289bc967f18ada697013304","modified":1575251053000},{"_id":"themes/material/layout/_partial/isolate_info 2.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1575251053000},{"_id":"themes/material/layout/_partial/post-content 2.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1575251053000},{"_id":"themes/material/layout/_partial/post-header 2.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1575251053000},{"_id":"themes/material/layout/_partial/post-info-share 2.ejs","hash":"b6e5af993245a2e3caa6eb66009503ec52c82f5b","modified":1575251053000},{"_id":"themes/material/layout/_partial/post-nav 2.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1575251053000},{"_id":"themes/material/layout/_partial/sidebar 2.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1575251053000},{"_id":"themes/material/layout/_partial/sidebar-footer 2.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1575251053000},{"_id":"themes/material/layout/_partial/sidebar-footer_image 2.ejs","hash":"44aba38692abc609f28b55bff81362a1c03ce36c","modified":1575251053000},{"_id":"themes/material/layout/_partial/sidebar-header 2.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1575251053000},{"_id":"themes/material/layout/_partial/sidebar-navigation 2.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1575251053000},{"_id":"themes/material/layout/_partial/structured-data 2.ejs","hash":"f3ed6673a774cd5a27c94dfe174e8f7344f4ebbe","modified":1575251053000},{"_id":"themes/material/layout/_partial/toc_button 2.ejs","hash":"1c0773c3b2cf33aad0e0373540e11540e5137c75","modified":1575251053000},{"_id":"themes/material/layout/_widget/leancloud-like 2.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1575251053000},{"_id":"themes/material/layout/_widget/leancloud-views_num 2.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1575251053000},{"_id":"themes/material/layout/_widget/leancloud-views 2.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1575251053000},{"_id":"themes/material/layout/_widget/mathjax 2.ejs","hash":"843818bffeaebe5e3fa07c90d260bb912555cb3b","modified":1575251053000},{"_id":"themes/material/layout/_widget/nprogress 2.ejs","hash":"52fcfe5b70c25378e48bb67daf85d952b32d34b2","modified":1575251053000},{"_id":"themes/material/layout/_widget/page-gallery 2.ejs","hash":"f03bc95a0c9b4905413b8fdfefc1af463b51e828","modified":1580537346000},{"_id":"themes/material/layout/_widget/page-links 2.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1575251053000},{"_id":"themes/material/layout/_widget/page-tagcloud 2.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1575251053000},{"_id":"themes/material/layout/_widget/page-timeline 2.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1575251053000},{"_id":"themes/material/layout/_widget/qrcode 2.ejs","hash":"ab544bc337a48bdd30f9cb146db6a287bb36a10f","modified":1575251053000},{"_id":"themes/material/layout/_widget/search-local-js 2.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1575251053000},{"_id":"themes/material/layout/_widget/search-swiftype-js 2.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1575251053000},{"_id":"themes/material/source/css/disqus-proxy 2.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1575251053000},{"_id":"themes/material/source/css/disqus-proxy.min 2.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1575251053000},{"_id":"themes/material/source/css/duoshuo 2.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1575251053000},{"_id":"themes/material/source/css/duoshuo.min 2.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1575251053000},{"_id":"themes/material/source/css/fontawesome.min 2.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1575251053000},{"_id":"themes/material/source/css/gallery.min 2.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1575251053000},{"_id":"themes/material/source/css/ie-blocker 2.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1575251053000},{"_id":"themes/material/source/css/style 2.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1575251053000},{"_id":"themes/material/source/css/style.min 2.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1575251053000},{"_id":"themes/material/source/css/uc 2.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1575251053000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular 2.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1575251053000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular 2.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1575251053000},{"_id":"themes/material/source/css/material.min 2.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1575251053000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular 2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1575251053000},{"_id":"themes/material/source/fonts/fontawesome-webfont 2.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1575251053000},{"_id":"themes/material/source/fonts/fontawesome-webfont 2.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics 2.ejs","hash":"c24af97754140f221d20323a3e5aac9dd02889d4","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics 2.ejs","hash":"61a891acb13e71289f360c91cb27fb88f81848ec","modified":1575251053000},{"_id":"themes/material/layout/_widget/analytics/google-analytics 2.ejs","hash":"8bff3b1bd066eef693319b82400c353b2d6736e7","modified":1575251053000},{"_id":"themes/material/source/fonts/FontAwesome 2.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1575251053000},{"_id":"themes/material/source/fonts/fontawesome-webfont 2.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1575251053000},{"_id":"themes/material/source/fonts/fontawesome-webfont 2.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1575251053000},{"_id":"themes/material/source/css/material 2.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1575251053000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular 2.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/common 2.ejs","hash":"ac56d01746ef2f72d54bff4b61e0ca0089c5c164","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/enter 2.ejs","hash":"6e057829fa926cc02e3e2ebfdee7c244a9b31dd7","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/163gentie/main 2.ejs","hash":"e84afb44929f4dab8cf279b958d472955bc5f034","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/enter 2.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/common 2.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/changyan/main 2.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/common 2.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/enter 2.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus/main 2.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common 2.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter 2.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1575251053000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main 2.ejs","hash":"fa89d225dafa4a6b0f6be6fe395ada0be172c4ae","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Bold 2.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Regular 2.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Medium 2.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Black 2.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Light 2.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1575251053000},{"_id":"themes/material/source/fonts/Roboto-Thin 2.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1575251053000},{"_id":"themes/material/source/img/sidebar_header 2.png","hash":"3bf086915531c190ed9496b9dadc695267cf058c","modified":1575251053000},{"_id":"public/links/index.md 2.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598243181035},{"_id":"public/tags/index.md 2.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598243181035},{"_id":"public/fonts/MaterialIcons-Regular 2.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1598243181037},{"_id":"public/fonts/MaterialIcons-Regular 2.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1598243181037},{"_id":"public/fonts/fontawesome-webfont 2.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598243181040},{"_id":"public/fonts/MaterialIcons-Regular 2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1598243181040},{"_id":"public/css/disqus-proxy 2.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1598243181041},{"_id":"public/css/disqus-proxy.min 2.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1598243181041},{"_id":"public/css/duoshuo 2.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1598243181041},{"_id":"public/css/duoshuo.min 2.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1598243181041},{"_id":"public/css/gallery.min 2.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1598243181041},{"_id":"public/css/fontawesome.min 2.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598243181041},{"_id":"public/css/ie-blocker 2.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1598243181041},{"_id":"public/css/uc 2.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1598243181041},{"_id":"public/css/style.min 2.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1598243181041},{"_id":"public/css/style 2.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1598243181041},{"_id":"public/css/material.min 2.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1598243181041},{"_id":"public/css/material 2.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1598243181041},{"_id":"public/fonts/FontAwesome 2.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1598243181042},{"_id":"public/fonts/fontawesome-webfont 2.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598243181042},{"_id":"public/fonts/fontawesome-webfont 2.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1598243181042},{"_id":"public/fonts/MaterialIcons-Regular 2.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1598243181042},{"_id":"public/fonts/fontawesome-webfont 2.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598243181043},{"_id":"public/fonts/Roboto-Light 2.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1598243181047},{"_id":"public/fonts/Roboto-Thin 2.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1598243181047},{"_id":"public/fonts/Roboto-Regular 2.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1598243181048},{"_id":"public/fonts/Roboto-Medium 2.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1598243181048},{"_id":"public/fonts/Roboto-Black 2.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1598243181048},{"_id":"public/fonts/Roboto-Bold 2.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1598243181048},{"_id":"public/img/sidebar_header 2.png","hash":"3bf086915531c190ed9496b9dadc695267cf058c","modified":1598243181051}],"Category":[{"name":"es6","_id":"ckdych0ku001yykrvfxk38p42"},{"name":"css","_id":"ckdych0l10020ykrvo0rak05r"},{"name":"前端","_id":"ckdych0l20022ykrvctlsk56t"},{"name":"读书笔记","_id":"ckdych0l20024ykrveql0sw7p"},{"name":"Java","_id":"ckdych0l5002cykrvbr8dvvzu"},{"name":"mysql","_id":"ckdych0la002sykrv474ukpwl"},{"name":"sql","_id":"ckdych0la002uykrv8lll4o5b"},{"name":"工具","_id":"ckdych0lb002wykrv5wqpiuhy"},{"name":"后端","_id":"ckdych0le0036ykrvn764rsmd"},{"name":"js","_id":"ckdych0lf003aykrvhj9szby1"},{"name":"mac","_id":"ckdych0li003iykrvkbdmlopn"},{"name":"环境搭建","_id":"ckdych0li003kykrvlu149ydh"},{"name":"计算机网络","_id":"ckdych0lj003oykrv6jijh5o0"},{"name":"设计模式","_id":"ckdych0ll003uykrvehlkp900"},{"name":"软件设计","_id":"ckdych0lm003wykrvnqdxa7dl"},{"name":"现代诗","_id":"ckdych0lm003yykrvxg2nugx8"},{"name":"NodeJS","_id":"cke7zut75000hlzrvxys9zyyw"}],"Data":[{"_id":"gallery","data":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}}},{"_id":"links","data":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}],"Page":[{"_content":"","source":"temp/PS学习笔记.md","raw":"","date":"2020-03-27T14:03:15.317Z","updated":"2020-03-27T14:03:15.316Z","path":"temp/PS学习笔记.html","title":"","comments":1,"layout":"page","_id":"ckdych0hx0000ykrvp5xocnu9","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"_content":"","source":"temp/babel学习笔记.md","raw":"","date":"2020-04-26T07:35:35.665Z","updated":"2020-04-26T07:35:35.665Z","path":"temp/babel学习笔记.html","title":"","comments":1,"layout":"page","_id":"ckdych0hy0001ykrvg0vauyoe","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"_content":"","source":"temp/java微服务.md","raw":"","date":"2020-04-26T09:52:48.387Z","updated":"2020-04-26T09:52:48.387Z","path":"temp/java微服务.html","title":"","comments":1,"layout":"page","_id":"ckdych0hy0002ykrvgvsclsb4","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"_content":"","source":"temp/npm使用小记.md","raw":"","date":"2020-04-04T11:43:39.153Z","updated":"2020-04-04T11:43:39.153Z","path":"temp/npm使用小记.html","title":"","comments":1,"layout":"page","_id":"ckdych0hz0003ykrvqenxskr6","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"_content":"","source":"temp/想法.md","raw":"","date":"2020-04-29T05:32:35.761Z","updated":"2020-04-29T05:32:35.761Z","path":"temp/想法.html","title":"","comments":1,"layout":"page","_id":"ckdych0i00004ykrvs5lnp5a6","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"title":"关于我","date":"2020-08-24T04:13:08.179Z","layout":"about","_content":"\n## 关于我\n\n### 技术栈\n* 语言\n    * 比较了解：JS、CSS、HTML、C\n    * 略懂一些：JAVA、PYTHON\n* 框架\n    * 比较了解：VUE、SpringBoot、jQuery、D3.js\n\n### 兴趣爱好\n* 游戏：代码写累了打两盘CSGO，放松一下。\n* 电影：Christopher Nolan、Quentin Tarantino、姜文\n* 想要学习摄影和剪辑。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate:\nlayout: about\n---\n\n## 关于我\n\n### 技术栈\n* 语言\n    * 比较了解：JS、CSS、HTML、C\n    * 略懂一些：JAVA、PYTHON\n* 框架\n    * 比较了解：VUE、SpringBoot、jQuery、D3.js\n\n### 兴趣爱好\n* 游戏：代码写累了打两盘CSGO，放松一下。\n* 电影：Christopher Nolan、Quentin Tarantino、姜文\n* 想要学习摄影和剪辑。","updated":"2020-08-24T04:13:08.179Z","path":"about/index.html","_id":"ckdych0id0005ykrvpoulkmki","comments":1,"content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>语言<ul>\n<li>比较了解：JS、CSS、HTML、C</li>\n<li>略懂一些：JAVA、PYTHON</li>\n</ul>\n</li>\n<li>框架<ul>\n<li>比较了解：VUE、SpringBoot、jQuery、D3.js</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h3><ul>\n<li>游戏：代码写累了打两盘CSGO，放松一下。</li>\n<li>电影：Christopher Nolan、Quentin Tarantino、姜文</li>\n<li>想要学习摄影和剪辑。</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>语言<ul>\n<li>比较了解：JS、CSS、HTML、C</li>\n<li>略懂一些：JAVA、PYTHON</li>\n</ul>\n</li>\n<li>框架<ul>\n<li>比较了解：VUE、SpringBoot、jQuery、D3.js</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h3><ul>\n<li>游戏：代码写累了打两盘CSGO，放松一下。</li>\n<li>电影：Christopher Nolan、Quentin Tarantino、姜文</li>\n<li>想要学习摄影和剪辑。</li>\n</ul>\n"},{"title":"gallery","date":"2020-02-01T06:44:52.298Z","layout":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate:\nlayout: gallery\n---","updated":"2020-02-01T06:44:52.298Z","path":"gallery/index.html","comments":1,"_id":"ckdych0ie0006ykrvqgbhizit","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"title":"links","date":"2019-12-02T01:44:55.748Z","layout":"links","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate:\nlayout: links\n---","updated":"2019-12-02T01:44:13.423Z","path":"links/index.html","comments":1,"_id":"ckdych0if0007ykrv48y0pm99","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"_content":"### 表单\n表单的一项经常是一些文字带一个表单input，比如标题，要写清楚标题两个字，旁边附带一个输入框。\n则就是bootstrap中表单组的概念。\n```html\n<b-form-group label=\"性别\">\n    <b-form-radio-group v-model=\"form.gender\" :disabled=\"disabled\">\n        <b-form-radio value=\"true\">男性</b-form-radio>\n        <b-form-radio value=\"false\">女性</b-form-radio>\n    </b-form-radio-group>\n</b-form-group>\n```","source":"temp/BootstrapVue中元素的一些用法.md","raw":"### 表单\n表单的一项经常是一些文字带一个表单input，比如标题，要写清楚标题两个字，旁边附带一个输入框。\n则就是bootstrap中表单组的概念。\n```html\n<b-form-group label=\"性别\">\n    <b-form-radio-group v-model=\"form.gender\" :disabled=\"disabled\">\n        <b-form-radio value=\"true\">男性</b-form-radio>\n        <b-form-radio value=\"false\">女性</b-form-radio>\n    </b-form-radio-group>\n</b-form-group>\n```","date":"2020-02-16T06:17:12.944Z","updated":"2020-02-16T06:17:12.944Z","path":"temp/BootstrapVue中元素的一些用法.html","title":"","comments":1,"layout":"page","_id":"ckdych0if0008ykrvwsqmrh1p","content":"<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><p>表单的一项经常是一些文字带一个表单input，比如标题，要写清楚标题两个字，旁边附带一个输入框。<br>则就是bootstrap中表单组的概念。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b-form-group</span> <span class=\"attr\">label</span>=<span class=\"string\">\"性别\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b-form-radio-group</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"form.gender\"</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">\"disabled\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">b-form-radio</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span>男性<span class=\"tag\">&lt;/<span class=\"name\">b-form-radio</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">b-form-radio</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span>女性<span class=\"tag\">&lt;/<span class=\"name\">b-form-radio</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">b-form-radio-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">b-form-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><p>表单的一项经常是一些文字带一个表单input，比如标题，要写清楚标题两个字，旁边附带一个输入框。<br>则就是bootstrap中表单组的概念。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b-form-group</span> <span class=\"attr\">label</span>=<span class=\"string\">\"性别\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b-form-radio-group</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"form.gender\"</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">\"disabled\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">b-form-radio</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span>男性<span class=\"tag\">&lt;/<span class=\"name\">b-form-radio</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">b-form-radio</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span>女性<span class=\"tag\">&lt;/<span class=\"name\">b-form-radio</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">b-form-radio-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">b-form-group</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"_content":"chsh命令。切换shell环境。\n\n","source":"temp/iTerm2.md","raw":"chsh命令。切换shell环境。\n\n","date":"2020-04-12T13:09:31.300Z","updated":"2020-04-12T13:09:31.300Z","path":"temp/iTerm2.html","title":"","comments":1,"layout":"page","_id":"ckdych0ig000aykrvvdmdp3y4","content":"<p>chsh命令。切换shell环境。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>chsh命令。切换shell环境。</p>\n"},{"_content":"### 1. for循环\n最简单的循环。写起来麻烦，但几乎什么啥都能干。\n\n```\nfor(循环体运行之前执行，一般为赋值语句;循环条件判断语句;循环体运行完毕后执行，){\n    循环体\n}\n```\n\n\n### 2. foreach\n语法\n```\n数组.foreach(callback(currentValue[,index[,array]])[,thisArg]);\n```\n参数：\n* callback:为数组中每个元素执行的函数，该函数接收三个参数：\n* currentValue:数组中正在处理的当前元素。\n* index 可选:数组中正在处理的当前元素的索引。\n* array 可选:forEach() 方法正在操作的数组。\n* thisArg 可选 可选参数。当执行回调函数 callback 时，用作 this 的值。\n\n返回值：\n* undefined\n\n其他注意事项：\n* forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。\n* 除了抛出异常以外，没有办法中止或跳出 forEach() 循环\n\n### 3. \n","source":"temp/js中的几种循环和数组、对象的遍历.md","raw":"### 1. for循环\n最简单的循环。写起来麻烦，但几乎什么啥都能干。\n\n```\nfor(循环体运行之前执行，一般为赋值语句;循环条件判断语句;循环体运行完毕后执行，){\n    循环体\n}\n```\n\n\n### 2. foreach\n语法\n```\n数组.foreach(callback(currentValue[,index[,array]])[,thisArg]);\n```\n参数：\n* callback:为数组中每个元素执行的函数，该函数接收三个参数：\n* currentValue:数组中正在处理的当前元素。\n* index 可选:数组中正在处理的当前元素的索引。\n* array 可选:forEach() 方法正在操作的数组。\n* thisArg 可选 可选参数。当执行回调函数 callback 时，用作 this 的值。\n\n返回值：\n* undefined\n\n其他注意事项：\n* forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。\n* 除了抛出异常以外，没有办法中止或跳出 forEach() 循环\n\n### 3. \n","date":"2020-02-25T08:34:12.407Z","updated":"2020-02-25T08:34:12.407Z","path":"temp/js中的几种循环和数组、对象的遍历.html","title":"","comments":1,"layout":"page","_id":"ckdych0ih000bykrvg8es7hze","content":"<h3 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1. for循环\"></a>1. for循环</h3><p>最简单的循环。写起来麻烦，但几乎什么啥都能干。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(循环体运行之前执行，一般为赋值语句;循环条件判断语句;循环体运行完毕后执行，)&#123;</span><br><span class=\"line\">    循环体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-foreach\"><a href=\"#2-foreach\" class=\"headerlink\" title=\"2. foreach\"></a>2. foreach</h3><p>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组.foreach(callback(currentValue[,index[,array]])[,thisArg]);</span><br></pre></td></tr></table></figure></p>\n<p>参数：</p>\n<ul>\n<li>callback:为数组中每个元素执行的函数，该函数接收三个参数：</li>\n<li>currentValue:数组中正在处理的当前元素。</li>\n<li>index 可选:数组中正在处理的当前元素的索引。</li>\n<li>array 可选:forEach() 方法正在操作的数组。</li>\n<li>thisArg 可选 可选参数。当执行回调函数 callback 时，用作 this 的值。</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>undefined</li>\n</ul>\n<p>其他注意事项：</p>\n<ul>\n<li>forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。</li>\n<li>除了抛出异常以外，没有办法中止或跳出 forEach() 循环</li>\n</ul>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1. for循环\"></a>1. for循环</h3><p>最简单的循环。写起来麻烦，但几乎什么啥都能干。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(循环体运行之前执行，一般为赋值语句;循环条件判断语句;循环体运行完毕后执行，)&#123;</span><br><span class=\"line\">    循环体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-foreach\"><a href=\"#2-foreach\" class=\"headerlink\" title=\"2. foreach\"></a>2. foreach</h3><p>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组.foreach(callback(currentValue[,index[,array]])[,thisArg]);</span><br></pre></td></tr></table></figure></p>\n<p>参数：</p>\n<ul>\n<li>callback:为数组中每个元素执行的函数，该函数接收三个参数：</li>\n<li>currentValue:数组中正在处理的当前元素。</li>\n<li>index 可选:数组中正在处理的当前元素的索引。</li>\n<li>array 可选:forEach() 方法正在操作的数组。</li>\n<li>thisArg 可选 可选参数。当执行回调函数 callback 时，用作 this 的值。</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>undefined</li>\n</ul>\n<p>其他注意事项：</p>\n<ul>\n<li>forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。</li>\n<li>除了抛出异常以外，没有办法中止或跳出 forEach() 循环</li>\n</ul>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>"},{"title":"js小记：this入门及进阶","date":"2020-04-12T01:40:30.000Z","categories":"js","tags":["js","前端","this"],"description":"总结js中this的含义及用法。","_content":"\n\n## this的进阶知识\n\n### this的箭头函数\n\n\n### 更改this的作用域。\n\n#### 方法1:call\n\n","source":"temp/js小记：this的含义及进阶用法.md","raw":"---\ntitle: js小记：this入门及进阶 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-04-12 09:40:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: js #分类\n\ntags: [js, 前端, this] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 总结js中this的含义及用法。\n\n---\n\n\n## this的进阶知识\n\n### this的箭头函数\n\n\n### 更改this的作用域。\n\n#### 方法1:call\n\n","updated":"2020-04-21T01:49:51.935Z","path":"temp/js小记：this的含义及进阶用法.html","comments":1,"layout":"page","_id":"ckdych0ii000cykrvq9okwvx5","content":"<h2 id=\"this的进阶知识\"><a href=\"#this的进阶知识\" class=\"headerlink\" title=\"this的进阶知识\"></a>this的进阶知识</h2><h3 id=\"this的箭头函数\"><a href=\"#this的箭头函数\" class=\"headerlink\" title=\"this的箭头函数\"></a>this的箭头函数</h3><h3 id=\"更改this的作用域。\"><a href=\"#更改this的作用域。\" class=\"headerlink\" title=\"更改this的作用域。\"></a>更改this的作用域。</h3><h4 id=\"方法1-call\"><a href=\"#方法1-call\" class=\"headerlink\" title=\"方法1:call\"></a>方法1:call</h4>","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"this的进阶知识\"><a href=\"#this的进阶知识\" class=\"headerlink\" title=\"this的进阶知识\"></a>this的进阶知识</h2><h3 id=\"this的箭头函数\"><a href=\"#this的箭头函数\" class=\"headerlink\" title=\"this的箭头函数\"></a>this的箭头函数</h3><h3 id=\"更改this的作用域。\"><a href=\"#更改this的作用域。\" class=\"headerlink\" title=\"更改this的作用域。\"></a>更改this的作用域。</h3><h4 id=\"方法1-call\"><a href=\"#方法1-call\" class=\"headerlink\" title=\"方法1:call\"></a>方法1:call</h4>"},{"title":"mac配置代理","date":"2020-03-15T01:40:30.000Z","categories":"mac环境","tags":["代理","mac配置"],"description":"记录在macos下如何配置代理。","_content":"\n## 目录\n1. 查看代理软件中的代理信息。\n2. 设置系统偏好设置中的代理。\n3. 设置shell下的代理。\n\n### 1. 查看代理软件中的代理信息\n以v2rayn客户端为例。通过在 在配置信息中找到\"本地http端口\"及\"本地socks5端口\"。\n猜测两端口的作用如下。\n* 本地http端口：本机中的http请求将通过该端口进行转发。\n* 本地socks5端口：本机中部分请求使用socks5协议通过该端口进行转发。\n\n### 2. 设置系统偏好设置中的代理信息\n配置如下信息\n系统偏好设置->网络->高级->代理\n* 勾选自动发现代理\n* 如果使用pac模式，请勾选自动代理配置\n\n### 3. 设置shell下的代理\n修改用户的bash配置信息，添加如下内容\n* export http_proxy=socks5://127.0.0.1:1081（步骤1中的本地soskc5端口）\n* export https_proxy=socks5://127.0.0.1:1081（同上）\n* export http_proxy=http://127.0.0.1:8001/（步骤1中的本地http端口）\n* export https_proxy=http://127.0.0.1:8001/（同上）\n\n不清楚为什么，修改完毕后使用source命令使用配置没有作用，重新启动bash后才成功使用新配置。\n","source":"temp/mac配置代理.md","raw":"---\ntitle: mac配置代理\n\ndate: 2020-03-15 09:40:30 \n\ncategories: mac环境\n\ntags: [代理, mac配置]\n\ndescription: 记录在macos下如何配置代理。\n\n---\n\n## 目录\n1. 查看代理软件中的代理信息。\n2. 设置系统偏好设置中的代理。\n3. 设置shell下的代理。\n\n### 1. 查看代理软件中的代理信息\n以v2rayn客户端为例。通过在 在配置信息中找到\"本地http端口\"及\"本地socks5端口\"。\n猜测两端口的作用如下。\n* 本地http端口：本机中的http请求将通过该端口进行转发。\n* 本地socks5端口：本机中部分请求使用socks5协议通过该端口进行转发。\n\n### 2. 设置系统偏好设置中的代理信息\n配置如下信息\n系统偏好设置->网络->高级->代理\n* 勾选自动发现代理\n* 如果使用pac模式，请勾选自动代理配置\n\n### 3. 设置shell下的代理\n修改用户的bash配置信息，添加如下内容\n* export http_proxy=socks5://127.0.0.1:1081（步骤1中的本地soskc5端口）\n* export https_proxy=socks5://127.0.0.1:1081（同上）\n* export http_proxy=http://127.0.0.1:8001/（步骤1中的本地http端口）\n* export https_proxy=http://127.0.0.1:8001/（同上）\n\n不清楚为什么，修改完毕后使用source命令使用配置没有作用，重新启动bash后才成功使用新配置。\n","updated":"2020-04-21T08:58:36.638Z","path":"temp/mac配置代理.html","comments":1,"layout":"page","_id":"ckdych0ij000dykrvj58ovkr5","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li>查看代理软件中的代理信息。</li>\n<li>设置系统偏好设置中的代理。</li>\n<li>设置shell下的代理。</li>\n</ol>\n<h3 id=\"1-查看代理软件中的代理信息\"><a href=\"#1-查看代理软件中的代理信息\" class=\"headerlink\" title=\"1. 查看代理软件中的代理信息\"></a>1. 查看代理软件中的代理信息</h3><p>以v2rayn客户端为例。通过在 在配置信息中找到”本地http端口”及”本地socks5端口”。<br>猜测两端口的作用如下。</p>\n<ul>\n<li>本地http端口：本机中的http请求将通过该端口进行转发。</li>\n<li>本地socks5端口：本机中部分请求使用socks5协议通过该端口进行转发。</li>\n</ul>\n<h3 id=\"2-设置系统偏好设置中的代理信息\"><a href=\"#2-设置系统偏好设置中的代理信息\" class=\"headerlink\" title=\"2. 设置系统偏好设置中的代理信息\"></a>2. 设置系统偏好设置中的代理信息</h3><p>配置如下信息<br>系统偏好设置-&gt;网络-&gt;高级-&gt;代理</p>\n<ul>\n<li>勾选自动发现代理</li>\n<li>如果使用pac模式，请勾选自动代理配置</li>\n</ul>\n<h3 id=\"3-设置shell下的代理\"><a href=\"#3-设置shell下的代理\" class=\"headerlink\" title=\"3. 设置shell下的代理\"></a>3. 设置shell下的代理</h3><p>修改用户的bash配置信息，添加如下内容</p>\n<ul>\n<li>export http_proxy=socks5://127.0.0.1:1081（步骤1中的本地soskc5端口）</li>\n<li>export https_proxy=socks5://127.0.0.1:1081（同上）</li>\n<li>export http_proxy=<a href=\"http://127.0.0.1:8001/（步骤1中的本地http端口）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8001/（步骤1中的本地http端口）</a></li>\n<li>export https_proxy=<a href=\"http://127.0.0.1:8001/（同上）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8001/（同上）</a></li>\n</ul>\n<p>不清楚为什么，修改完毕后使用source命令使用配置没有作用，重新启动bash后才成功使用新配置。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li>查看代理软件中的代理信息。</li>\n<li>设置系统偏好设置中的代理。</li>\n<li>设置shell下的代理。</li>\n</ol>\n<h3 id=\"1-查看代理软件中的代理信息\"><a href=\"#1-查看代理软件中的代理信息\" class=\"headerlink\" title=\"1. 查看代理软件中的代理信息\"></a>1. 查看代理软件中的代理信息</h3><p>以v2rayn客户端为例。通过在 在配置信息中找到”本地http端口”及”本地socks5端口”。<br>猜测两端口的作用如下。</p>\n<ul>\n<li>本地http端口：本机中的http请求将通过该端口进行转发。</li>\n<li>本地socks5端口：本机中部分请求使用socks5协议通过该端口进行转发。</li>\n</ul>\n<h3 id=\"2-设置系统偏好设置中的代理信息\"><a href=\"#2-设置系统偏好设置中的代理信息\" class=\"headerlink\" title=\"2. 设置系统偏好设置中的代理信息\"></a>2. 设置系统偏好设置中的代理信息</h3><p>配置如下信息<br>系统偏好设置-&gt;网络-&gt;高级-&gt;代理</p>\n<ul>\n<li>勾选自动发现代理</li>\n<li>如果使用pac模式，请勾选自动代理配置</li>\n</ul>\n<h3 id=\"3-设置shell下的代理\"><a href=\"#3-设置shell下的代理\" class=\"headerlink\" title=\"3. 设置shell下的代理\"></a>3. 设置shell下的代理</h3><p>修改用户的bash配置信息，添加如下内容</p>\n<ul>\n<li>export http_proxy=socks5://127.0.0.1:1081（步骤1中的本地soskc5端口）</li>\n<li>export https_proxy=socks5://127.0.0.1:1081（同上）</li>\n<li>export http_proxy=<a href=\"http://127.0.0.1:8001/（步骤1中的本地http端口）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8001/（步骤1中的本地http端口）</a></li>\n<li>export https_proxy=<a href=\"http://127.0.0.1:8001/（同上）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8001/（同上）</a></li>\n</ul>\n<p>不清楚为什么，修改完毕后使用source命令使用配置没有作用，重新启动bash后才成功使用新配置。</p>\n"},{"title":"初识uri scheme","date":"2020-03-16T02:25:50.000Z","categories":"前端","tags":["前端","scheme"],"description":"JavaScript中的Date对象及其常用方法总结","_content":"\n初识scheme\n\n<!-- more -->\n\nuri scheme即uri方案。指URi命名结构的第一级。\n\n","source":"temp/schema.md","raw":"---\ntitle: 初识uri scheme #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-16 10:25:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端, scheme] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: JavaScript中的Date对象及其常用方法总结\n---\n\n初识scheme\n\n<!-- more -->\n\nuri scheme即uri方案。指URi命名结构的第一级。\n\n","updated":"2020-03-22T01:05:08.777Z","path":"temp/schema.html","comments":1,"layout":"page","_id":"ckdych0im000eykrvsnodd26l","content":"<p>初识scheme</p>\n<a id=\"more\"></a>\n<p>uri scheme即uri方案。指URi命名结构的第一级。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>初识scheme</p>","more":"<p>uri scheme即uri方案。指URi命名结构的第一级。</p>"},{"title":"vue-cli配置代理进行跨域","date":"2020-04-09T03:35:30.000Z","categories":"前端","tags":["vue","前端"],"description":"vue-cli配置代理","_content":"\n记录通过vue-cli配置代理进行跨域的实践及感悟。\n\n<!-- more -->\n\n### 实践：通过vue-cli配置代理进行跨域。\n1. 在项目根目录添加vue.config.js文件（如果已经有则跳过）。\n2. 添加如下代码：\n```javascript\nmodule.exports = {\n  devServer: {  // 该配置仅针对开发模式有效\n    proxy: {    // 该对象下的内容为代理配置\n      '/api': { // 代理具有'\\api'前缀的请求\n        target: 'http://localhost:8080/video_war/', // 将匹配的前缀（本示例中为'api'）改为target属性的内容。\n        changeOrigin: true, // \n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    }\n  }\n}\n```","source":"temp/vue-cli配置代理.md","raw":"---\ntitle:  vue-cli配置代理进行跨域 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-04-09 11:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 前端 #分类\n\ntags: [vue, 前端]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: vue-cli配置代理\n---\n\n记录通过vue-cli配置代理进行跨域的实践及感悟。\n\n<!-- more -->\n\n### 实践：通过vue-cli配置代理进行跨域。\n1. 在项目根目录添加vue.config.js文件（如果已经有则跳过）。\n2. 添加如下代码：\n```javascript\nmodule.exports = {\n  devServer: {  // 该配置仅针对开发模式有效\n    proxy: {    // 该对象下的内容为代理配置\n      '/api': { // 代理具有'\\api'前缀的请求\n        target: 'http://localhost:8080/video_war/', // 将匹配的前缀（本示例中为'api'）改为target属性的内容。\n        changeOrigin: true, // \n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    }\n  }\n}\n```","updated":"2020-04-10T01:36:51.547Z","path":"temp/vue-cli配置代理.html","comments":1,"layout":"page","_id":"ckdych0in000fykrvpbha91o1","content":"<p>记录通过vue-cli配置代理进行跨域的实践及感悟。</p>\n<a id=\"more\"></a>\n<h3 id=\"实践：通过vue-cli配置代理进行跨域。\"><a href=\"#实践：通过vue-cli配置代理进行跨域。\" class=\"headerlink\" title=\"实践：通过vue-cli配置代理进行跨域。\"></a>实践：通过vue-cli配置代理进行跨域。</h3><ol>\n<li>在项目根目录添加vue.config.js文件（如果已经有则跳过）。</li>\n<li>添加如下代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;  <span class=\"comment\">// 该配置仅针对开发模式有效</span></span><br><span class=\"line\">    proxy: &#123;    <span class=\"comment\">// 该对象下的内容为代理配置</span></span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123; <span class=\"comment\">// 代理具有'\\api'前缀的请求</span></span><br><span class=\"line\">        target: <span class=\"string\">'http://localhost:8080/video_war/'</span>, <span class=\"comment\">// 将匹配的前缀（本示例中为'api'）改为target属性的内容。</span></span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>记录通过vue-cli配置代理进行跨域的实践及感悟。</p>","more":"<h3 id=\"实践：通过vue-cli配置代理进行跨域。\"><a href=\"#实践：通过vue-cli配置代理进行跨域。\" class=\"headerlink\" title=\"实践：通过vue-cli配置代理进行跨域。\"></a>实践：通过vue-cli配置代理进行跨域。</h3><ol>\n<li>在项目根目录添加vue.config.js文件（如果已经有则跳过）。</li>\n<li>添加如下代码：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;  <span class=\"comment\">// 该配置仅针对开发模式有效</span></span><br><span class=\"line\">    proxy: &#123;    <span class=\"comment\">// 该对象下的内容为代理配置</span></span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123; <span class=\"comment\">// 代理具有'\\api'前缀的请求</span></span><br><span class=\"line\">        target: <span class=\"string\">'http://localhost:8080/video_war/'</span>, <span class=\"comment\">// 将匹配的前缀（本示例中为'api'）改为target属性的内容。</span></span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"vue学习笔记：深入了解组件","date":"2020-04-24T03:23:50.000Z","categories":"前端","tags":["vue","前端"],"description":null,"_content":"\n主要学习了组件的引入（组件注册）、组件的数据（prop）、组件的行为（自定义事件）、组件间协作（插槽）。\n\n<!-- more -->\n\n","source":"temp/vue学习笔记.md","raw":"---\ntitle: vue学习笔记：深入了解组件\ndate: 2020-04-24 11:23:50\ncategories: 前端\ntags: [vue, 前端]\ndescription: \n---\n\n主要学习了组件的引入（组件注册）、组件的数据（prop）、组件的行为（自定义事件）、组件间协作（插槽）。\n\n<!-- more -->\n\n","updated":"2020-04-25T04:34:55.226Z","path":"temp/vue学习笔记.html","comments":1,"layout":"page","_id":"ckdych0in000gykrvxhx4xcm2","content":"<p>主要学习了组件的引入（组件注册）、组件的数据（prop）、组件的行为（自定义事件）、组件间协作（插槽）。</p>\n<a id=\"more\"></a>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>主要学习了组件的引入（组件注册）、组件的数据（prop）、组件的行为（自定义事件）、组件间协作（插槽）。</p>","more":""},{"title":"vue学习笔记：工具","date":"2020-04-24T03:23:50.000Z","categories":"前端","tags":["vue","前端"],"description":null,"_content":"\n主要学习vue的单文件组件、单元测试、TypeScript及生产环境的部署。\n\n<!-- more -->\n\n## 目录\n\n## 1. 单文件组件\n单文件组件大致指的是将一个vue文件作为一个组件。使用vue-cli搭建的项目中的`.vue`文件即单文件组件。\n\n## 2. 单元测试\n将组件当作黑盒，只关注输入和输出，只针对输入和输出进行测试。不论如何改变组件的内部逻辑，只要该组件响应输入的输出内容正确，能够通过测试，则该组件就是正确的。\n\n进行单元测试需要安装如下插件：\n1. `Vue Test Utils`。安装命令：`npm install --save-dev @vue/test-utils`\n2. 一个测试运行器（`jest`或`mocha`）。安装命令：`npm install --save-dev jest`\n\n相关学习资料\n* Vue Test Utils：https://vue-test-utils.vuejs.org/zh/\n* jest：https://jestjs.io/docs/en/getting-started\n\n## 3. TypeScript支持\n\n\n## 4. 生产环境部署","source":"temp/vue学习笔记:工具.md","raw":"---\ntitle: vue学习笔记：工具\ndate: 2020-04-24 11:23:50\ncategories: 前端\ntags: [vue, 前端]\ndescription: \n---\n\n主要学习vue的单文件组件、单元测试、TypeScript及生产环境的部署。\n\n<!-- more -->\n\n## 目录\n\n## 1. 单文件组件\n单文件组件大致指的是将一个vue文件作为一个组件。使用vue-cli搭建的项目中的`.vue`文件即单文件组件。\n\n## 2. 单元测试\n将组件当作黑盒，只关注输入和输出，只针对输入和输出进行测试。不论如何改变组件的内部逻辑，只要该组件响应输入的输出内容正确，能够通过测试，则该组件就是正确的。\n\n进行单元测试需要安装如下插件：\n1. `Vue Test Utils`。安装命令：`npm install --save-dev @vue/test-utils`\n2. 一个测试运行器（`jest`或`mocha`）。安装命令：`npm install --save-dev jest`\n\n相关学习资料\n* Vue Test Utils：https://vue-test-utils.vuejs.org/zh/\n* jest：https://jestjs.io/docs/en/getting-started\n\n## 3. TypeScript支持\n\n\n## 4. 生产环境部署","updated":"2020-04-29T05:32:51.107Z","path":"temp/vue学习笔记:工具.html","comments":1,"layout":"page","_id":"ckdych0io000hykrvcjbjxxb7","content":"<p>主要学习vue的单文件组件、单元测试、TypeScript及生产环境的部署。</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h2 id=\"1-单文件组件\"><a href=\"#1-单文件组件\" class=\"headerlink\" title=\"1. 单文件组件\"></a>1. 单文件组件</h2><p>单文件组件大致指的是将一个vue文件作为一个组件。使用vue-cli搭建的项目中的<code>.vue</code>文件即单文件组件。</p>\n<h2 id=\"2-单元测试\"><a href=\"#2-单元测试\" class=\"headerlink\" title=\"2. 单元测试\"></a>2. 单元测试</h2><p>将组件当作黑盒，只关注输入和输出，只针对输入和输出进行测试。不论如何改变组件的内部逻辑，只要该组件响应输入的输出内容正确，能够通过测试，则该组件就是正确的。</p>\n<p>进行单元测试需要安装如下插件：</p>\n<ol>\n<li><code>Vue Test Utils</code>。安装命令：<code>npm install --save-dev @vue/test-utils</code></li>\n<li>一个测试运行器（<code>jest</code>或<code>mocha</code>）。安装命令：<code>npm install --save-dev jest</code></li>\n</ol>\n<p>相关学习资料</p>\n<ul>\n<li>Vue Test Utils：<a href=\"https://vue-test-utils.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vue-test-utils.vuejs.org/zh/</a></li>\n<li>jest：<a href=\"https://jestjs.io/docs/en/getting-started\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/docs/en/getting-started</a></li>\n</ul>\n<h2 id=\"3-TypeScript支持\"><a href=\"#3-TypeScript支持\" class=\"headerlink\" title=\"3. TypeScript支持\"></a>3. TypeScript支持</h2><h2 id=\"4-生产环境部署\"><a href=\"#4-生产环境部署\" class=\"headerlink\" title=\"4. 生产环境部署\"></a>4. 生产环境部署</h2>","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>主要学习vue的单文件组件、单元测试、TypeScript及生产环境的部署。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h2 id=\"1-单文件组件\"><a href=\"#1-单文件组件\" class=\"headerlink\" title=\"1. 单文件组件\"></a>1. 单文件组件</h2><p>单文件组件大致指的是将一个vue文件作为一个组件。使用vue-cli搭建的项目中的<code>.vue</code>文件即单文件组件。</p>\n<h2 id=\"2-单元测试\"><a href=\"#2-单元测试\" class=\"headerlink\" title=\"2. 单元测试\"></a>2. 单元测试</h2><p>将组件当作黑盒，只关注输入和输出，只针对输入和输出进行测试。不论如何改变组件的内部逻辑，只要该组件响应输入的输出内容正确，能够通过测试，则该组件就是正确的。</p>\n<p>进行单元测试需要安装如下插件：</p>\n<ol>\n<li><code>Vue Test Utils</code>。安装命令：<code>npm install --save-dev @vue/test-utils</code></li>\n<li>一个测试运行器（<code>jest</code>或<code>mocha</code>）。安装命令：<code>npm install --save-dev jest</code></li>\n</ol>\n<p>相关学习资料</p>\n<ul>\n<li>Vue Test Utils：<a href=\"https://vue-test-utils.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vue-test-utils.vuejs.org/zh/</a></li>\n<li>jest：<a href=\"https://jestjs.io/docs/en/getting-started\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/docs/en/getting-started</a></li>\n</ul>\n<h2 id=\"3-TypeScript支持\"><a href=\"#3-TypeScript支持\" class=\"headerlink\" title=\"3. TypeScript支持\"></a>3. TypeScript支持</h2><h2 id=\"4-生产环境部署\"><a href=\"#4-生产环境部署\" class=\"headerlink\" title=\"4. 生产环境部署\"></a>4. 生产环境部署</h2>"},{"_content":"## 做项目中遇到的一些问题\n\n### 如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\n\n#### 方案1:使用过滤器。\n\nvue文档中指出过滤器可以用在两个地方：1. 双花括号差值。 2. v-bind表达式\n\n","source":"temp/vue的一些基础知识和个人理解.md","raw":"## 做项目中遇到的一些问题\n\n### 如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\n\n#### 方案1:使用过滤器。\n\nvue文档中指出过滤器可以用在两个地方：1. 双花括号差值。 2. v-bind表达式\n\n","date":"2020-04-04T11:43:45.927Z","updated":"2020-04-04T11:43:45.927Z","path":"temp/vue的一些基础知识和个人理解.html","title":"","comments":1,"layout":"page","_id":"ckdych0io000iykrvp6wojofv","content":"<h2 id=\"做项目中遇到的一些问题\"><a href=\"#做项目中遇到的一些问题\" class=\"headerlink\" title=\"做项目中遇到的一些问题\"></a>做项目中遇到的一些问题</h2><h3 id=\"如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\"><a href=\"#如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\" class=\"headerlink\" title=\"如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\"></a>如何对使用父组件通过v-bind传递给子组件的数据进行过滤？</h3><h4 id=\"方案1-使用过滤器。\"><a href=\"#方案1-使用过滤器。\" class=\"headerlink\" title=\"方案1:使用过滤器。\"></a>方案1:使用过滤器。</h4><p>vue文档中指出过滤器可以用在两个地方：1. 双花括号差值。 2. v-bind表达式</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"做项目中遇到的一些问题\"><a href=\"#做项目中遇到的一些问题\" class=\"headerlink\" title=\"做项目中遇到的一些问题\"></a>做项目中遇到的一些问题</h2><h3 id=\"如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\"><a href=\"#如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\" class=\"headerlink\" title=\"如何对使用父组件通过v-bind传递给子组件的数据进行过滤？\"></a>如何对使用父组件通过v-bind传递给子组件的数据进行过滤？</h3><h4 id=\"方案1-使用过滤器。\"><a href=\"#方案1-使用过滤器。\" class=\"headerlink\" title=\"方案1:使用过滤器。\"></a>方案1:使用过滤器。</h4><p>vue文档中指出过滤器可以用在两个地方：1. 双花括号差值。 2. v-bind表达式</p>\n"},{"_content":"## 文本\n\n### 字体\n中文：微软雅黑字体。\n英文：arial字体。\n\n### 大小\n12px：网页的最小字体，突出性的日期、版权等注释性内容。\n14px：适用于非突出的普通正文内容。\n16px：突出性的标题内容。\n\n### 颜色\n黑\n* #999999;\n* #666666;\n* #333333;\n\n灰\n* #8a9699;\n* #5c6466;\n* #2e3233;","source":"temp/web端设计规范.md","raw":"## 文本\n\n### 字体\n中文：微软雅黑字体。\n英文：arial字体。\n\n### 大小\n12px：网页的最小字体，突出性的日期、版权等注释性内容。\n14px：适用于非突出的普通正文内容。\n16px：突出性的标题内容。\n\n### 颜色\n黑\n* #999999;\n* #666666;\n* #333333;\n\n灰\n* #8a9699;\n* #5c6466;\n* #2e3233;","date":"2020-04-24T08:49:29.823Z","updated":"2020-04-24T08:49:29.823Z","path":"temp/web端设计规范.html","title":"","comments":1,"layout":"page","_id":"ckdych0io000jykrvn5l3wpd3","content":"<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>中文：微软雅黑字体。<br>英文：arial字体。</p>\n<h3 id=\"大小\"><a href=\"#大小\" class=\"headerlink\" title=\"大小\"></a>大小</h3><p>12px：网页的最小字体，突出性的日期、版权等注释性内容。<br>14px：适用于非突出的普通正文内容。<br>16px：突出性的标题内容。</p>\n<h3 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h3><p>黑</p>\n<ul>\n<li>#999999;</li>\n<li>#666666;</li>\n<li>#333333;</li>\n</ul>\n<p>灰</p>\n<ul>\n<li>#8a9699;</li>\n<li>#5c6466;</li>\n<li>#2e3233;</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>中文：微软雅黑字体。<br>英文：arial字体。</p>\n<h3 id=\"大小\"><a href=\"#大小\" class=\"headerlink\" title=\"大小\"></a>大小</h3><p>12px：网页的最小字体，突出性的日期、版权等注释性内容。<br>14px：适用于非突出的普通正文内容。<br>16px：突出性的标题内容。</p>\n<h3 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h3><p>黑</p>\n<ul>\n<li>#999999;</li>\n<li>#666666;</li>\n<li>#333333;</li>\n</ul>\n<p>灰</p>\n<ul>\n<li>#8a9699;</li>\n<li>#5c6466;</li>\n<li>#2e3233;</li>\n</ul>\n"},{"title":"《你不知道的JavaScript 上卷》第二部分","date":"2020-02-04T15:47:30.000Z","categories":"读书笔记","tags":["读书笔记","设计"],"description":"你不知道的JavaScript的读书笔记","_content":"\n第二部分：this和对象原型。\n\n<!-- more -->\n\n# 目录\n\n## \n\n\n---\n\n","source":"temp/《你不知道的JavaScript 上卷》第二部分.md","raw":"---\ntitle: 《你不知道的JavaScript 上卷》第二部分 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-02-04 23:47:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 读书笔记 #分类\n\ntags: [读书笔记, 设计] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 你不知道的JavaScript的读书笔记\n\n---\n\n第二部分：this和对象原型。\n\n<!-- more -->\n\n# 目录\n\n## \n\n\n---\n\n","updated":"2020-05-19T15:35:03.185Z","path":"temp/《你不知道的JavaScript 上卷》第二部分.html","comments":1,"layout":"page","_id":"ckdych0ip000kykrvsngyj54u","content":"<p>第二部分：this和对象原型。</p>\n<a id=\"more\"></a>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p>## </p>\n<hr>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>第二部分：this和对象原型。</p>","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p>## </p>\n<hr>"},{"_content":"## 关于npx\n* npx 想要解决的主要问题，就是调用项目内部安装的模块。\n* npx还可以安装模块，且默认不是全局安装，而是安装到一个临时目录，用完即删。可以通过命令进行指定是否使用本地的模块而不是安装模块（--no-install）、强制安装并使用远程模块（--ignore-existing）\n* `-p`参数，指定要安装的模块。\n* `-c`参数，使得所有命令交由npx解释。\n* npx还可以远程执行github源码。\n* npm从5.2版本开始支持npx。\n\n## 参考资料\n* 阮一峰的npx使用教程：http://www.ruanyifeng.com/blog/2019/02/npx.html","source":"temp/关于npm.md","raw":"## 关于npx\n* npx 想要解决的主要问题，就是调用项目内部安装的模块。\n* npx还可以安装模块，且默认不是全局安装，而是安装到一个临时目录，用完即删。可以通过命令进行指定是否使用本地的模块而不是安装模块（--no-install）、强制安装并使用远程模块（--ignore-existing）\n* `-p`参数，指定要安装的模块。\n* `-c`参数，使得所有命令交由npx解释。\n* npx还可以远程执行github源码。\n* npm从5.2版本开始支持npx。\n\n## 参考资料\n* 阮一峰的npx使用教程：http://www.ruanyifeng.com/blog/2019/02/npx.html","date":"2020-03-29T13:53:04.361Z","updated":"2020-03-29T13:53:04.361Z","path":"temp/关于npm.html","title":"","comments":1,"layout":"page","_id":"ckdych0ip000lykrvt5nv9wvf","content":"<h2 id=\"关于npx\"><a href=\"#关于npx\" class=\"headerlink\" title=\"关于npx\"></a>关于npx</h2><ul>\n<li>npx 想要解决的主要问题，就是调用项目内部安装的模块。</li>\n<li>npx还可以安装模块，且默认不是全局安装，而是安装到一个临时目录，用完即删。可以通过命令进行指定是否使用本地的模块而不是安装模块（–no-install）、强制安装并使用远程模块（–ignore-existing）</li>\n<li><code>-p</code>参数，指定要安装的模块。</li>\n<li><code>-c</code>参数，使得所有命令交由npx解释。</li>\n<li>npx还可以远程执行github源码。</li>\n<li>npm从5.2版本开始支持npx。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>阮一峰的npx使用教程：<a href=\"http://www.ruanyifeng.com/blog/2019/02/npx.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2019/02/npx.html</a></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"关于npx\"><a href=\"#关于npx\" class=\"headerlink\" title=\"关于npx\"></a>关于npx</h2><ul>\n<li>npx 想要解决的主要问题，就是调用项目内部安装的模块。</li>\n<li>npx还可以安装模块，且默认不是全局安装，而是安装到一个临时目录，用完即删。可以通过命令进行指定是否使用本地的模块而不是安装模块（–no-install）、强制安装并使用远程模块（–ignore-existing）</li>\n<li><code>-p</code>参数，指定要安装的模块。</li>\n<li><code>-c</code>参数，使得所有命令交由npx解释。</li>\n<li>npx还可以远程执行github源码。</li>\n<li>npm从5.2版本开始支持npx。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>阮一峰的npx使用教程：<a href=\"http://www.ruanyifeng.com/blog/2019/02/npx.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2019/02/npx.html</a></li>\n</ul>\n"},{"_content":"加密型\n无特征。但是墙通过判断包大小可以阻断。\nss,ssr,v2ray by Vmess\n\n伪装型\n伪装为HTTPS流量。\nTrojan,v2ray WebSocket+LTs\n* Trojan TCP+TLS\n* V2ray webocket+TLS","source":"temp/关于科学上网.md","raw":"加密型\n无特征。但是墙通过判断包大小可以阻断。\nss,ssr,v2ray by Vmess\n\n伪装型\n伪装为HTTPS流量。\nTrojan,v2ray WebSocket+LTs\n* Trojan TCP+TLS\n* V2ray webocket+TLS","date":"2020-03-15T02:20:03.067Z","updated":"2020-03-15T02:20:03.067Z","path":"temp/关于科学上网.html","title":"","comments":1,"layout":"page","_id":"ckdych0ip000mykrv0bd5y32y","content":"<p>加密型<br>无特征。但是墙通过判断包大小可以阻断。<br>ss,ssr,v2ray by Vmess</p>\n<p>伪装型<br>伪装为HTTPS流量。<br>Trojan,v2ray WebSocket+LTs</p>\n<ul>\n<li>Trojan TCP+TLS</li>\n<li>V2ray webocket+TLS</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>加密型<br>无特征。但是墙通过判断包大小可以阻断。<br>ss,ssr,v2ray by Vmess</p>\n<p>伪装型<br>伪装为HTTPS流量。<br>Trojan,v2ray WebSocket+LTs</p>\n<ul>\n<li>Trojan TCP+TLS</li>\n<li>V2ray webocket+TLS</li>\n</ul>\n"},{"_content":"### 跨域问题\n\n### 跨域问题的根源：同源策略\n同源指的是**域名（或IP）**，**协议**，**端口**都相同，不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。","source":"temp/前后端跨域方案整理.md","raw":"### 跨域问题\n\n### 跨域问题的根源：同源策略\n同源指的是**域名（或IP）**，**协议**，**端口**都相同，不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。","date":"2020-03-15T02:20:12.550Z","updated":"2020-03-15T02:20:12.550Z","path":"temp/前后端跨域方案整理.html","title":"","comments":1,"layout":"page","_id":"ckdych0iq000nykrvtgsvoakf","content":"<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><h3 id=\"跨域问题的根源：同源策略\"><a href=\"#跨域问题的根源：同源策略\" class=\"headerlink\" title=\"跨域问题的根源：同源策略\"></a>跨域问题的根源：同源策略</h3><p>同源指的是<strong>域名（或IP）</strong>，<strong>协议</strong>，<strong>端口</strong>都相同，不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><h3 id=\"跨域问题的根源：同源策略\"><a href=\"#跨域问题的根源：同源策略\" class=\"headerlink\" title=\"跨域问题的根源：同源策略\"></a>跨域问题的根源：同源策略</h3><p>同源指的是<strong>域名（或IP）</strong>，<strong>协议</strong>，<strong>端口</strong>都相同，不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。</p>\n"},{"_content":"### crlf\n\n回车换行（Carriage-Return Line-Feed）\n* 回车(CR, ASCII 13, \\r) \n* 换行(LF, ASCII 10, \\n)\n\n","source":"temp/常识积累.md","raw":"### crlf\n\n回车换行（Carriage-Return Line-Feed）\n* 回车(CR, ASCII 13, \\r) \n* 换行(LF, ASCII 10, \\n)\n\n","date":"2020-02-29T06:46:47.174Z","updated":"2020-02-29T06:46:47.174Z","path":"temp/常识积累.html","title":"","comments":1,"layout":"page","_id":"ckdych0ir000qykrvf2atdo6j","content":"<h3 id=\"crlf\"><a href=\"#crlf\" class=\"headerlink\" title=\"crlf\"></a>crlf</h3><p>回车换行（Carriage-Return Line-Feed）</p>\n<ul>\n<li>回车(CR, ASCII 13, \\r) </li>\n<li>换行(LF, ASCII 10, \\n)</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"crlf\"><a href=\"#crlf\" class=\"headerlink\" title=\"crlf\"></a>crlf</h3><p>回车换行（Carriage-Return Line-Feed）</p>\n<ul>\n<li>回车(CR, ASCII 13, \\r) </li>\n<li>换行(LF, ASCII 10, \\n)</li>\n</ul>\n"},{"title":"关于异步（三）： 并发模型与事件循环机制","date":"2020-03-05T02:05:50.000Z","categories":"前端","tags":["js异步"],"description":"js异步","_content":"\n\n\n## 运行时概念\n\n* **函数调用**形成栈帧\n* **对象**被分配在堆中\n* **待处理消息**在队列中。消息关联着一个用以处理这个消息的回调函数。\n\n## 事件循环（EventLoop）\n1. 事件循环时，“运行时”会先处理队头的消息。处理方式即将该消息移出队列，然后使用其输入参数调用关联的函数，形成栈帧，然后继续执行这个函数直到完成（栈空）。\n2. 处理完后，执行下一个消息。\n\n### 添加“消息”\n条件：\n1. 事件被事件监听器绑定。\n2. 事件发生。\n\n注意：\n* 如果没有事件监听器，则该事件被丢失。\n\n### 关于处理消息的“执行至完成”过程\n* 缺陷：如果消息耗费时间长，则无法处理其他的事情，比如用户的其他交互。\n* 对策：\n    1. 采用loading动画等提示信息。\n    2. 将消息剪裁为多个消息。\n\n### 关于setTimeout\nsetTimeout接收的参数如下：\n* 待加入队列的消息。\n* 一个时间值。即消息被加入队列的最小延迟时间。\n当经过最小延迟时间后，该消息将入队，但必须要等待到前边的内容全部处理完毕后才能执行。","source":"temp/并发模型与事件循环.md","raw":"---\ntitle: 关于异步（三）： 并发模型与事件循环机制 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-05 10:05:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [js异步] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: js异步\n---\n\n\n\n## 运行时概念\n\n* **函数调用**形成栈帧\n* **对象**被分配在堆中\n* **待处理消息**在队列中。消息关联着一个用以处理这个消息的回调函数。\n\n## 事件循环（EventLoop）\n1. 事件循环时，“运行时”会先处理队头的消息。处理方式即将该消息移出队列，然后使用其输入参数调用关联的函数，形成栈帧，然后继续执行这个函数直到完成（栈空）。\n2. 处理完后，执行下一个消息。\n\n### 添加“消息”\n条件：\n1. 事件被事件监听器绑定。\n2. 事件发生。\n\n注意：\n* 如果没有事件监听器，则该事件被丢失。\n\n### 关于处理消息的“执行至完成”过程\n* 缺陷：如果消息耗费时间长，则无法处理其他的事情，比如用户的其他交互。\n* 对策：\n    1. 采用loading动画等提示信息。\n    2. 将消息剪裁为多个消息。\n\n### 关于setTimeout\nsetTimeout接收的参数如下：\n* 待加入队列的消息。\n* 一个时间值。即消息被加入队列的最小延迟时间。\n当经过最小延迟时间后，该消息将入队，但必须要等待到前边的内容全部处理完毕后才能执行。","updated":"2020-03-15T02:26:30.381Z","path":"temp/并发模型与事件循环.html","comments":1,"layout":"page","_id":"ckdych0ir000rykrvz0imp16n","content":"<h2 id=\"运行时概念\"><a href=\"#运行时概念\" class=\"headerlink\" title=\"运行时概念\"></a>运行时概念</h2><ul>\n<li><strong>函数调用</strong>形成栈帧</li>\n<li><strong>对象</strong>被分配在堆中</li>\n<li><strong>待处理消息</strong>在队列中。消息关联着一个用以处理这个消息的回调函数。</li>\n</ul>\n<h2 id=\"事件循环（EventLoop）\"><a href=\"#事件循环（EventLoop）\" class=\"headerlink\" title=\"事件循环（EventLoop）\"></a>事件循环（EventLoop）</h2><ol>\n<li>事件循环时，“运行时”会先处理队头的消息。处理方式即将该消息移出队列，然后使用其输入参数调用关联的函数，形成栈帧，然后继续执行这个函数直到完成（栈空）。</li>\n<li>处理完后，执行下一个消息。</li>\n</ol>\n<h3 id=\"添加“消息”\"><a href=\"#添加“消息”\" class=\"headerlink\" title=\"添加“消息”\"></a>添加“消息”</h3><p>条件：</p>\n<ol>\n<li>事件被事件监听器绑定。</li>\n<li>事件发生。</li>\n</ol>\n<p>注意：</p>\n<ul>\n<li>如果没有事件监听器，则该事件被丢失。</li>\n</ul>\n<h3 id=\"关于处理消息的“执行至完成”过程\"><a href=\"#关于处理消息的“执行至完成”过程\" class=\"headerlink\" title=\"关于处理消息的“执行至完成”过程\"></a>关于处理消息的“执行至完成”过程</h3><ul>\n<li>缺陷：如果消息耗费时间长，则无法处理其他的事情，比如用户的其他交互。</li>\n<li>对策：<ol>\n<li>采用loading动画等提示信息。</li>\n<li>将消息剪裁为多个消息。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"关于setTimeout\"><a href=\"#关于setTimeout\" class=\"headerlink\" title=\"关于setTimeout\"></a>关于setTimeout</h3><p>setTimeout接收的参数如下：</p>\n<ul>\n<li>待加入队列的消息。</li>\n<li>一个时间值。即消息被加入队列的最小延迟时间。<br>当经过最小延迟时间后，该消息将入队，但必须要等待到前边的内容全部处理完毕后才能执行。</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"运行时概念\"><a href=\"#运行时概念\" class=\"headerlink\" title=\"运行时概念\"></a>运行时概念</h2><ul>\n<li><strong>函数调用</strong>形成栈帧</li>\n<li><strong>对象</strong>被分配在堆中</li>\n<li><strong>待处理消息</strong>在队列中。消息关联着一个用以处理这个消息的回调函数。</li>\n</ul>\n<h2 id=\"事件循环（EventLoop）\"><a href=\"#事件循环（EventLoop）\" class=\"headerlink\" title=\"事件循环（EventLoop）\"></a>事件循环（EventLoop）</h2><ol>\n<li>事件循环时，“运行时”会先处理队头的消息。处理方式即将该消息移出队列，然后使用其输入参数调用关联的函数，形成栈帧，然后继续执行这个函数直到完成（栈空）。</li>\n<li>处理完后，执行下一个消息。</li>\n</ol>\n<h3 id=\"添加“消息”\"><a href=\"#添加“消息”\" class=\"headerlink\" title=\"添加“消息”\"></a>添加“消息”</h3><p>条件：</p>\n<ol>\n<li>事件被事件监听器绑定。</li>\n<li>事件发生。</li>\n</ol>\n<p>注意：</p>\n<ul>\n<li>如果没有事件监听器，则该事件被丢失。</li>\n</ul>\n<h3 id=\"关于处理消息的“执行至完成”过程\"><a href=\"#关于处理消息的“执行至完成”过程\" class=\"headerlink\" title=\"关于处理消息的“执行至完成”过程\"></a>关于处理消息的“执行至完成”过程</h3><ul>\n<li>缺陷：如果消息耗费时间长，则无法处理其他的事情，比如用户的其他交互。</li>\n<li>对策：<ol>\n<li>采用loading动画等提示信息。</li>\n<li>将消息剪裁为多个消息。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"关于setTimeout\"><a href=\"#关于setTimeout\" class=\"headerlink\" title=\"关于setTimeout\"></a>关于setTimeout</h3><p>setTimeout接收的参数如下：</p>\n<ul>\n<li>待加入队列的消息。</li>\n<li>一个时间值。即消息被加入队列的最小延迟时间。<br>当经过最小延迟时间后，该消息将入队，但必须要等待到前边的内容全部处理完毕后才能执行。</li>\n</ul>\n"},{"_content":"数据库层面\n1. 项目管理：project表要改 \n2. 子项目管理：project_child表要改\n3. 查封资产管理：assets_seized需要改动\n4. 查封资产记录表：assets_seized_record需要改动\n5. 子项目地址表：childPrj_address_book需要改动\n6. 日志信息表：log_info需要改动\n7. 任务表：task需要改动\n8. 周报表：week_record需要改动\n\nmapper层面\n1. 删除项目deleteProject、deleteProjectByNo\n2. 修改项目updateProject、\n3. 插入项目insertProject\n4. 查找项目：selectByProjectNo\n\n\ncontroller层面\n1. 获取project：getProject\n\n---------------------------\n采用修改客户id显示的方式需要改为0001的显示方式。\n\n项目编号改为0001 0001的方式\n\n\n1. 编号显示的问题\n2. 导出的问题。\n3. 搜索的问题。\n4. 修改的问题。\n5. 删除的问题。\n\n\n1. 增加✔️\n2. 删除✔️\n3. 修改✔️\n4. 导出✔️\n\n1. 增加（审批）（已测试）\n2. 删除（审批）（已测试）\n3. 修改（审批）（已测试）\n\n晚上十一点后把数据库更新一下，重新部署一下前端和后台。\n\n查封资产需要改。\n查封资产记录需要改。\n子项目地址簿需要改。\n子项目协作团队需要改。\n客户需要改。\nlitigious需要改。\n日志信息需要改。\nmessage需要改。\nparty需要改。\n项目表需要改。\n子项目表需要改。\n任务表需要改。\nto_do_team表需要改。\n\n客户要改一下。\n","source":"temp/评估.md","raw":"数据库层面\n1. 项目管理：project表要改 \n2. 子项目管理：project_child表要改\n3. 查封资产管理：assets_seized需要改动\n4. 查封资产记录表：assets_seized_record需要改动\n5. 子项目地址表：childPrj_address_book需要改动\n6. 日志信息表：log_info需要改动\n7. 任务表：task需要改动\n8. 周报表：week_record需要改动\n\nmapper层面\n1. 删除项目deleteProject、deleteProjectByNo\n2. 修改项目updateProject、\n3. 插入项目insertProject\n4. 查找项目：selectByProjectNo\n\n\ncontroller层面\n1. 获取project：getProject\n\n---------------------------\n采用修改客户id显示的方式需要改为0001的显示方式。\n\n项目编号改为0001 0001的方式\n\n\n1. 编号显示的问题\n2. 导出的问题。\n3. 搜索的问题。\n4. 修改的问题。\n5. 删除的问题。\n\n\n1. 增加✔️\n2. 删除✔️\n3. 修改✔️\n4. 导出✔️\n\n1. 增加（审批）（已测试）\n2. 删除（审批）（已测试）\n3. 修改（审批）（已测试）\n\n晚上十一点后把数据库更新一下，重新部署一下前端和后台。\n\n查封资产需要改。\n查封资产记录需要改。\n子项目地址簿需要改。\n子项目协作团队需要改。\n客户需要改。\nlitigious需要改。\n日志信息需要改。\nmessage需要改。\nparty需要改。\n项目表需要改。\n子项目表需要改。\n任务表需要改。\nto_do_team表需要改。\n\n客户要改一下。\n","date":"2020-05-26T02:20:34.165Z","updated":"2020-05-26T02:20:34.165Z","path":"temp/评估.html","title":"","comments":1,"layout":"page","_id":"ckdych0is000sykrvn7ruhhxq","content":"<p>数据库层面</p>\n<ol>\n<li>项目管理：project表要改 </li>\n<li>子项目管理：project_child表要改</li>\n<li>查封资产管理：assets_seized需要改动</li>\n<li>查封资产记录表：assets_seized_record需要改动</li>\n<li>子项目地址表：childPrj_address_book需要改动</li>\n<li>日志信息表：log_info需要改动</li>\n<li>任务表：task需要改动</li>\n<li>周报表：week_record需要改动</li>\n</ol>\n<p>mapper层面</p>\n<ol>\n<li>删除项目deleteProject、deleteProjectByNo</li>\n<li>修改项目updateProject、</li>\n<li>插入项目insertProject</li>\n<li>查找项目：selectByProjectNo</li>\n</ol>\n<p>controller层面</p>\n<ol>\n<li>获取project：getProject</li>\n</ol>\n<hr>\n<p>采用修改客户id显示的方式需要改为0001的显示方式。</p>\n<p>项目编号改为0001 0001的方式</p>\n<ol>\n<li>编号显示的问题</li>\n<li>导出的问题。</li>\n<li>搜索的问题。</li>\n<li>修改的问题。</li>\n<li>删除的问题。</li>\n</ol>\n<ol>\n<li>增加✔️</li>\n<li>删除✔️</li>\n<li>修改✔️</li>\n<li><p>导出✔️</p>\n</li>\n<li><p>增加（审批）（已测试）</p>\n</li>\n<li>删除（审批）（已测试）</li>\n<li>修改（审批）（已测试）</li>\n</ol>\n<p>晚上十一点后把数据库更新一下，重新部署一下前端和后台。</p>\n<p>查封资产需要改。<br>查封资产记录需要改。<br>子项目地址簿需要改。<br>子项目协作团队需要改。<br>客户需要改。<br>litigious需要改。<br>日志信息需要改。<br>message需要改。<br>party需要改。<br>项目表需要改。<br>子项目表需要改。<br>任务表需要改。<br>to_do_team表需要改。</p>\n<p>客户要改一下。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>数据库层面</p>\n<ol>\n<li>项目管理：project表要改 </li>\n<li>子项目管理：project_child表要改</li>\n<li>查封资产管理：assets_seized需要改动</li>\n<li>查封资产记录表：assets_seized_record需要改动</li>\n<li>子项目地址表：childPrj_address_book需要改动</li>\n<li>日志信息表：log_info需要改动</li>\n<li>任务表：task需要改动</li>\n<li>周报表：week_record需要改动</li>\n</ol>\n<p>mapper层面</p>\n<ol>\n<li>删除项目deleteProject、deleteProjectByNo</li>\n<li>修改项目updateProject、</li>\n<li>插入项目insertProject</li>\n<li>查找项目：selectByProjectNo</li>\n</ol>\n<p>controller层面</p>\n<ol>\n<li>获取project：getProject</li>\n</ol>\n<hr>\n<p>采用修改客户id显示的方式需要改为0001的显示方式。</p>\n<p>项目编号改为0001 0001的方式</p>\n<ol>\n<li>编号显示的问题</li>\n<li>导出的问题。</li>\n<li>搜索的问题。</li>\n<li>修改的问题。</li>\n<li>删除的问题。</li>\n</ol>\n<ol>\n<li>增加✔️</li>\n<li>删除✔️</li>\n<li>修改✔️</li>\n<li><p>导出✔️</p>\n</li>\n<li><p>增加（审批）（已测试）</p>\n</li>\n<li>删除（审批）（已测试）</li>\n<li>修改（审批）（已测试）</li>\n</ol>\n<p>晚上十一点后把数据库更新一下，重新部署一下前端和后台。</p>\n<p>查封资产需要改。<br>查封资产记录需要改。<br>子项目地址簿需要改。<br>子项目协作团队需要改。<br>客户需要改。<br>litigious需要改。<br>日志信息需要改。<br>message需要改。<br>party需要改。<br>项目表需要改。<br>子项目表需要改。<br>任务表需要改。<br>to_do_team表需要改。</p>\n<p>客户要改一下。</p>\n"},{"_content":"## 前端导出excel文件\n1. save as的前端实现\n\n插件：\n1. FileSaver [npm地址](https://www.npmjs.com/package/file-saver), [GitHub地址](https://github.com/eligrey/FileSaver.js/) \n2. xlsx [npm地址](https://www.npmjs.com/package/xlsx)\n3. script-loader [npm地址](https://www.npmjs.com/package/script-loader) \n\n\n","source":"temp/项目中的一些功能.md","raw":"## 前端导出excel文件\n1. save as的前端实现\n\n插件：\n1. FileSaver [npm地址](https://www.npmjs.com/package/file-saver), [GitHub地址](https://github.com/eligrey/FileSaver.js/) \n2. xlsx [npm地址](https://www.npmjs.com/package/xlsx)\n3. script-loader [npm地址](https://www.npmjs.com/package/script-loader) \n\n\n","date":"2020-02-10T11:07:20.488Z","updated":"2020-02-10T11:07:20.488Z","path":"temp/项目中的一些功能.html","title":"","comments":1,"layout":"page","_id":"ckdych0is000tykrvzi9musbw","content":"<h2 id=\"前端导出excel文件\"><a href=\"#前端导出excel文件\" class=\"headerlink\" title=\"前端导出excel文件\"></a>前端导出excel文件</h2><ol>\n<li>save as的前端实现</li>\n</ol>\n<p>插件：</p>\n<ol>\n<li>FileSaver <a href=\"https://www.npmjs.com/package/file-saver\" target=\"_blank\" rel=\"noopener\">npm地址</a>, <a href=\"https://github.com/eligrey/FileSaver.js/\" target=\"_blank\" rel=\"noopener\">GitHub地址</a> </li>\n<li>xlsx <a href=\"https://www.npmjs.com/package/xlsx\" target=\"_blank\" rel=\"noopener\">npm地址</a></li>\n<li>script-loader <a href=\"https://www.npmjs.com/package/script-loader\" target=\"_blank\" rel=\"noopener\">npm地址</a> </li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"前端导出excel文件\"><a href=\"#前端导出excel文件\" class=\"headerlink\" title=\"前端导出excel文件\"></a>前端导出excel文件</h2><ol>\n<li>save as的前端实现</li>\n</ol>\n<p>插件：</p>\n<ol>\n<li>FileSaver <a href=\"https://www.npmjs.com/package/file-saver\" target=\"_blank\" rel=\"noopener\">npm地址</a>, <a href=\"https://github.com/eligrey/FileSaver.js/\" target=\"_blank\" rel=\"noopener\">GitHub地址</a> </li>\n<li>xlsx <a href=\"https://www.npmjs.com/package/xlsx\" target=\"_blank\" rel=\"noopener\">npm地址</a></li>\n<li>script-loader <a href=\"https://www.npmjs.com/package/script-loader\" target=\"_blank\" rel=\"noopener\">npm地址</a> </li>\n</ol>\n"},{"title":"项目的一些思考","date":"2020-02-03T02:47:30.000Z","categories":"工程","tags":null,"description":"项目的一些思考","thumbnail":"http://ewinds.pw/你不知道的javascript 上卷.png","_content":"\n项目的一些交互设计主要仿照如下网站：\n* 七牛云\n* 腾讯云\n* 阿里云\n\n<!-- more -->\n\n项目内容。\n\n## 登陆模块\n### 七牛云登陆模块分析\n#### 1. 用户交互\n输入框内容\n1. 未输入文本时，输入框的背景色为白色，输入框内的背景为浅色文字，文字内容为名词：“七牛注册邮箱”、“七牛登陆密码”。\n2. 输入文本之后，背景文字消失，无其他变化。\n\n快捷键：回车\n1. 当光标在任意输入框内，都可以通过回车登陆。\n\n#### 2. 登陆按钮点击操作。\n```\n  loginButton.on('click', function(e) {\n    // 判断是否已经发送了登陆请求。\n    if (isSendingSigninReq) {   \n      return\n    }\n\n    // 获取需要传送的内容的值。\n    var email = emailElement.val()\n    var password = passwordElement.val()\n    var captchaVal = captchaIn.val()\n\n    // 值判空\n    if (!loginValidEmpty()) {\n      return\n    }\n\n    // 拼凑字符串\n    var clientId = getURLParameter(\"client_id\") || \"\"\n    var redirectUrl = getURLParameter(\"redirect_url\") || \"\"\n    var url = \"/signin?client_id=\" + clientId + \"&redirect_url=\" + redirectUrl\n\n    // 设置已经发送过登陆请求。\n    isSendingSigninReq = true\n    // 添加样式。disabled属性，导致按钮的颜色变浅，光标变化。\n    // cursor: not-allowed;\n    // filter: alpha(opacity=65);\n    // -webkit-box-shadow: none;\n    // box-shadow: none;\n    // opacity: .65;\n    loginButton.addClass('disabled');\n\n    performRequest(url, \"POST\", {\n      \"username\": email,\n      \"password\": password,\n      \"captcha\": captchaVal\n    }, loginSuccess, loginError, function(e) {\n      isSendingSigninReq = false\n      loginButton.removeClass('disabled')\n    })\n  })\n```\n\n### 律师事务所登陆操作\n#### 1. 用户交互\n猜测：按钮点击，然后提交表单，然后接收返回的内容，是一整套流程。这个流程里边有很多细节。可以探究一下。\n\n\n\n### 登陆模块还可以采取的改进方式\n* 表单提交最大的等待时间？\n* ","source":"temp/项目的一些思考.md","raw":"---\ntitle: 项目的一些思考 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-02-03 10:47:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 工程 #分类\n\ntags:  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 项目的一些思考\n\nthumbnail: http://ewinds.pw/你不知道的javascript 上卷.png\n---\n\n项目的一些交互设计主要仿照如下网站：\n* 七牛云\n* 腾讯云\n* 阿里云\n\n<!-- more -->\n\n项目内容。\n\n## 登陆模块\n### 七牛云登陆模块分析\n#### 1. 用户交互\n输入框内容\n1. 未输入文本时，输入框的背景色为白色，输入框内的背景为浅色文字，文字内容为名词：“七牛注册邮箱”、“七牛登陆密码”。\n2. 输入文本之后，背景文字消失，无其他变化。\n\n快捷键：回车\n1. 当光标在任意输入框内，都可以通过回车登陆。\n\n#### 2. 登陆按钮点击操作。\n```\n  loginButton.on('click', function(e) {\n    // 判断是否已经发送了登陆请求。\n    if (isSendingSigninReq) {   \n      return\n    }\n\n    // 获取需要传送的内容的值。\n    var email = emailElement.val()\n    var password = passwordElement.val()\n    var captchaVal = captchaIn.val()\n\n    // 值判空\n    if (!loginValidEmpty()) {\n      return\n    }\n\n    // 拼凑字符串\n    var clientId = getURLParameter(\"client_id\") || \"\"\n    var redirectUrl = getURLParameter(\"redirect_url\") || \"\"\n    var url = \"/signin?client_id=\" + clientId + \"&redirect_url=\" + redirectUrl\n\n    // 设置已经发送过登陆请求。\n    isSendingSigninReq = true\n    // 添加样式。disabled属性，导致按钮的颜色变浅，光标变化。\n    // cursor: not-allowed;\n    // filter: alpha(opacity=65);\n    // -webkit-box-shadow: none;\n    // box-shadow: none;\n    // opacity: .65;\n    loginButton.addClass('disabled');\n\n    performRequest(url, \"POST\", {\n      \"username\": email,\n      \"password\": password,\n      \"captcha\": captchaVal\n    }, loginSuccess, loginError, function(e) {\n      isSendingSigninReq = false\n      loginButton.removeClass('disabled')\n    })\n  })\n```\n\n### 律师事务所登陆操作\n#### 1. 用户交互\n猜测：按钮点击，然后提交表单，然后接收返回的内容，是一整套流程。这个流程里边有很多细节。可以探究一下。\n\n\n\n### 登陆模块还可以采取的改进方式\n* 表单提交最大的等待时间？\n* ","updated":"2020-02-04T11:47:35.635Z","path":"temp/项目的一些思考.html","comments":1,"layout":"page","_id":"ckdych0it000vykrv6dtxaiiq","content":"<p>项目的一些交互设计主要仿照如下网站：</p>\n<ul>\n<li>七牛云</li>\n<li>腾讯云</li>\n<li>阿里云</li>\n</ul>\n<a id=\"more\"></a>\n<p>项目内容。</p>\n<h2 id=\"登陆模块\"><a href=\"#登陆模块\" class=\"headerlink\" title=\"登陆模块\"></a>登陆模块</h2><h3 id=\"七牛云登陆模块分析\"><a href=\"#七牛云登陆模块分析\" class=\"headerlink\" title=\"七牛云登陆模块分析\"></a>七牛云登陆模块分析</h3><h4 id=\"1-用户交互\"><a href=\"#1-用户交互\" class=\"headerlink\" title=\"1. 用户交互\"></a>1. 用户交互</h4><p>输入框内容</p>\n<ol>\n<li>未输入文本时，输入框的背景色为白色，输入框内的背景为浅色文字，文字内容为名词：“七牛注册邮箱”、“七牛登陆密码”。</li>\n<li>输入文本之后，背景文字消失，无其他变化。</li>\n</ol>\n<p>快捷键：回车</p>\n<ol>\n<li>当光标在任意输入框内，都可以通过回车登陆。</li>\n</ol>\n<h4 id=\"2-登陆按钮点击操作。\"><a href=\"#2-登陆按钮点击操作。\" class=\"headerlink\" title=\"2. 登陆按钮点击操作。\"></a>2. 登陆按钮点击操作。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loginButton.on(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">  // 判断是否已经发送了登陆请求。</span><br><span class=\"line\">  if (isSendingSigninReq) &#123;   </span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 获取需要传送的内容的值。</span><br><span class=\"line\">  var email = emailElement.val()</span><br><span class=\"line\">  var password = passwordElement.val()</span><br><span class=\"line\">  var captchaVal = captchaIn.val()</span><br><span class=\"line\"></span><br><span class=\"line\">  // 值判空</span><br><span class=\"line\">  if (!loginValidEmpty()) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 拼凑字符串</span><br><span class=\"line\">  var clientId = getURLParameter(&quot;client_id&quot;) || &quot;&quot;</span><br><span class=\"line\">  var redirectUrl = getURLParameter(&quot;redirect_url&quot;) || &quot;&quot;</span><br><span class=\"line\">  var url = &quot;/signin?client_id=&quot; + clientId + &quot;&amp;redirect_url=&quot; + redirectUrl</span><br><span class=\"line\"></span><br><span class=\"line\">  // 设置已经发送过登陆请求。</span><br><span class=\"line\">  isSendingSigninReq = true</span><br><span class=\"line\">  // 添加样式。disabled属性，导致按钮的颜色变浅，光标变化。</span><br><span class=\"line\">  // cursor: not-allowed;</span><br><span class=\"line\">  // filter: alpha(opacity=65);</span><br><span class=\"line\">  // -webkit-box-shadow: none;</span><br><span class=\"line\">  // box-shadow: none;</span><br><span class=\"line\">  // opacity: .65;</span><br><span class=\"line\">  loginButton.addClass(&apos;disabled&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  performRequest(url, &quot;POST&quot;, &#123;</span><br><span class=\"line\">    &quot;username&quot;: email,</span><br><span class=\"line\">    &quot;password&quot;: password,</span><br><span class=\"line\">    &quot;captcha&quot;: captchaVal</span><br><span class=\"line\">  &#125;, loginSuccess, loginError, function(e) &#123;</span><br><span class=\"line\">    isSendingSigninReq = false</span><br><span class=\"line\">    loginButton.removeClass(&apos;disabled&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"律师事务所登陆操作\"><a href=\"#律师事务所登陆操作\" class=\"headerlink\" title=\"律师事务所登陆操作\"></a>律师事务所登陆操作</h3><h4 id=\"1-用户交互-1\"><a href=\"#1-用户交互-1\" class=\"headerlink\" title=\"1. 用户交互\"></a>1. 用户交互</h4><p>猜测：按钮点击，然后提交表单，然后接收返回的内容，是一整套流程。这个流程里边有很多细节。可以探究一下。</p>\n<h3 id=\"登陆模块还可以采取的改进方式\"><a href=\"#登陆模块还可以采取的改进方式\" class=\"headerlink\" title=\"登陆模块还可以采取的改进方式\"></a>登陆模块还可以采取的改进方式</h3><ul>\n<li>表单提交最大的等待时间？</li>\n<li></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>项目的一些交互设计主要仿照如下网站：</p>\n<ul>\n<li>七牛云</li>\n<li>腾讯云</li>\n<li>阿里云</li>\n</ul>","more":"<p>项目内容。</p>\n<h2 id=\"登陆模块\"><a href=\"#登陆模块\" class=\"headerlink\" title=\"登陆模块\"></a>登陆模块</h2><h3 id=\"七牛云登陆模块分析\"><a href=\"#七牛云登陆模块分析\" class=\"headerlink\" title=\"七牛云登陆模块分析\"></a>七牛云登陆模块分析</h3><h4 id=\"1-用户交互\"><a href=\"#1-用户交互\" class=\"headerlink\" title=\"1. 用户交互\"></a>1. 用户交互</h4><p>输入框内容</p>\n<ol>\n<li>未输入文本时，输入框的背景色为白色，输入框内的背景为浅色文字，文字内容为名词：“七牛注册邮箱”、“七牛登陆密码”。</li>\n<li>输入文本之后，背景文字消失，无其他变化。</li>\n</ol>\n<p>快捷键：回车</p>\n<ol>\n<li>当光标在任意输入框内，都可以通过回车登陆。</li>\n</ol>\n<h4 id=\"2-登陆按钮点击操作。\"><a href=\"#2-登陆按钮点击操作。\" class=\"headerlink\" title=\"2. 登陆按钮点击操作。\"></a>2. 登陆按钮点击操作。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loginButton.on(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">  // 判断是否已经发送了登陆请求。</span><br><span class=\"line\">  if (isSendingSigninReq) &#123;   </span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 获取需要传送的内容的值。</span><br><span class=\"line\">  var email = emailElement.val()</span><br><span class=\"line\">  var password = passwordElement.val()</span><br><span class=\"line\">  var captchaVal = captchaIn.val()</span><br><span class=\"line\"></span><br><span class=\"line\">  // 值判空</span><br><span class=\"line\">  if (!loginValidEmpty()) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 拼凑字符串</span><br><span class=\"line\">  var clientId = getURLParameter(&quot;client_id&quot;) || &quot;&quot;</span><br><span class=\"line\">  var redirectUrl = getURLParameter(&quot;redirect_url&quot;) || &quot;&quot;</span><br><span class=\"line\">  var url = &quot;/signin?client_id=&quot; + clientId + &quot;&amp;redirect_url=&quot; + redirectUrl</span><br><span class=\"line\"></span><br><span class=\"line\">  // 设置已经发送过登陆请求。</span><br><span class=\"line\">  isSendingSigninReq = true</span><br><span class=\"line\">  // 添加样式。disabled属性，导致按钮的颜色变浅，光标变化。</span><br><span class=\"line\">  // cursor: not-allowed;</span><br><span class=\"line\">  // filter: alpha(opacity=65);</span><br><span class=\"line\">  // -webkit-box-shadow: none;</span><br><span class=\"line\">  // box-shadow: none;</span><br><span class=\"line\">  // opacity: .65;</span><br><span class=\"line\">  loginButton.addClass(&apos;disabled&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">  performRequest(url, &quot;POST&quot;, &#123;</span><br><span class=\"line\">    &quot;username&quot;: email,</span><br><span class=\"line\">    &quot;password&quot;: password,</span><br><span class=\"line\">    &quot;captcha&quot;: captchaVal</span><br><span class=\"line\">  &#125;, loginSuccess, loginError, function(e) &#123;</span><br><span class=\"line\">    isSendingSigninReq = false</span><br><span class=\"line\">    loginButton.removeClass(&apos;disabled&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"律师事务所登陆操作\"><a href=\"#律师事务所登陆操作\" class=\"headerlink\" title=\"律师事务所登陆操作\"></a>律师事务所登陆操作</h3><h4 id=\"1-用户交互-1\"><a href=\"#1-用户交互-1\" class=\"headerlink\" title=\"1. 用户交互\"></a>1. 用户交互</h4><p>猜测：按钮点击，然后提交表单，然后接收返回的内容，是一整套流程。这个流程里边有很多细节。可以探究一下。</p>\n<h3 id=\"登陆模块还可以采取的改进方式\"><a href=\"#登陆模块还可以采取的改进方式\" class=\"headerlink\" title=\"登陆模块还可以采取的改进方式\"></a>登陆模块还可以采取的改进方式</h3><ul>\n<li>表单提交最大的等待时间？</li>\n<li></li>\n</ul>"},{"title":"tags","date":"2019-12-02T01:44:55.754Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---","updated":"2019-12-02T01:44:13.423Z","path":"tags/index.html","comments":1,"_id":"ckdych0j4000wykrvtvp6j0oz","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-19T04:22:00.301Z","layout":"tags","_content":"","source":"tags/index 2.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---","updated":"2019-12-02T01:44:13.000Z","path":"tags/index 2.html","comments":1,"_id":"cke7zut5n0003lzrvk2u8gvgp","content":"","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":""}],"Post":[{"title":"使用idea开发springboot项目生成文件的含义详解","date":"2020-07-01T15:35:30.000Z","_content":"# 使用idea开发spring boot项目生成的一些文件\n* .iml：idea的工程配置文件。包含当前project的一些配置信息，如模块开发的相关信息，比如java组件，maven组件，插件组件等，还可能会存储一些模块路径信息，依赖信息以及一些别的信息。\n* mvnw：一个执行脚本，用于命令行环境。mvnw是一个maven wrapper script,它可以让你在没有安装maven或者maven版本不兼容的条件下运行maven的命令.\n* mvnw.cmd：作用与mvnw相同，只是用于win环境。","source":"_posts/IDE/使用idea开发spring boot项目生成的一些文件.md","raw":"---\ntitle: 使用idea开发springboot项目生成文件的含义详解\ndate: 2020-07-01 23:35:30 \ncategories: es6\ntags: [es6, js]\n---\n# 使用idea开发spring boot项目生成的一些文件\n* .iml：idea的工程配置文件。包含当前project的一些配置信息，如模块开发的相关信息，比如java组件，maven组件，插件组件等，还可能会存储一些模块路径信息，依赖信息以及一些别的信息。\n* mvnw：一个执行脚本，用于命令行环境。mvnw是一个maven wrapper script,它可以让你在没有安装maven或者maven版本不兼容的条件下运行maven的命令.\n* mvnw.cmd：作用与mvnw相同，只是用于win环境。","slug":"IDE/使用idea开发spring boot项目生成的一些文件","published":1,"updated":"2020-08-17T09:20:57.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k4000xykrv098jyzea","content":"<h1 id=\"使用idea开发spring-boot项目生成的一些文件\"><a href=\"#使用idea开发spring-boot项目生成的一些文件\" class=\"headerlink\" title=\"使用idea开发spring boot项目生成的一些文件\"></a>使用idea开发spring boot项目生成的一些文件</h1><ul>\n<li>.iml：idea的工程配置文件。包含当前project的一些配置信息，如模块开发的相关信息，比如java组件，maven组件，插件组件等，还可能会存储一些模块路径信息，依赖信息以及一些别的信息。</li>\n<li>mvnw：一个执行脚本，用于命令行环境。mvnw是一个maven wrapper script,它可以让你在没有安装maven或者maven版本不兼容的条件下运行maven的命令.</li>\n<li>mvnw.cmd：作用与mvnw相同，只是用于win环境。</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h1 id=\"使用idea开发spring-boot项目生成的一些文件\"><a href=\"#使用idea开发spring-boot项目生成的一些文件\" class=\"headerlink\" title=\"使用idea开发spring boot项目生成的一些文件\"></a>使用idea开发spring boot项目生成的一些文件</h1><ul>\n<li>.iml：idea的工程配置文件。包含当前project的一些配置信息，如模块开发的相关信息，比如java组件，maven组件，插件组件等，还可能会存储一些模块路径信息，依赖信息以及一些别的信息。</li>\n<li>mvnw：一个执行脚本，用于命令行环境。mvnw是一个maven wrapper script,它可以让你在没有安装maven或者maven版本不兼容的条件下运行maven的命令.</li>\n<li>mvnw.cmd：作用与mvnw相同，只是用于win环境。</li>\n</ul>\n"},{"title":"CSS的那些坑","date":"2020-03-27T14:05:30.000Z","description":"css的那些坑","_content":"\ncss中的坑不少啊。\n\n<!-- more -->\n\n### font-size\n1. webkit内核的浏览器中，该属性不支持小于`12px`的值。若要将字体设置的更小，可以使用css3中的`transform:scale()`。\n\n","source":"_posts/css基础/CSS的那些坑.md","raw":"---\ntitle: CSS的那些坑 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-03-27 22:05:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: css #分类\n\ntags: css #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: css的那些坑\n\n---\n\ncss中的坑不少啊。\n\n<!-- more -->\n\n### font-size\n1. webkit内核的浏览器中，该属性不支持小于`12px`的值。若要将字体设置的更小，可以使用css3中的`transform:scale()`。\n\n","slug":"css基础/CSS的那些坑","published":1,"updated":"2020-08-17T09:14:03.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k6000yykrvcg27t1o1","content":"<p>css中的坑不少啊。</p>\n<a id=\"more\"></a>\n<h3 id=\"font-size\"><a href=\"#font-size\" class=\"headerlink\" title=\"font-size\"></a>font-size</h3><ol>\n<li>webkit内核的浏览器中，该属性不支持小于<code>12px</code>的值。若要将字体设置的更小，可以使用css3中的<code>transform:scale()</code>。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>css中的坑不少啊。</p>","more":"<h3 id=\"font-size\"><a href=\"#font-size\" class=\"headerlink\" title=\"font-size\"></a>font-size</h3><ol>\n<li>webkit内核的浏览器中，该属性不支持小于<code>12px</code>的值。若要将字体设置的更小，可以使用css3中的<code>transform:scale()</code>。</li>\n</ol>"},{"title":"解决代码换行导致元素间出现空格间距的一些方案","date":"2017-10-14T03:35:30.000Z","description":"关于attribute和property的区别","_content":"\n最近在写东西的时候总是碰见一些莫名奇妙的bug。\n\n<!-- more -->\n\n在使用`display:inline-block`属性时经常会两个元素之间莫名奇妙出现空白。\n\n空白是因代码中的换行产生的，以下是解决方案。\n\n### 解决方案\n\n1. 使用margin移动至合适位置\n2. 代码不进行换行\n3. 设置任意父级块的字体大小为0\n4. 视情况改为浮动布局\n5. 将两个标签中间的空白部分进行注释\n    ``` html\n\t<input /><!--\n    \t--><input />\n    ```\n6. 将闭合标签`>`放到下一个标签的开始处\n    ``` html\n\t<input\n    \t/><input />\n    ```","source":"_posts/css基础/换行造成空格间距的解决方案.md","raw":"---\ntitle:  解决代码换行导致元素间出现空格间距的一些方案 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2017-10-14 11:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 前端 #分类\n\ntags: [前端]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 关于attribute和property的区别\n---\n\n最近在写东西的时候总是碰见一些莫名奇妙的bug。\n\n<!-- more -->\n\n在使用`display:inline-block`属性时经常会两个元素之间莫名奇妙出现空白。\n\n空白是因代码中的换行产生的，以下是解决方案。\n\n### 解决方案\n\n1. 使用margin移动至合适位置\n2. 代码不进行换行\n3. 设置任意父级块的字体大小为0\n4. 视情况改为浮动布局\n5. 将两个标签中间的空白部分进行注释\n    ``` html\n\t<input /><!--\n    \t--><input />\n    ```\n6. 将闭合标签`>`放到下一个标签的开始处\n    ``` html\n\t<input\n    \t/><input />\n    ```","slug":"css基础/换行造成空格间距的解决方案","published":1,"updated":"2020-08-17T08:01:33.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k7000zykrv8tmrztj1","content":"<p>最近在写东西的时候总是碰见一些莫名奇妙的bug。</p>\n<a id=\"more\"></a>\n<p>在使用<code>display:inline-block</code>属性时经常会两个元素之间莫名奇妙出现空白。</p>\n<p>空白是因代码中的换行产生的，以下是解决方案。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>使用margin移动至合适位置</li>\n<li>代码不进行换行</li>\n<li>设置任意父级块的字体大小为0</li>\n<li>视情况改为浮动布局</li>\n<li><p>将两个标签中间的空白部分进行注释</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">   \t--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将闭合标签<code>&gt;</code>放到下一个标签的开始处</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">   \t/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>最近在写东西的时候总是碰见一些莫名奇妙的bug。</p>","more":"<p>在使用<code>display:inline-block</code>属性时经常会两个元素之间莫名奇妙出现空白。</p>\n<p>空白是因代码中的换行产生的，以下是解决方案。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>使用margin移动至合适位置</li>\n<li>代码不进行换行</li>\n<li>设置任意父级块的字体大小为0</li>\n<li>视情况改为浮动布局</li>\n<li><p>将两个标签中间的空白部分进行注释</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">   \t--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将闭合标签<code>&gt;</code>放到下一个标签的开始处</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">   \t/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"标准盒模型和怪异盒模型","date":"2017-08-07T08:05:50.000Z","description":null,"_content":"### 标准盒子模型\n即`box-sizing:content-box`;\ndom的width：content的width。\nDOM元素显示时占据的总宽度 = margin + padding + border + content\nchrome、ff的浏览器默认样式即为标准盒子模型。\n\n### IE盒子模型\n即`box-sizing:border-box;`\ndom的width：content的width+padding+border\n元素的总宽度 = width + margin\nie浏览器默认的浏览器默认样式即为IE盒子模型。\n此时content的宽高只能通过调整width、padding、border来设置。","source":"_posts/css基础/标准盒模型和怪异盒模型.md","raw":"---\ntitle: 标准盒模型和怪异盒模型 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-08-07 16:05:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 读书笔记 #分类\ntags: [读书笔记, 设计] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n---\n### 标准盒子模型\n即`box-sizing:content-box`;\ndom的width：content的width。\nDOM元素显示时占据的总宽度 = margin + padding + border + content\nchrome、ff的浏览器默认样式即为标准盒子模型。\n\n### IE盒子模型\n即`box-sizing:border-box;`\ndom的width：content的width+padding+border\n元素的总宽度 = width + margin\nie浏览器默认的浏览器默认样式即为IE盒子模型。\n此时content的宽高只能通过调整width、padding、border来设置。","slug":"css基础/标准盒模型和怪异盒模型","published":1,"updated":"2020-08-17T07:59:03.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k70010ykrvscxw8122","content":"<h3 id=\"标准盒子模型\"><a href=\"#标准盒子模型\" class=\"headerlink\" title=\"标准盒子模型\"></a>标准盒子模型</h3><p>即<code>box-sizing:content-box</code>;<br>dom的width：content的width。<br>DOM元素显示时占据的总宽度 = margin + padding + border + content<br>chrome、ff的浏览器默认样式即为标准盒子模型。</p>\n<h3 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h3><p>即<code>box-sizing:border-box;</code><br>dom的width：content的width+padding+border<br>元素的总宽度 = width + margin<br>ie浏览器默认的浏览器默认样式即为IE盒子模型。<br>此时content的宽高只能通过调整width、padding、border来设置。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"标准盒子模型\"><a href=\"#标准盒子模型\" class=\"headerlink\" title=\"标准盒子模型\"></a>标准盒子模型</h3><p>即<code>box-sizing:content-box</code>;<br>dom的width：content的width。<br>DOM元素显示时占据的总宽度 = margin + padding + border + content<br>chrome、ff的浏览器默认样式即为标准盒子模型。</p>\n<h3 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h3><p>即<code>box-sizing:border-box;</code><br>dom的width：content的width+padding+border<br>元素的总宽度 = width + margin<br>ie浏览器默认的浏览器默认样式即为IE盒子模型。<br>此时content的宽高只能通过调整width、padding、border来设置。</p>\n"},{"title":"ES6学习笔记（二）：字符串的扩展","date":"2020-04-29T06:03:50.000Z","description":"es6：字符串扩展内容的总结。","_content":"\n## normalize()方法\n参数如下，注意参数必须大写！\n* NFC(default)。标准等价合成（Normalization Form Canonical Composition）。先规范分解，然后进行规范组合。\n* NFD。标准等价分解（Normalization Form Canonical Decomposition）。规范分解。\n* NFKC。兼容等价合成（Normalization Form Compatibility Composition）。先兼容性分解，然后进行规范组合。\n* NFKD。兼容等价分解（Normalization Form Compatibility Decomposition）。兼容性分解。\n\n个人理解，针对字母后跟音标符号的组合，如`\\u004F\\u030C`，与一个标有音标符合的字符`\\u01D1`，属于**规范等价**，因此可以用NFC和NFD。\n兼容等价（NFKC和NFKD）包含了规范等价，但比规范等价额外包含了**兼容**的部分，是规范等价的超集。若两个字符完全相同的组合，如`\\u0066\\u0066`，与他们的单个字符表现形式`\\uFB00`，他们的语义相同，则二者为兼容等价。可以使用规范化将二者变为同一形式。\n\n### 示例：\n1. NFC和NFD比较\n```javascript\nvar str1 = '\\u01D1' // Ǒ\nvar str2 = '\\u004F\\u030C' // Ǒ\nconsole.log(`str1的原始值（即赋予str1的值）为${String.raw`\\u01D1`}，显示的值为${str1},长度为${str1.length}`);  // Ǒ\nconsole.log(`str2的原始值（即赋予str2的值）为${String.raw`\\u004F\\u030C`}，显示的值为${str2},长度为${str2.length}`);  // Ǒ\nconsole.log(`str1与str2是否相等？${str1 === str2}`);\n\nvar params = [{\n    param:'NFD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFKC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n}]\n\nparams.forEach((cur,idx)=>{\n    console.log(`${idx+1}. 对${cur.beNorm}进行${cur.param}规范化`);\n    console.log(`规范化后的${cur.beNorm}与${cur.beCompared}是否相等？${cur.beNormStr.normalize(cur.param) === cur.beComparedStr}`);\n    console.log(`规范化前后${cur.beNorm}的值分别为：${cur.beNormStr},${cur.beNormStr.normalize(cur.param)}`)\n    console.log(`规范化前后${cur.beNorm}的长度分别为：${cur.beNormStr.length},${cur.beNormStr.normalize(cur.param).length}`)\n})\n```\n\n2. NFKC和NFKD比较\n```javascript\nvar str1 = '\\uFB00' // Ǒ\nvar str2 = '\\u0066\\u0066' // Ǒ\nconsole.log(`str1的原始值（即赋予str1的值）为${String.raw`\\u01D1`}，显示的值为${str1},长度为${str1.length}`);  // Ǒ\nconsole.log(`str2的原始值（即赋予str2的值）为${String.raw`\\u004F\\u030C`}，显示的值为${str2},长度为${str2.length}`);  // Ǒ\nconsole.log(`str1与str2是否相等？${str1 === str2}`);\n\nvar params = [{\n    param:'NFD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFKC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKC',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n}]\n\nparams.forEach((cur,idx)=>{\n    console.log(`${idx+1}. 对${cur.beNorm}进行${cur.param}规范化`);\n    console.log(`规范化后的${cur.beNorm}与${cur.beCompared}是否相等？${cur.beNormStr.normalize(cur.param) === cur.beComparedStr}`);\n    console.log(`规范化前后${cur.beNorm}的值分别为：${cur.beNormStr},${cur.beNormStr.normalize(cur.param)}`)\n    console.log(`规范化前后${cur.beNorm}的长度分别为：${cur.beNormStr.length},${cur.beNormStr.normalize(cur.param).length}`)\n})\n```\n第四次比较中为什么str2没有进行组合？暂时还未解决该疑惑。\n","source":"_posts/es6/ES6学习笔记（二）:字符串的扩展.md","raw":"---\ntitle: ES6学习笔记（二）：字符串的扩展 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-04-29 14:03:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端, es6] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: es6：字符串扩展内容的总结。\n---\n\n## normalize()方法\n参数如下，注意参数必须大写！\n* NFC(default)。标准等价合成（Normalization Form Canonical Composition）。先规范分解，然后进行规范组合。\n* NFD。标准等价分解（Normalization Form Canonical Decomposition）。规范分解。\n* NFKC。兼容等价合成（Normalization Form Compatibility Composition）。先兼容性分解，然后进行规范组合。\n* NFKD。兼容等价分解（Normalization Form Compatibility Decomposition）。兼容性分解。\n\n个人理解，针对字母后跟音标符号的组合，如`\\u004F\\u030C`，与一个标有音标符合的字符`\\u01D1`，属于**规范等价**，因此可以用NFC和NFD。\n兼容等价（NFKC和NFKD）包含了规范等价，但比规范等价额外包含了**兼容**的部分，是规范等价的超集。若两个字符完全相同的组合，如`\\u0066\\u0066`，与他们的单个字符表现形式`\\uFB00`，他们的语义相同，则二者为兼容等价。可以使用规范化将二者变为同一形式。\n\n### 示例：\n1. NFC和NFD比较\n```javascript\nvar str1 = '\\u01D1' // Ǒ\nvar str2 = '\\u004F\\u030C' // Ǒ\nconsole.log(`str1的原始值（即赋予str1的值）为${String.raw`\\u01D1`}，显示的值为${str1},长度为${str1.length}`);  // Ǒ\nconsole.log(`str2的原始值（即赋予str2的值）为${String.raw`\\u004F\\u030C`}，显示的值为${str2},长度为${str2.length}`);  // Ǒ\nconsole.log(`str1与str2是否相等？${str1 === str2}`);\n\nvar params = [{\n    param:'NFD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFKC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n}]\n\nparams.forEach((cur,idx)=>{\n    console.log(`${idx+1}. 对${cur.beNorm}进行${cur.param}规范化`);\n    console.log(`规范化后的${cur.beNorm}与${cur.beCompared}是否相等？${cur.beNormStr.normalize(cur.param) === cur.beComparedStr}`);\n    console.log(`规范化前后${cur.beNorm}的值分别为：${cur.beNormStr},${cur.beNormStr.normalize(cur.param)}`)\n    console.log(`规范化前后${cur.beNorm}的长度分别为：${cur.beNormStr.length},${cur.beNormStr.normalize(cur.param).length}`)\n})\n```\n\n2. NFKC和NFKD比较\n```javascript\nvar str1 = '\\uFB00' // Ǒ\nvar str2 = '\\u0066\\u0066' // Ǒ\nconsole.log(`str1的原始值（即赋予str1的值）为${String.raw`\\u01D1`}，显示的值为${str1},长度为${str1.length}`);  // Ǒ\nconsole.log(`str2的原始值（即赋予str2的值）为${String.raw`\\u004F\\u030C`}，显示的值为${str2},长度为${str2.length}`);  // Ǒ\nconsole.log(`str1与str2是否相等？${str1 === str2}`);\n\nvar params = [{\n    param:'NFD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKD',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n},{\n    param:'NFKC',\n    beNorm:'str2',\n    beNormStr:str2,\n    beCompared:'str1',\n    beComparedStr:str1\n},{\n    param:'NFKC',\n    beNorm:'str1',\n    beNormStr:str1,\n    beCompared:'str2',\n    beComparedStr:str2\n}]\n\nparams.forEach((cur,idx)=>{\n    console.log(`${idx+1}. 对${cur.beNorm}进行${cur.param}规范化`);\n    console.log(`规范化后的${cur.beNorm}与${cur.beCompared}是否相等？${cur.beNormStr.normalize(cur.param) === cur.beComparedStr}`);\n    console.log(`规范化前后${cur.beNorm}的值分别为：${cur.beNormStr},${cur.beNormStr.normalize(cur.param)}`)\n    console.log(`规范化前后${cur.beNorm}的长度分别为：${cur.beNormStr.length},${cur.beNormStr.normalize(cur.param).length}`)\n})\n```\n第四次比较中为什么str2没有进行组合？暂时还未解决该疑惑。\n","slug":"es6/ES6学习笔记（二）:字符串的扩展","published":1,"updated":"2020-08-17T09:14:59.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k80011ykrvr34y4mju","content":"<h2 id=\"normalize-方法\"><a href=\"#normalize-方法\" class=\"headerlink\" title=\"normalize()方法\"></a>normalize()方法</h2><p>参数如下，注意参数必须大写！</p>\n<ul>\n<li>NFC(default)。标准等价合成（Normalization Form Canonical Composition）。先规范分解，然后进行规范组合。</li>\n<li>NFD。标准等价分解（Normalization Form Canonical Decomposition）。规范分解。</li>\n<li>NFKC。兼容等价合成（Normalization Form Compatibility Composition）。先兼容性分解，然后进行规范组合。</li>\n<li>NFKD。兼容等价分解（Normalization Form Compatibility Decomposition）。兼容性分解。</li>\n</ul>\n<p>个人理解，针对字母后跟音标符号的组合，如<code>\\u004F\\u030C</code>，与一个标有音标符合的字符<code>\\u01D1</code>，属于<strong>规范等价</strong>，因此可以用NFC和NFD。<br>兼容等价（NFKC和NFKD）包含了规范等价，但比规范等价额外包含了<strong>兼容</strong>的部分，是规范等价的超集。若两个字符完全相同的组合，如<code>\\u0066\\u0066</code>，与他们的单个字符表现形式<code>\\uFB00</code>，他们的语义相同，则二者为兼容等价。可以使用规范化将二者变为同一形式。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><ol>\n<li><p>NFC和NFD比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'\\u01D1'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">'\\u004F\\u030C'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1的原始值（即赋予str1的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u01D1`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str1&#125;</span>,长度为<span class=\"subst\">$&#123;str1.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str2的原始值（即赋予str2的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u004F\\u030C`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str2&#125;</span>,长度为<span class=\"subst\">$&#123;str2.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1与str2是否相等？<span class=\"subst\">$&#123;str1 === str2&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = [&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">params.forEach(<span class=\"function\">(<span class=\"params\">cur,idx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;idx+<span class=\"number\">1</span>&#125;</span>. 对<span class=\"subst\">$&#123;cur.beNorm&#125;</span>进行<span class=\"subst\">$&#123;cur.param&#125;</span>规范化`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化后的<span class=\"subst\">$&#123;cur.beNorm&#125;</span>与<span class=\"subst\">$&#123;cur.beCompared&#125;</span>是否相等？<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param) === cur.beComparedStr&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的值分别为：<span class=\"subst\">$&#123;cur.beNormStr&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的长度分别为：<span class=\"subst\">$&#123;cur.beNormStr.length&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param).length&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NFKC和NFKD比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'\\uFB00'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">'\\u0066\\u0066'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1的原始值（即赋予str1的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u01D1`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str1&#125;</span>,长度为<span class=\"subst\">$&#123;str1.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str2的原始值（即赋予str2的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u004F\\u030C`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str2&#125;</span>,长度为<span class=\"subst\">$&#123;str2.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1与str2是否相等？<span class=\"subst\">$&#123;str1 === str2&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = [&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">params.forEach(<span class=\"function\">(<span class=\"params\">cur,idx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;idx+<span class=\"number\">1</span>&#125;</span>. 对<span class=\"subst\">$&#123;cur.beNorm&#125;</span>进行<span class=\"subst\">$&#123;cur.param&#125;</span>规范化`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化后的<span class=\"subst\">$&#123;cur.beNorm&#125;</span>与<span class=\"subst\">$&#123;cur.beCompared&#125;</span>是否相等？<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param) === cur.beComparedStr&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的值分别为：<span class=\"subst\">$&#123;cur.beNormStr&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的长度分别为：<span class=\"subst\">$&#123;cur.beNormStr.length&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param).length&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第四次比较中为什么str2没有进行组合？暂时还未解决该疑惑。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"normalize-方法\"><a href=\"#normalize-方法\" class=\"headerlink\" title=\"normalize()方法\"></a>normalize()方法</h2><p>参数如下，注意参数必须大写！</p>\n<ul>\n<li>NFC(default)。标准等价合成（Normalization Form Canonical Composition）。先规范分解，然后进行规范组合。</li>\n<li>NFD。标准等价分解（Normalization Form Canonical Decomposition）。规范分解。</li>\n<li>NFKC。兼容等价合成（Normalization Form Compatibility Composition）。先兼容性分解，然后进行规范组合。</li>\n<li>NFKD。兼容等价分解（Normalization Form Compatibility Decomposition）。兼容性分解。</li>\n</ul>\n<p>个人理解，针对字母后跟音标符号的组合，如<code>\\u004F\\u030C</code>，与一个标有音标符合的字符<code>\\u01D1</code>，属于<strong>规范等价</strong>，因此可以用NFC和NFD。<br>兼容等价（NFKC和NFKD）包含了规范等价，但比规范等价额外包含了<strong>兼容</strong>的部分，是规范等价的超集。若两个字符完全相同的组合，如<code>\\u0066\\u0066</code>，与他们的单个字符表现形式<code>\\uFB00</code>，他们的语义相同，则二者为兼容等价。可以使用规范化将二者变为同一形式。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><ol>\n<li><p>NFC和NFD比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'\\u01D1'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">'\\u004F\\u030C'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1的原始值（即赋予str1的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u01D1`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str1&#125;</span>,长度为<span class=\"subst\">$&#123;str1.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str2的原始值（即赋予str2的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u004F\\u030C`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str2&#125;</span>,长度为<span class=\"subst\">$&#123;str2.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1与str2是否相等？<span class=\"subst\">$&#123;str1 === str2&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = [&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">params.forEach(<span class=\"function\">(<span class=\"params\">cur,idx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;idx+<span class=\"number\">1</span>&#125;</span>. 对<span class=\"subst\">$&#123;cur.beNorm&#125;</span>进行<span class=\"subst\">$&#123;cur.param&#125;</span>规范化`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化后的<span class=\"subst\">$&#123;cur.beNorm&#125;</span>与<span class=\"subst\">$&#123;cur.beCompared&#125;</span>是否相等？<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param) === cur.beComparedStr&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的值分别为：<span class=\"subst\">$&#123;cur.beNormStr&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的长度分别为：<span class=\"subst\">$&#123;cur.beNormStr.length&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param).length&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NFKC和NFKD比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'\\uFB00'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">'\\u0066\\u0066'</span> <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1的原始值（即赋予str1的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u01D1`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str1&#125;</span>,长度为<span class=\"subst\">$&#123;str1.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str2的原始值（即赋予str2的值）为<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>.raw<span class=\"string\">`\\u004F\\u030C`</span>&#125;</span>，显示的值为<span class=\"subst\">$&#123;str2&#125;</span>,长度为<span class=\"subst\">$&#123;str2.length&#125;</span>`</span>);  <span class=\"comment\">// Ǒ</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`str1与str2是否相等？<span class=\"subst\">$&#123;str1 === str2&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = [&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKD'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beNormStr:str2,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beComparedStr:str1</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    param:<span class=\"string\">'NFKC'</span>,</span><br><span class=\"line\">    beNorm:<span class=\"string\">'str1'</span>,</span><br><span class=\"line\">    beNormStr:str1,</span><br><span class=\"line\">    beCompared:<span class=\"string\">'str2'</span>,</span><br><span class=\"line\">    beComparedStr:str2</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">params.forEach(<span class=\"function\">(<span class=\"params\">cur,idx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;idx+<span class=\"number\">1</span>&#125;</span>. 对<span class=\"subst\">$&#123;cur.beNorm&#125;</span>进行<span class=\"subst\">$&#123;cur.param&#125;</span>规范化`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化后的<span class=\"subst\">$&#123;cur.beNorm&#125;</span>与<span class=\"subst\">$&#123;cur.beCompared&#125;</span>是否相等？<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param) === cur.beComparedStr&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的值分别为：<span class=\"subst\">$&#123;cur.beNormStr&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`规范化前后<span class=\"subst\">$&#123;cur.beNorm&#125;</span>的长度分别为：<span class=\"subst\">$&#123;cur.beNormStr.length&#125;</span>,<span class=\"subst\">$&#123;cur.beNormStr.normalize(cur.param).length&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第四次比较中为什么str2没有进行组合？暂时还未解决该疑惑。</p>\n"},{"title":"ES6学习笔记（一）：let和const关键字的总结","date":"2020-03-23T06:03:50.000Z","description":"es6：let关键字的总结","_content":"\n## let总结\n\nlet关键字：其所声明的变量，只在let命令所在的代码块内有效。\n\n1. 暂时性死区（TDZ,Temporal Dead Zone），避免了使用var时出现的变量提升现象。\n2. 不允许重复声明。\n3. 在一些场景下取代了匿名立即执行函数（IIFE）。\n4. 结合块级作用域的用法。\n    * 块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n    * 使用let声明的变量，块外无法引用。\n    * 块内声明定义的函数，块外无法使用。（浏览器的实现有偏差）（应该避免在块级作用域内声明函数。在一定要声明函数的情况下，采用块级作用域的形式）\n5. 声明的全局变量，不属于顶层对象的属性\n\n## const总结\n\nconst关键字：声明只读常量。一旦声明，常量的值就不能改变。\n\n本质：变量指向的那个内存地址所保存的数据不得改动。\n\n1. 声明时必须初始化。\n2. 只在声明所在的块级作用域中有效。\n3. 存在暂时性死区现象。\n4. 不可重复声明。\n5. 声明的全局变量，不属于顶层对象的属性。\n","source":"_posts/es6/ES6：let和const关键字的总结.md","raw":"---\ntitle: ES6学习笔记（一）：let和const关键字的总结 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-23 14:03:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端, let] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: es6：let关键字的总结\n---\n\n## let总结\n\nlet关键字：其所声明的变量，只在let命令所在的代码块内有效。\n\n1. 暂时性死区（TDZ,Temporal Dead Zone），避免了使用var时出现的变量提升现象。\n2. 不允许重复声明。\n3. 在一些场景下取代了匿名立即执行函数（IIFE）。\n4. 结合块级作用域的用法。\n    * 块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n    * 使用let声明的变量，块外无法引用。\n    * 块内声明定义的函数，块外无法使用。（浏览器的实现有偏差）（应该避免在块级作用域内声明函数。在一定要声明函数的情况下，采用块级作用域的形式）\n5. 声明的全局变量，不属于顶层对象的属性\n\n## const总结\n\nconst关键字：声明只读常量。一旦声明，常量的值就不能改变。\n\n本质：变量指向的那个内存地址所保存的数据不得改动。\n\n1. 声明时必须初始化。\n2. 只在声明所在的块级作用域中有效。\n3. 存在暂时性死区现象。\n4. 不可重复声明。\n5. 声明的全局变量，不属于顶层对象的属性。\n","slug":"es6/ES6：let和const关键字的总结","published":1,"updated":"2020-08-17T09:15:03.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k90012ykrv2evgqfrp","content":"<h2 id=\"let总结\"><a href=\"#let总结\" class=\"headerlink\" title=\"let总结\"></a>let总结</h2><p>let关键字：其所声明的变量，只在let命令所在的代码块内有效。</p>\n<ol>\n<li>暂时性死区（TDZ,Temporal Dead Zone），避免了使用var时出现的变量提升现象。</li>\n<li>不允许重复声明。</li>\n<li>在一些场景下取代了匿名立即执行函数（IIFE）。</li>\n<li>结合块级作用域的用法。<ul>\n<li>块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</li>\n<li>使用let声明的变量，块外无法引用。</li>\n<li>块内声明定义的函数，块外无法使用。（浏览器的实现有偏差）（应该避免在块级作用域内声明函数。在一定要声明函数的情况下，采用块级作用域的形式）</li>\n</ul>\n</li>\n<li>声明的全局变量，不属于顶层对象的属性</li>\n</ol>\n<h2 id=\"const总结\"><a href=\"#const总结\" class=\"headerlink\" title=\"const总结\"></a>const总结</h2><p>const关键字：声明只读常量。一旦声明，常量的值就不能改变。</p>\n<p>本质：变量指向的那个内存地址所保存的数据不得改动。</p>\n<ol>\n<li>声明时必须初始化。</li>\n<li>只在声明所在的块级作用域中有效。</li>\n<li>存在暂时性死区现象。</li>\n<li>不可重复声明。</li>\n<li>声明的全局变量，不属于顶层对象的属性。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"let总结\"><a href=\"#let总结\" class=\"headerlink\" title=\"let总结\"></a>let总结</h2><p>let关键字：其所声明的变量，只在let命令所在的代码块内有效。</p>\n<ol>\n<li>暂时性死区（TDZ,Temporal Dead Zone），避免了使用var时出现的变量提升现象。</li>\n<li>不允许重复声明。</li>\n<li>在一些场景下取代了匿名立即执行函数（IIFE）。</li>\n<li>结合块级作用域的用法。<ul>\n<li>块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</li>\n<li>使用let声明的变量，块外无法引用。</li>\n<li>块内声明定义的函数，块外无法使用。（浏览器的实现有偏差）（应该避免在块级作用域内声明函数。在一定要声明函数的情况下，采用块级作用域的形式）</li>\n</ul>\n</li>\n<li>声明的全局变量，不属于顶层对象的属性</li>\n</ol>\n<h2 id=\"const总结\"><a href=\"#const总结\" class=\"headerlink\" title=\"const总结\"></a>const总结</h2><p>const关键字：声明只读常量。一旦声明，常量的值就不能改变。</p>\n<p>本质：变量指向的那个内存地址所保存的数据不得改动。</p>\n<ol>\n<li>声明时必须初始化。</li>\n<li>只在声明所在的块级作用域中有效。</li>\n<li>存在暂时性死区现象。</li>\n<li>不可重复声明。</li>\n<li>声明的全局变量，不属于顶层对象的属性。</li>\n</ol>\n"},{"title":"《HTTP下午茶》","date":"2017-06-14T14:30:50.000Z","description":"一本小书","_content":"\nHTTP协议的入门小书，全书通俗易读，辅以插图食用口味更佳。\n\n<!-- more -->\n\n传送门：https://www.kancloud.cn/kancloud/tealeaf-http/43837\n\n书中简要介绍了如下内容：\n\n* 如何通过网址如何上网\n\t* DNS\n\t* 客户端和服务器。\n* 无状态协议\n* URL\n* 抓包工具\n* HTTP请求\n\t* get请求\n\t* post请求\n\t* HTTP状态码\n* 如何构建有状态的web应用\n\t* session\n\t* cookies\n\t* ajax\n* WEB安全\n\t* HTTPS\n\t* 同源策略\n\t* 会话劫持\n\t* XSS攻击（会话劫持的对策）\n","source":"_posts/http/http_afternoon_tea.md","raw":"---\ntitle: 《HTTP下午茶》 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-06-14 22:30:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 读书笔记 #分类\ntags: [读书笔记, 前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 一本小书\n---\n\nHTTP协议的入门小书，全书通俗易读，辅以插图食用口味更佳。\n\n<!-- more -->\n\n传送门：https://www.kancloud.cn/kancloud/tealeaf-http/43837\n\n书中简要介绍了如下内容：\n\n* 如何通过网址如何上网\n\t* DNS\n\t* 客户端和服务器。\n* 无状态协议\n* URL\n* 抓包工具\n* HTTP请求\n\t* get请求\n\t* post请求\n\t* HTTP状态码\n* 如何构建有状态的web应用\n\t* session\n\t* cookies\n\t* ajax\n* WEB安全\n\t* HTTPS\n\t* 同源策略\n\t* 会话劫持\n\t* XSS攻击（会话劫持的对策）\n","slug":"http/http_afternoon_tea","published":1,"updated":"2020-08-17T09:14:39.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0k90013ykrvpollc0jy","content":"<p>HTTP协议的入门小书，全书通俗易读，辅以插图食用口味更佳。</p>\n<a id=\"more\"></a>\n<p>传送门：<a href=\"https://www.kancloud.cn/kancloud/tealeaf-http/43837\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/kancloud/tealeaf-http/43837</a></p>\n<p>书中简要介绍了如下内容：</p>\n<ul>\n<li>如何通过网址如何上网<ul>\n<li>DNS</li>\n<li>客户端和服务器。</li>\n</ul>\n</li>\n<li>无状态协议</li>\n<li>URL</li>\n<li>抓包工具</li>\n<li>HTTP请求<ul>\n<li>get请求</li>\n<li>post请求</li>\n<li>HTTP状态码</li>\n</ul>\n</li>\n<li>如何构建有状态的web应用<ul>\n<li>session</li>\n<li>cookies</li>\n<li>ajax</li>\n</ul>\n</li>\n<li>WEB安全<ul>\n<li>HTTPS</li>\n<li>同源策略</li>\n<li>会话劫持</li>\n<li>XSS攻击（会话劫持的对策）</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>HTTP协议的入门小书，全书通俗易读，辅以插图食用口味更佳。</p>","more":"<p>传送门：<a href=\"https://www.kancloud.cn/kancloud/tealeaf-http/43837\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/kancloud/tealeaf-http/43837</a></p>\n<p>书中简要介绍了如下内容：</p>\n<ul>\n<li>如何通过网址如何上网<ul>\n<li>DNS</li>\n<li>客户端和服务器。</li>\n</ul>\n</li>\n<li>无状态协议</li>\n<li>URL</li>\n<li>抓包工具</li>\n<li>HTTP请求<ul>\n<li>get请求</li>\n<li>post请求</li>\n<li>HTTP状态码</li>\n</ul>\n</li>\n<li>如何构建有状态的web应用<ul>\n<li>session</li>\n<li>cookies</li>\n<li>ajax</li>\n</ul>\n</li>\n<li>WEB安全<ul>\n<li>HTTPS</li>\n<li>同源策略</li>\n<li>会话劫持</li>\n<li>XSS攻击（会话劫持的对策）</li>\n</ul>\n</li>\n</ul>"},{"title":"Java lombok插件","date":"2017-06-14T14:30:50.000Z","description":null,"_content":"\nlombok是一个java库，可以在构建工具或编辑器中引用。这款插件能够使得我们在代码中，通过使用插件提供的注解，减少getter、setter等重复代码的编写。\n\n\n---\n\n常用的注解如下：\n\n### `@Data`\n`@Data`注解集成了一系列注解：`@ToString()`、`@EqualsAndHashCode`、`@Getter/@Setter`、`@RequiredArgsConstructor`。\n\\","source":"_posts/java/java lombok插件.md","raw":"---\ntitle: Java lombok插件 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-06-14 22:30:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: Java #分类\ntags: [Java插件] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n---\n\nlombok是一个java库，可以在构建工具或编辑器中引用。这款插件能够使得我们在代码中，通过使用插件提供的注解，减少getter、setter等重复代码的编写。\n\n\n---\n\n常用的注解如下：\n\n### `@Data`\n`@Data`注解集成了一系列注解：`@ToString()`、`@EqualsAndHashCode`、`@Getter/@Setter`、`@RequiredArgsConstructor`。\n\\","slug":"java/java lombok插件","published":1,"updated":"2020-08-17T09:15:53.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ka0014ykrvmsxw6w9f","content":"<p>lombok是一个java库，可以在构建工具或编辑器中引用。这款插件能够使得我们在代码中，通过使用插件提供的注解，减少getter、setter等重复代码的编写。</p>\n<hr>\n<p>常用的注解如下：</p>\n<h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"@Data\"></a><code>@Data</code></h3><p><code>@Data</code>注解集成了一系列注解：<code>@ToString()</code>、<code>@EqualsAndHashCode</code>、<code>@Getter/@Setter</code>、<code>@RequiredArgsConstructor</code>。<br>\\</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>lombok是一个java库，可以在构建工具或编辑器中引用。这款插件能够使得我们在代码中，通过使用插件提供的注解，减少getter、setter等重复代码的编写。</p>\n<hr>\n<p>常用的注解如下：</p>\n<h3 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"@Data\"></a><code>@Data</code></h3><p><code>@Data</code>注解集成了一系列注解：<code>@ToString()</code>、<code>@EqualsAndHashCode</code>、<code>@Getter/@Setter</code>、<code>@RequiredArgsConstructor</code>。<br>\\</p>\n"},{"title":"关于Attribute和property的区别","date":"2017-08-01T02:39:50.000Z","description":"关于attribute和property的区别","_content":"\n阅读提示：\n\n1. 本篇文章中的attribute，全部翻译为“属性”。而property，全部翻译为“特性”。\n2. 点表示法指js对象通过“.”获取特性，方括号表示法指js对象通过“[]”获取特性。\n\n<!-- more -->\n\n## 抛砖\n\n前段时间，有位学长问了我一个题目：在html文档中，给一个标签添加了一个属性，但是js通过点表示法无法对其进行引用。这是为什么？\n\n当时我是脸上是大写的“懵”字。于是乎写了段代码进行尝试，如图：\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute1.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute2.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute3.png)\n\n点击标题后，并没有返回value的值，而是undefined。结果很是出人意料。\n再做一次实验，这回获取的是DOM对象的id，代码及结果如下\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute4.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute5.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute6.png)\n\n对比两次的结果，是不是感觉非常奇怪？\n\n## 引玉\n\n关系到点表示法、括号表示法与”getAttribute”和”Attribute”与”Property”的区别了。\n\n首先，为什么取不到value属性的值呢？\n\n在入门的时候，我们应该都学过这两种操作方式，对一个对象用点表示法或方括号表示法，表示获取该对象的属性。对象的getAttribute方法，也可获取对象的属性。但是，此属性非彼属性，一个是Attribute，另一个是property。\n\n那么，为什么给\"<\\h3>\"标签设置的value，只添加了Attributes中value的值呢？\n\n## 尝试\n\n打开我们的神器——开发人员工具，选择<h3>的DOM节点后，在Elements选项卡下找到Properties，如图：\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute7.png)\n\n仔细观察上边的键值对，是不是有一个叫做attributes的键？\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute8.png)\n\n而我们的id、value都在里边有所显示。继续展开0:id、1:value来一探究竟。\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute9.png)\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute10.png)\n\n可以发现，二者展开后都具有nodeValue字段，并且他们的值为html标签中的属性值。\n\n但是在properties中，我们可以找到名为id的键，且其绑定值为myHeader，而无法找到名叫value的键。可见，我们在html标签中声明的id，同时存在于property和attribute中，而value只在attribute中具有。\n\n之所以会出现“抛砖”中的现象，是因为点表示法和方括号表示法，获取到的是对象的property，而getAttribute方法获取的是对象的Attributes。\n\n## 疑问\n\n#### Question:\n\n为什么在html标签中声明的不同属性，一个存在于对象的property，而另一个在对象的property和attribute中都存在呢？\n\n#### Answer:\n\n区分以下几种情况：\n\n1. 在html标签申明属性。\n    1. 若该属性在对象的property中存在，properties和attributes二者都可能会更新（若有特殊限制，如dir，对于值的格式有要求，则有可能在property中不会更新）\n    2. 若属性不存在对象的property中，则只会在attributes中刷新。\n2. 通过js添加属性\n    1. 如果是通过使用点表示法和方括号表示法添加属性，则只会在properties中添加，而不会在attributes中添加。\n    ![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute11.png)\n    2. 同理，通过对对象使用setAttributes方法添加属性，则会在对象的attributes中添加该属性，在对象的property有可能添加该属性（若该属性之前存在于property中，且对该属性的值如果有特殊要求，本次赋值对其满足，则可添加）。\n\n\n## 总结\n\n让我们再来回顾一下本篇文章中所涉及的知识点：\n\n1. 对象使用点表示法和括号表示法与使用“getAttribute()”方法有何不同。\n2. 如何通过js或开发人员工具查看对象的properties和attributes。\n3. 如何通过js对对象的property和attribute进行设置。\n","source":"_posts/js基础/Attribute‘n'property.md","raw":"---\ntitle:  关于Attribute和property的区别 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-08-01 10:39:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 关于attribute和property的区别\n---\n\n阅读提示：\n\n1. 本篇文章中的attribute，全部翻译为“属性”。而property，全部翻译为“特性”。\n2. 点表示法指js对象通过“.”获取特性，方括号表示法指js对象通过“[]”获取特性。\n\n<!-- more -->\n\n## 抛砖\n\n前段时间，有位学长问了我一个题目：在html文档中，给一个标签添加了一个属性，但是js通过点表示法无法对其进行引用。这是为什么？\n\n当时我是脸上是大写的“懵”字。于是乎写了段代码进行尝试，如图：\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute1.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute2.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute3.png)\n\n点击标题后，并没有返回value的值，而是undefined。结果很是出人意料。\n再做一次实验，这回获取的是DOM对象的id，代码及结果如下\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute4.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute5.png)\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute6.png)\n\n对比两次的结果，是不是感觉非常奇怪？\n\n## 引玉\n\n关系到点表示法、括号表示法与”getAttribute”和”Attribute”与”Property”的区别了。\n\n首先，为什么取不到value属性的值呢？\n\n在入门的时候，我们应该都学过这两种操作方式，对一个对象用点表示法或方括号表示法，表示获取该对象的属性。对象的getAttribute方法，也可获取对象的属性。但是，此属性非彼属性，一个是Attribute，另一个是property。\n\n那么，为什么给\"<\\h3>\"标签设置的value，只添加了Attributes中value的值呢？\n\n## 尝试\n\n打开我们的神器——开发人员工具，选择<h3>的DOM节点后，在Elements选项卡下找到Properties，如图：\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute7.png)\n\n仔细观察上边的键值对，是不是有一个叫做attributes的键？\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute8.png)\n\n而我们的id、value都在里边有所显示。继续展开0:id、1:value来一探究竟。\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute9.png)\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute10.png)\n\n可以发现，二者展开后都具有nodeValue字段，并且他们的值为html标签中的属性值。\n\n但是在properties中，我们可以找到名为id的键，且其绑定值为myHeader，而无法找到名叫value的键。可见，我们在html标签中声明的id，同时存在于property和attribute中，而value只在attribute中具有。\n\n之所以会出现“抛砖”中的现象，是因为点表示法和方括号表示法，获取到的是对象的property，而getAttribute方法获取的是对象的Attributes。\n\n## 疑问\n\n#### Question:\n\n为什么在html标签中声明的不同属性，一个存在于对象的property，而另一个在对象的property和attribute中都存在呢？\n\n#### Answer:\n\n区分以下几种情况：\n\n1. 在html标签申明属性。\n    1. 若该属性在对象的property中存在，properties和attributes二者都可能会更新（若有特殊限制，如dir，对于值的格式有要求，则有可能在property中不会更新）\n    2. 若属性不存在对象的property中，则只会在attributes中刷新。\n2. 通过js添加属性\n    1. 如果是通过使用点表示法和方括号表示法添加属性，则只会在properties中添加，而不会在attributes中添加。\n    ![啊图片](http://opqksc9nz.bkt.clouddn.com/attribute11.png)\n    2. 同理，通过对对象使用setAttributes方法添加属性，则会在对象的attributes中添加该属性，在对象的property有可能添加该属性（若该属性之前存在于property中，且对该属性的值如果有特殊要求，本次赋值对其满足，则可添加）。\n\n\n## 总结\n\n让我们再来回顾一下本篇文章中所涉及的知识点：\n\n1. 对象使用点表示法和括号表示法与使用“getAttribute()”方法有何不同。\n2. 如何通过js或开发人员工具查看对象的properties和attributes。\n3. 如何通过js对对象的property和attribute进行设置。\n","slug":"js基础/Attribute‘n'property","published":1,"updated":"2020-08-17T09:13:54.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ka0015ykrvfrhy5n4k","content":"<p>阅读提示：</p>\n<ol>\n<li>本篇文章中的attribute，全部翻译为“属性”。而property，全部翻译为“特性”。</li>\n<li>点表示法指js对象通过“.”获取特性，方括号表示法指js对象通过“[]”获取特性。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"抛砖\"><a href=\"#抛砖\" class=\"headerlink\" title=\"抛砖\"></a>抛砖</h2><p>前段时间，有位学长问了我一个题目：在html文档中，给一个标签添加了一个属性，但是js通过点表示法无法对其进行引用。这是为什么？</p>\n<p>当时我是脸上是大写的“懵”字。于是乎写了段代码进行尝试，如图：<br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute1.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute2.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute3.png\" alt=\"啊图片\"></p>\n<p>点击标题后，并没有返回value的值，而是undefined。结果很是出人意料。<br>再做一次实验，这回获取的是DOM对象的id，代码及结果如下</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute4.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute5.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute6.png\" alt=\"啊图片\"></p>\n<p>对比两次的结果，是不是感觉非常奇怪？</p>\n<h2 id=\"引玉\"><a href=\"#引玉\" class=\"headerlink\" title=\"引玉\"></a>引玉</h2><p>关系到点表示法、括号表示法与”getAttribute”和”Attribute”与”Property”的区别了。</p>\n<p>首先，为什么取不到value属性的值呢？</p>\n<p>在入门的时候，我们应该都学过这两种操作方式，对一个对象用点表示法或方括号表示法，表示获取该对象的属性。对象的getAttribute方法，也可获取对象的属性。但是，此属性非彼属性，一个是Attribute，另一个是property。</p>\n<p>那么，为什么给”&lt;\\h3&gt;”标签设置的value，只添加了Attributes中value的值呢？</p>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><p>打开我们的神器——开发人员工具，选择</p><h3>的DOM节点后，在Elements选项卡下找到Properties，如图：<p></p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute7.png\" alt=\"啊图片\"></p>\n<p>仔细观察上边的键值对，是不是有一个叫做attributes的键？</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute8.png\" alt=\"啊图片\"></p>\n<p>而我们的id、value都在里边有所显示。继续展开0:id、1:value来一探究竟。</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute9.png\" alt=\"啊图片\"></p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute10.png\" alt=\"啊图片\"></p>\n<p>可以发现，二者展开后都具有nodeValue字段，并且他们的值为html标签中的属性值。</p>\n<p>但是在properties中，我们可以找到名为id的键，且其绑定值为myHeader，而无法找到名叫value的键。可见，我们在html标签中声明的id，同时存在于property和attribute中，而value只在attribute中具有。</p>\n<p>之所以会出现“抛砖”中的现象，是因为点表示法和方括号表示法，获取到的是对象的property，而getAttribute方法获取的是对象的Attributes。</p>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h4><p>为什么在html标签中声明的不同属性，一个存在于对象的property，而另一个在对象的property和attribute中都存在呢？</p>\n<h4 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer:\"></a>Answer:</h4><p>区分以下几种情况：</p>\n<ol>\n<li>在html标签申明属性。<ol>\n<li>若该属性在对象的property中存在，properties和attributes二者都可能会更新（若有特殊限制，如dir，对于值的格式有要求，则有可能在property中不会更新）</li>\n<li>若属性不存在对象的property中，则只会在attributes中刷新。</li>\n</ol>\n</li>\n<li>通过js添加属性<ol>\n<li>如果是通过使用点表示法和方括号表示法添加属性，则只会在properties中添加，而不会在attributes中添加。<br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute11.png\" alt=\"啊图片\"></li>\n<li>同理，通过对对象使用setAttributes方法添加属性，则会在对象的attributes中添加该属性，在对象的property有可能添加该属性（若该属性之前存在于property中，且对该属性的值如果有特殊要求，本次赋值对其满足，则可添加）。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>让我们再来回顾一下本篇文章中所涉及的知识点：</p>\n<ol>\n<li>对象使用点表示法和括号表示法与使用“getAttribute()”方法有何不同。</li>\n<li>如何通过js或开发人员工具查看对象的properties和attributes。</li>\n<li>如何通过js对对象的property和attribute进行设置。</li>\n</ol>\n</h3>","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>阅读提示：</p>\n<ol>\n<li>本篇文章中的attribute，全部翻译为“属性”。而property，全部翻译为“特性”。</li>\n<li>点表示法指js对象通过“.”获取特性，方括号表示法指js对象通过“[]”获取特性。</li>\n</ol>","more":"<h2 id=\"抛砖\"><a href=\"#抛砖\" class=\"headerlink\" title=\"抛砖\"></a>抛砖</h2><p>前段时间，有位学长问了我一个题目：在html文档中，给一个标签添加了一个属性，但是js通过点表示法无法对其进行引用。这是为什么？</p>\n<p>当时我是脸上是大写的“懵”字。于是乎写了段代码进行尝试，如图：<br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute1.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute2.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute3.png\" alt=\"啊图片\"></p>\n<p>点击标题后，并没有返回value的值，而是undefined。结果很是出人意料。<br>再做一次实验，这回获取的是DOM对象的id，代码及结果如下</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute4.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute5.png\" alt=\"啊图片\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute6.png\" alt=\"啊图片\"></p>\n<p>对比两次的结果，是不是感觉非常奇怪？</p>\n<h2 id=\"引玉\"><a href=\"#引玉\" class=\"headerlink\" title=\"引玉\"></a>引玉</h2><p>关系到点表示法、括号表示法与”getAttribute”和”Attribute”与”Property”的区别了。</p>\n<p>首先，为什么取不到value属性的值呢？</p>\n<p>在入门的时候，我们应该都学过这两种操作方式，对一个对象用点表示法或方括号表示法，表示获取该对象的属性。对象的getAttribute方法，也可获取对象的属性。但是，此属性非彼属性，一个是Attribute，另一个是property。</p>\n<p>那么，为什么给”&lt;\\h3&gt;”标签设置的value，只添加了Attributes中value的值呢？</p>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><p>打开我们的神器——开发人员工具，选择</p><h3>的DOM节点后，在Elements选项卡下找到Properties，如图：<p></p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute7.png\" alt=\"啊图片\"></p>\n<p>仔细观察上边的键值对，是不是有一个叫做attributes的键？</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute8.png\" alt=\"啊图片\"></p>\n<p>而我们的id、value都在里边有所显示。继续展开0:id、1:value来一探究竟。</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute9.png\" alt=\"啊图片\"></p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute10.png\" alt=\"啊图片\"></p>\n<p>可以发现，二者展开后都具有nodeValue字段，并且他们的值为html标签中的属性值。</p>\n<p>但是在properties中，我们可以找到名为id的键，且其绑定值为myHeader，而无法找到名叫value的键。可见，我们在html标签中声明的id，同时存在于property和attribute中，而value只在attribute中具有。</p>\n<p>之所以会出现“抛砖”中的现象，是因为点表示法和方括号表示法，获取到的是对象的property，而getAttribute方法获取的是对象的Attributes。</p>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h4><p>为什么在html标签中声明的不同属性，一个存在于对象的property，而另一个在对象的property和attribute中都存在呢？</p>\n<h4 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer:\"></a>Answer:</h4><p>区分以下几种情况：</p>\n<ol>\n<li>在html标签申明属性。<ol>\n<li>若该属性在对象的property中存在，properties和attributes二者都可能会更新（若有特殊限制，如dir，对于值的格式有要求，则有可能在property中不会更新）</li>\n<li>若属性不存在对象的property中，则只会在attributes中刷新。</li>\n</ol>\n</li>\n<li>通过js添加属性<ol>\n<li>如果是通过使用点表示法和方括号表示法添加属性，则只会在properties中添加，而不会在attributes中添加。<br><img src=\"http://opqksc9nz.bkt.clouddn.com/attribute11.png\" alt=\"啊图片\"></li>\n<li>同理，通过对对象使用setAttributes方法添加属性，则会在对象的attributes中添加该属性，在对象的property有可能添加该属性（若该属性之前存在于property中，且对该属性的值如果有特殊要求，本次赋值对其满足，则可添加）。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>让我们再来回顾一下本篇文章中所涉及的知识点：</p>\n<ol>\n<li>对象使用点表示法和括号表示法与使用“getAttribute()”方法有何不同。</li>\n<li>如何通过js或开发人员工具查看对象的properties和attributes。</li>\n<li>如何通过js对对象的property和attribute进行设置。</li>\n</ol>\n</h3>"},{"title":"《你不知道的JavaScript 上册》第一部分","date":"2020-01-31T15:47:30.000Z","description":"你不知道的JavaScript","_content":"\n第一部分：作用域和闭包\n\n<!-- more -->\n\n# 目录\n\n1. [作用域是什么](#chapter1)\n    1.1. [编译原理](#1.1)\n    1.2. [理解作用域](#1.2)\n2. [词法作用域](#chapter2)\n    2.1. [词法阶段](#2.1)\n    2.2. [欺骗词法](#2.2)\n3. [函数作用域和块作用域](#chapter3)\n    3.1. [函数中的作用域](#3.1)\n    3.2. [隐藏内部实现](#3.2)\n    3.3. [块作用域](#3.3)\n4. [提升](#chapter4)\n5. [作用域闭包](#chapter5)\n    5.2. [实质问题](#5.2)\n    5.4. [循环和闭包](#5.4)\n    5.5. [模块](#5.5)\n6. [附录A](#appendixA)\n7. [附录B 块作用域的替代方案](#appendixB)\n    B.1. [Traceur](#B.1)\n    B.2. [隐式和显式作用域](#B.2)\n    B.3. [性能](#B.3)\n8. [附录C this词法](#appendixC)\n\n---\n\n## <div id=\"chapter1\">第一章 作用域是什么</div>\n\n### <div id=\"1.1\">1.1 编译原理</div>\n* 编译代码的三个步骤\n    1. 分词/词法分析：将字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。\n    2. 解析/语法分析：将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。\n    3. 代码生成：将 AST 转换为可执行代码的过程称被称为代码生成。\n编译器编译完毕后，由引擎执行生成的代码。\n\n### <div id=\"1.2\">1.2 理解作用域</div>\n* LHS查询：变量出现在赋值操作的左侧时进行的查询。试图找到变量的容器本身，`set`操作，当执行非法操作时，比如对一个没有声明的变量进行赋值，非严格模式下的引擎会自动声明该变量，而非严格模式会报错`ReferenceError`。\n* RHS查询：变量出现在赋值操作的右侧时进行的查询。retrieve his source value，取到它的值，类似`get`操作，可能会引发两种错误：1. `ReferenceError`同作用域判别失败相关 2. `TypeError`则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\n\n## <div id=\"chapter2\">第二章 词法作用域</div>\n作用域的两种工作模型：\n* 词法作用域。\n* 动态作用域。\nJavaScript采用的是词法作用域。\n\n### <div id=\"2.1\">2.1 词法阶段</div>\n* 标识符查找：从当前作用域，逐级向上，找到为止。\n    * 引申：遮蔽效应(内部的标识符“遮蔽”了外部的标识符)\n* 全局变量与全局对象的关系：全局变量会自动成为全局对象(比如浏览器中的 window 对象)的属性。\n\n### <div id=\"2.2\">2.2 欺骗词法</div>\n欺骗词法即在运行时修改词法的作用域。\n* 注意：不推荐进行欺骗词法。\n    * 原因1：作用域会导致性能“下降”。引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。\n    * 原因2：会被严格模式所影响(限制)。`with`被完全禁止，而在保留核心功能的前提下，间接或非安全地使用`eval(..)`也被禁止了。\n\n* 欺骗词法的两种方式：\n    * eval函数：eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。\n        * 注意：在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。\n    * with关键字：重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。\n        * 注意：尽管`with`块可以将一个对象处理为词法作用域，但是这个块内部正常的`var`声明并不会被限制在这个块的作用域中，而是被添加到`with`所处的函数作用域中。使用let即可避免污染函数作用域。\n\n## <div id=\"chapter3\">第三章 函数作用域和块作用域</div>\n\n### <div id=\"3.1\">3.1 函数中的作用域</div>\n* 函数作用域的概念：属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。\n\n### <div id=\"3.2\">3.2 隐藏内部实现</div>\n* 为什么要隐藏内部实现？\n    * 最小特权原则（最小授权原则、最小暴露原则）：软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n    * 规避冲突。避免命名冲突，污染全局作用域。\n* 隐藏内部实现的原理：将变量和函数用函数包裹起来，将其放置在函数作用域中。\n* 隐藏内部实现的方法\n    * 全局命名空间。在全局作用域中声明一个独特的变量，作为库的命名空间，所有需要暴露给外界的功能都是其属性。参考jquery（使用$符号），d3.js（使用d3）。\n    * 模块管理。使用依赖管理器，将库的标识符显示地导入到特定的作用域中。\n    * IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression)。（具名函数的 IIFE 是最佳实践）\n* 函数表达式和函数声明的辨析\n    * 函数表达式：函数被包含在一对 ( ) 括号内部，因此成为了一个表达式。\n    * 函数声明：第一个单词必须是function。\n    * 函数表达式可以是匿名的，而函数声明则不可以省略函数名。始终给函数表达式命名是一个最佳实践。\n* IIFE的进阶用法\n    * 把它们当作函数调用并传递参数进去。\n    * 将一个参数命名为 undefined，但是在对应的位置不传入任何值，这样就可以 保证在代码块中 undefined 标识符的值真的是 undefined。\n    * 倒置代码的运行顺序。\n\n### <div id=\"3.3\">3.3 块作用域</div>\n* 形式上的块作用域，实际上并不是块作用域的写法，会导致变量污染到整个函数作用域。\n```\n    var foo = true;\n    if (foo) {\n        var bar = foo * 2;\n        bar = something( bar ); console.log( bar );\n    }\n```\n* 块作用域实现的几种方法\n    * with。用 with 从对象中创建出的作用域仅在 with 声明中而非外 部作用域中有效。\n    * try/catch。JavaScript 的 ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量（catch的实参？）仅在 catch 内部有效。如果在catch的代码块中使用var声明变量，在函数作用域中仍然能获取到声明的变量。\n    * let。ES6引入的新关键字，实现块作用域的最好方式。\n    * const。ES6引入的新关键字，同样可以实现块作用域，但变量的值不可以更改。\n* 块作用域可以将无用的变量进行垃圾回收。\n\n## <div id=\"chapter4\">第四章 提升</div>\n变量声明在作用域中出现的位置不同，会导致不同的影响。\n* 提升的本质：代码的执行分为两个阶段：编译阶段和执行阶段。编译阶段编译器找到所有的声明，并用合适的作用域将它们关联起来。执行阶段引擎会直接执行代码。\n* 提升的对象：只有声明本身会被提升（无论是变量声明还是函数声明），而赋值或其他运行逻辑会留在原地。\n* 提升需要注意的点：\n    * 即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。\n    * 函数会首先被提升，然后才是变量。\n    * 函数会首先被提升，然后才是变量。\n    * 尽量避免重复声明。\n\n## <div id=\"chapter5\">第五章 作用域闭包</div>\n函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在JavaScript，函数在每次创建时生成闭包。（from mdn）\n\n### <div id=\"5.2\">5.2 实质问题</div>\n* 下面的这段代码清晰地展示了什么叫闭包：\n```\n    function foo() { \n        var a = 2;\n        function bar() { \n            console.log( a );\n        }\n        \n        return bar; \n    }    \n    var baz = foo();\n    baz(); // 2 —— 朋友，这就是闭包的效果。\n```\n\n### <div id=\"5.4\">5.4 循环和闭包</div>\n* 想要实现每隔一秒钟，按顺序打印出`1 2 3 4 5`。\n    * 代码不能写成如下的形式，打印的结果会是每隔一秒钟输出一个6，原因是setTimeOut的回调函数是在循环结束了之后才执行。\n    ```\n    for (var i=1; i<=5; i++) { \n        setTimeout( function timer() {\n        console.log( i ); }, i*1000 );\n    }\n    ```\n    * 代码可以写成如下形式：\n        * 第一种方式，通过IIFE，创建新的作用域，并在新的作用域中记录循环时的值：\n        ```\n        for (var i=1; i<=5; i++) { (function(j) {\n            setTimeout( function timer() { console.log( j );\n                }, j*1000 );\n            })( i );\n        }\n        ```\n        * 第二种方式，使用闭包的块作用域：\n        ```\n            for (let i=1; i<=5; i++) { \n                setTimeout( function timer() {\n                console.log( i ); }, i*1000 );\n            }\n        ```\n* 模块模式\n```\n    function CoolModule() {\n        var something = \"cool\";\n        var another = [1, 2, 3];\n        \n        function doSomething() { \n            console.log( something );\n        }\n        function doAnother() {\n            console.log( another.join( \" ! \" ) );\n        }\n        \n        return {\n            doSomething: doSomething, \n            doAnother: doAnother\n        }; \n    }\n    var foo = CoolModule(); \n    foo.doSomething(); // cool\n    foo.doAnother(); // 1 ! 2 ! 3\n```\n* 闭包经模块模式稍加改进后实现的单例模式：\n```\n    var foo = (function CoolModule() { var something = \"cool\";\n        var another = [1, 2, 3];\n        function doSomething() { \n            console.log( something );\n        }\n        function doAnother() {\n            console.log( another.join( \" ! \" ) );\n        }\n        \n        return {\n            doSomething: doSomething, \n            doAnother: doAnother\n        }; \n    })();\n    foo.doSomething(); // cool \n    foo.doAnother(); // 1 ! 2 ! 3\n```\n### <div id=\"5.5\">5.5 模块</div>\n模块有两个主要特征:\n1. 为创建内部作用域而调用了一个包装函数;\n2. 包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n### 5.5.1 现代的模块机制\n* 一个模块管理器\n```\n    var MyModules = (function Manager() {\n        var modules = {};\n        \n        function define(name, deps, impl) {\n            for (var i=0; i<deps.length; i++) {\n                deps[i] = modules[deps[i]];\n            }\n            modules[name] = impl.apply( impl, deps ); \n        }\n        \n        function get(name) { \n            return modules[name];\n        }\n        \n        return {\n            define: define,\n            get: get \n        };\n    })();\n```\n\n* 使用模块管理器来定义模块\n```\n    MyModules.define( \"bar\", [], function() { \n        function hello(who) {\n            return \"Let me introduce: \" + who; \n        }\n        \n        return {\n            hello: hello\n        }; \n    });\n\n    MyModules.define( \"foo\", [\"bar\"], function(bar) { \n        var hungry = \"hippo\";\n        function awesome() {\n            console.log( bar.hello( hungry ).toUpperCase() );\n        }\n        \n        return {\n            awesome: awesome\n        }; \n    });\n    \n    var bar = MyModules.get( \"bar\" );\n    var foo = MyModules.get( \"foo\" ); \n    console.log( bar.hello( \"hippo\" )); // Let me introduce: hippo \n    foo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n\n\n\n### 5.5.2 未来的模块机制\n* bar.js\n```\n    function hello(who) {\n        return \"Let me introduce: \" + who;\n    }\n\n    export hello;\n```\n* foo.js\n```\n    // 仅从 \"bar\" 模块导入 hello() import hello from \"bar\";\n    var hungry = \"hippo\";\n    function awesome() { \n        sconsole.log(hello( hungry ).toUpperCase() );\n    }\n    \n    export awesome;\n```\n* baz.js,导入完整的 \"foo\" 和 \"bar\" 模块\n```\n    module foo from \"foo\"; \n    module bar from \"bar\";\n    \n    console.log(\n        bar.hello( \"rhino\" )\n    ); // Let me introduce: rhino \n    \n    foo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n* import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。\n* module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。\n* export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。\n* 这些操作可以在模块定义中根据需要使用任意多次。\n\n## <div id=\"appendixA\">附录A 动态作用域</div>\n动态作用域和词法作用域的区别如下：\n* 词法作用域，关心函数是在何处声明以及如何声明。\n* 词法作用域的定义过程发生在书写代码的阶段。\n* 动态作用域，关心函数是如何调用的、从何处调用的。\n* 动态作用域在运行时才被动态定义。\n\n书中通过举例，比较了动态作用域和静态作用域之间的区别。\n\n动态作用域的代码调用：\n```\nfunction foo() {\n    console.log( a ); // 3(不是 2 !)\n}\n\nfunction bar() { \n    var a = 3;\n    foo(); \n}\n\nvar a = 2;\nbar();\n```\n\n静态作用域的代码调用：\n```\nfunction foo() { \n    console.log( a ); // 2\n}\nfunction bar() { \n    var a = 3;\n    foo(); \n}\n\nvar a = 2; \nbar();\n```\n\n## <div id=\"appendixB\">附录B 块作用域的替代方案</div>\n### <div id=\"B.1\">B.1 Traceur</div>\n块作用域的替代方案：\n* try catch。代码丑陋，但这是一种使不兼容es6的代码使用块作用域的一个手段。通常在代码中按照es6的块作用域方法去写，再由特定的工具（比如traceur）对块作用域转换为类似形式。\n\n### <div id=\"B.2\">B.2 隐式和显式作用域</div>\n在第三章曾经提到过：\n\n> 用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。在开发和修改代码的过 程中，如果没有密切关注哪些块作用域中有绑定的变量，并且习惯性地移动这些块或者将 其包含在其他的块中，就会导致代码变得混乱。\n\n显式作用域的好处：\n* 显式作用域，作用域更加突出，\n* 显式作用域，在代码重构时表现得更加健壮。\n\n在第三章中提出的由隐式作用域变为显式作用域的解决方案是在隐式作用域的周围添加大括号。还有一种方案，通过let声明，也可以显式地表明一块作用域，代码如下：\n```\nlet (a = 2) {\n    console.log( a ); // 2\n}\n\nconsole.log( a ); // ReferenceError\n```\n\n但是**注意：let 声明并不包含在 ES6 中。**\n\n使用es6语法的方案，方案一，仍然使用大括号。\n```\n/*let*/ { \n    let a = 2; \n    console.log( a );\n}\n\nconsole.log( a ); // ReferenceError\n\n```\n\n方案二，通过工具，把自己编写的let声明，转换为es6语法，即使用大括号围住显式作用域。\n\n（感觉有点太麻烦了，还不如直接用隐式的作用域或者在不明显的地方用大括号。）\n\n### <div id=\"B.3\">B.3 性能</div>\n* try catch的性能很差。\n* 什么时候使用块作用域？\n    * 你是否想要块作用域?如果你想要，上述的内容可以帮助你。如果不想要，继续使用 var 来写代码就好了!\n\n### <div id=\"appendixC\">附录C this词法</div>\n* 箭头函数不仅仅意味着少些代码。\n* 不建议箭头函数和词法作用域混用。\n* 建议在使用this的地方使用bind。（bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 from mdn）。","source":"_posts/js基础/《你不知道的JavaScript 上卷》第一部分.md","raw":"---\ntitle: 《你不知道的JavaScript 上册》第一部分 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-01-31 23:47:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 读书笔记 #分类\n\ntags: [读书笔记, 前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 你不知道的JavaScript\n\n---\n\n第一部分：作用域和闭包\n\n<!-- more -->\n\n# 目录\n\n1. [作用域是什么](#chapter1)\n    1.1. [编译原理](#1.1)\n    1.2. [理解作用域](#1.2)\n2. [词法作用域](#chapter2)\n    2.1. [词法阶段](#2.1)\n    2.2. [欺骗词法](#2.2)\n3. [函数作用域和块作用域](#chapter3)\n    3.1. [函数中的作用域](#3.1)\n    3.2. [隐藏内部实现](#3.2)\n    3.3. [块作用域](#3.3)\n4. [提升](#chapter4)\n5. [作用域闭包](#chapter5)\n    5.2. [实质问题](#5.2)\n    5.4. [循环和闭包](#5.4)\n    5.5. [模块](#5.5)\n6. [附录A](#appendixA)\n7. [附录B 块作用域的替代方案](#appendixB)\n    B.1. [Traceur](#B.1)\n    B.2. [隐式和显式作用域](#B.2)\n    B.3. [性能](#B.3)\n8. [附录C this词法](#appendixC)\n\n---\n\n## <div id=\"chapter1\">第一章 作用域是什么</div>\n\n### <div id=\"1.1\">1.1 编译原理</div>\n* 编译代码的三个步骤\n    1. 分词/词法分析：将字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。\n    2. 解析/语法分析：将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。\n    3. 代码生成：将 AST 转换为可执行代码的过程称被称为代码生成。\n编译器编译完毕后，由引擎执行生成的代码。\n\n### <div id=\"1.2\">1.2 理解作用域</div>\n* LHS查询：变量出现在赋值操作的左侧时进行的查询。试图找到变量的容器本身，`set`操作，当执行非法操作时，比如对一个没有声明的变量进行赋值，非严格模式下的引擎会自动声明该变量，而非严格模式会报错`ReferenceError`。\n* RHS查询：变量出现在赋值操作的右侧时进行的查询。retrieve his source value，取到它的值，类似`get`操作，可能会引发两种错误：1. `ReferenceError`同作用域判别失败相关 2. `TypeError`则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\n\n## <div id=\"chapter2\">第二章 词法作用域</div>\n作用域的两种工作模型：\n* 词法作用域。\n* 动态作用域。\nJavaScript采用的是词法作用域。\n\n### <div id=\"2.1\">2.1 词法阶段</div>\n* 标识符查找：从当前作用域，逐级向上，找到为止。\n    * 引申：遮蔽效应(内部的标识符“遮蔽”了外部的标识符)\n* 全局变量与全局对象的关系：全局变量会自动成为全局对象(比如浏览器中的 window 对象)的属性。\n\n### <div id=\"2.2\">2.2 欺骗词法</div>\n欺骗词法即在运行时修改词法的作用域。\n* 注意：不推荐进行欺骗词法。\n    * 原因1：作用域会导致性能“下降”。引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。\n    * 原因2：会被严格模式所影响(限制)。`with`被完全禁止，而在保留核心功能的前提下，间接或非安全地使用`eval(..)`也被禁止了。\n\n* 欺骗词法的两种方式：\n    * eval函数：eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。\n        * 注意：在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。\n    * with关键字：重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。\n        * 注意：尽管`with`块可以将一个对象处理为词法作用域，但是这个块内部正常的`var`声明并不会被限制在这个块的作用域中，而是被添加到`with`所处的函数作用域中。使用let即可避免污染函数作用域。\n\n## <div id=\"chapter3\">第三章 函数作用域和块作用域</div>\n\n### <div id=\"3.1\">3.1 函数中的作用域</div>\n* 函数作用域的概念：属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。\n\n### <div id=\"3.2\">3.2 隐藏内部实现</div>\n* 为什么要隐藏内部实现？\n    * 最小特权原则（最小授权原则、最小暴露原则）：软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n    * 规避冲突。避免命名冲突，污染全局作用域。\n* 隐藏内部实现的原理：将变量和函数用函数包裹起来，将其放置在函数作用域中。\n* 隐藏内部实现的方法\n    * 全局命名空间。在全局作用域中声明一个独特的变量，作为库的命名空间，所有需要暴露给外界的功能都是其属性。参考jquery（使用$符号），d3.js（使用d3）。\n    * 模块管理。使用依赖管理器，将库的标识符显示地导入到特定的作用域中。\n    * IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression)。（具名函数的 IIFE 是最佳实践）\n* 函数表达式和函数声明的辨析\n    * 函数表达式：函数被包含在一对 ( ) 括号内部，因此成为了一个表达式。\n    * 函数声明：第一个单词必须是function。\n    * 函数表达式可以是匿名的，而函数声明则不可以省略函数名。始终给函数表达式命名是一个最佳实践。\n* IIFE的进阶用法\n    * 把它们当作函数调用并传递参数进去。\n    * 将一个参数命名为 undefined，但是在对应的位置不传入任何值，这样就可以 保证在代码块中 undefined 标识符的值真的是 undefined。\n    * 倒置代码的运行顺序。\n\n### <div id=\"3.3\">3.3 块作用域</div>\n* 形式上的块作用域，实际上并不是块作用域的写法，会导致变量污染到整个函数作用域。\n```\n    var foo = true;\n    if (foo) {\n        var bar = foo * 2;\n        bar = something( bar ); console.log( bar );\n    }\n```\n* 块作用域实现的几种方法\n    * with。用 with 从对象中创建出的作用域仅在 with 声明中而非外 部作用域中有效。\n    * try/catch。JavaScript 的 ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量（catch的实参？）仅在 catch 内部有效。如果在catch的代码块中使用var声明变量，在函数作用域中仍然能获取到声明的变量。\n    * let。ES6引入的新关键字，实现块作用域的最好方式。\n    * const。ES6引入的新关键字，同样可以实现块作用域，但变量的值不可以更改。\n* 块作用域可以将无用的变量进行垃圾回收。\n\n## <div id=\"chapter4\">第四章 提升</div>\n变量声明在作用域中出现的位置不同，会导致不同的影响。\n* 提升的本质：代码的执行分为两个阶段：编译阶段和执行阶段。编译阶段编译器找到所有的声明，并用合适的作用域将它们关联起来。执行阶段引擎会直接执行代码。\n* 提升的对象：只有声明本身会被提升（无论是变量声明还是函数声明），而赋值或其他运行逻辑会留在原地。\n* 提升需要注意的点：\n    * 即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。\n    * 函数会首先被提升，然后才是变量。\n    * 函数会首先被提升，然后才是变量。\n    * 尽量避免重复声明。\n\n## <div id=\"chapter5\">第五章 作用域闭包</div>\n函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在JavaScript，函数在每次创建时生成闭包。（from mdn）\n\n### <div id=\"5.2\">5.2 实质问题</div>\n* 下面的这段代码清晰地展示了什么叫闭包：\n```\n    function foo() { \n        var a = 2;\n        function bar() { \n            console.log( a );\n        }\n        \n        return bar; \n    }    \n    var baz = foo();\n    baz(); // 2 —— 朋友，这就是闭包的效果。\n```\n\n### <div id=\"5.4\">5.4 循环和闭包</div>\n* 想要实现每隔一秒钟，按顺序打印出`1 2 3 4 5`。\n    * 代码不能写成如下的形式，打印的结果会是每隔一秒钟输出一个6，原因是setTimeOut的回调函数是在循环结束了之后才执行。\n    ```\n    for (var i=1; i<=5; i++) { \n        setTimeout( function timer() {\n        console.log( i ); }, i*1000 );\n    }\n    ```\n    * 代码可以写成如下形式：\n        * 第一种方式，通过IIFE，创建新的作用域，并在新的作用域中记录循环时的值：\n        ```\n        for (var i=1; i<=5; i++) { (function(j) {\n            setTimeout( function timer() { console.log( j );\n                }, j*1000 );\n            })( i );\n        }\n        ```\n        * 第二种方式，使用闭包的块作用域：\n        ```\n            for (let i=1; i<=5; i++) { \n                setTimeout( function timer() {\n                console.log( i ); }, i*1000 );\n            }\n        ```\n* 模块模式\n```\n    function CoolModule() {\n        var something = \"cool\";\n        var another = [1, 2, 3];\n        \n        function doSomething() { \n            console.log( something );\n        }\n        function doAnother() {\n            console.log( another.join( \" ! \" ) );\n        }\n        \n        return {\n            doSomething: doSomething, \n            doAnother: doAnother\n        }; \n    }\n    var foo = CoolModule(); \n    foo.doSomething(); // cool\n    foo.doAnother(); // 1 ! 2 ! 3\n```\n* 闭包经模块模式稍加改进后实现的单例模式：\n```\n    var foo = (function CoolModule() { var something = \"cool\";\n        var another = [1, 2, 3];\n        function doSomething() { \n            console.log( something );\n        }\n        function doAnother() {\n            console.log( another.join( \" ! \" ) );\n        }\n        \n        return {\n            doSomething: doSomething, \n            doAnother: doAnother\n        }; \n    })();\n    foo.doSomething(); // cool \n    foo.doAnother(); // 1 ! 2 ! 3\n```\n### <div id=\"5.5\">5.5 模块</div>\n模块有两个主要特征:\n1. 为创建内部作用域而调用了一个包装函数;\n2. 包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n### 5.5.1 现代的模块机制\n* 一个模块管理器\n```\n    var MyModules = (function Manager() {\n        var modules = {};\n        \n        function define(name, deps, impl) {\n            for (var i=0; i<deps.length; i++) {\n                deps[i] = modules[deps[i]];\n            }\n            modules[name] = impl.apply( impl, deps ); \n        }\n        \n        function get(name) { \n            return modules[name];\n        }\n        \n        return {\n            define: define,\n            get: get \n        };\n    })();\n```\n\n* 使用模块管理器来定义模块\n```\n    MyModules.define( \"bar\", [], function() { \n        function hello(who) {\n            return \"Let me introduce: \" + who; \n        }\n        \n        return {\n            hello: hello\n        }; \n    });\n\n    MyModules.define( \"foo\", [\"bar\"], function(bar) { \n        var hungry = \"hippo\";\n        function awesome() {\n            console.log( bar.hello( hungry ).toUpperCase() );\n        }\n        \n        return {\n            awesome: awesome\n        }; \n    });\n    \n    var bar = MyModules.get( \"bar\" );\n    var foo = MyModules.get( \"foo\" ); \n    console.log( bar.hello( \"hippo\" )); // Let me introduce: hippo \n    foo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n\n\n\n### 5.5.2 未来的模块机制\n* bar.js\n```\n    function hello(who) {\n        return \"Let me introduce: \" + who;\n    }\n\n    export hello;\n```\n* foo.js\n```\n    // 仅从 \"bar\" 模块导入 hello() import hello from \"bar\";\n    var hungry = \"hippo\";\n    function awesome() { \n        sconsole.log(hello( hungry ).toUpperCase() );\n    }\n    \n    export awesome;\n```\n* baz.js,导入完整的 \"foo\" 和 \"bar\" 模块\n```\n    module foo from \"foo\"; \n    module bar from \"bar\";\n    \n    console.log(\n        bar.hello( \"rhino\" )\n    ); // Let me introduce: rhino \n    \n    foo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n* import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。\n* module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。\n* export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。\n* 这些操作可以在模块定义中根据需要使用任意多次。\n\n## <div id=\"appendixA\">附录A 动态作用域</div>\n动态作用域和词法作用域的区别如下：\n* 词法作用域，关心函数是在何处声明以及如何声明。\n* 词法作用域的定义过程发生在书写代码的阶段。\n* 动态作用域，关心函数是如何调用的、从何处调用的。\n* 动态作用域在运行时才被动态定义。\n\n书中通过举例，比较了动态作用域和静态作用域之间的区别。\n\n动态作用域的代码调用：\n```\nfunction foo() {\n    console.log( a ); // 3(不是 2 !)\n}\n\nfunction bar() { \n    var a = 3;\n    foo(); \n}\n\nvar a = 2;\nbar();\n```\n\n静态作用域的代码调用：\n```\nfunction foo() { \n    console.log( a ); // 2\n}\nfunction bar() { \n    var a = 3;\n    foo(); \n}\n\nvar a = 2; \nbar();\n```\n\n## <div id=\"appendixB\">附录B 块作用域的替代方案</div>\n### <div id=\"B.1\">B.1 Traceur</div>\n块作用域的替代方案：\n* try catch。代码丑陋，但这是一种使不兼容es6的代码使用块作用域的一个手段。通常在代码中按照es6的块作用域方法去写，再由特定的工具（比如traceur）对块作用域转换为类似形式。\n\n### <div id=\"B.2\">B.2 隐式和显式作用域</div>\n在第三章曾经提到过：\n\n> 用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。在开发和修改代码的过 程中，如果没有密切关注哪些块作用域中有绑定的变量，并且习惯性地移动这些块或者将 其包含在其他的块中，就会导致代码变得混乱。\n\n显式作用域的好处：\n* 显式作用域，作用域更加突出，\n* 显式作用域，在代码重构时表现得更加健壮。\n\n在第三章中提出的由隐式作用域变为显式作用域的解决方案是在隐式作用域的周围添加大括号。还有一种方案，通过let声明，也可以显式地表明一块作用域，代码如下：\n```\nlet (a = 2) {\n    console.log( a ); // 2\n}\n\nconsole.log( a ); // ReferenceError\n```\n\n但是**注意：let 声明并不包含在 ES6 中。**\n\n使用es6语法的方案，方案一，仍然使用大括号。\n```\n/*let*/ { \n    let a = 2; \n    console.log( a );\n}\n\nconsole.log( a ); // ReferenceError\n\n```\n\n方案二，通过工具，把自己编写的let声明，转换为es6语法，即使用大括号围住显式作用域。\n\n（感觉有点太麻烦了，还不如直接用隐式的作用域或者在不明显的地方用大括号。）\n\n### <div id=\"B.3\">B.3 性能</div>\n* try catch的性能很差。\n* 什么时候使用块作用域？\n    * 你是否想要块作用域?如果你想要，上述的内容可以帮助你。如果不想要，继续使用 var 来写代码就好了!\n\n### <div id=\"appendixC\">附录C this词法</div>\n* 箭头函数不仅仅意味着少些代码。\n* 不建议箭头函数和词法作用域混用。\n* 建议在使用this的地方使用bind。（bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 from mdn）。","slug":"js基础/《你不知道的JavaScript 上卷》第一部分","published":1,"updated":"2020-08-17T09:15:37.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kc0018ykrvtkg0048u","content":"<p>第一部分：作用域和闭包</p>\n<a id=\"more\"></a>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ol>\n<li><a href=\"#chapter1\">作用域是什么</a><br> 1.1. <a href=\"#1.1\">编译原理</a><br> 1.2. <a href=\"#1.2\">理解作用域</a></li>\n<li><a href=\"#chapter2\">词法作用域</a><br> 2.1. <a href=\"#2.1\">词法阶段</a><br> 2.2. <a href=\"#2.2\">欺骗词法</a></li>\n<li><a href=\"#chapter3\">函数作用域和块作用域</a><br> 3.1. <a href=\"#3.1\">函数中的作用域</a><br> 3.2. <a href=\"#3.2\">隐藏内部实现</a><br> 3.3. <a href=\"#3.3\">块作用域</a></li>\n<li><a href=\"#chapter4\">提升</a></li>\n<li><a href=\"#chapter5\">作用域闭包</a><br> 5.2. <a href=\"#5.2\">实质问题</a><br> 5.4. <a href=\"#5.4\">循环和闭包</a><br> 5.5. <a href=\"#5.5\">模块</a></li>\n<li><a href=\"#appendixA\">附录A</a></li>\n<li><a href=\"#appendixB\">附录B 块作用域的替代方案</a><br> B.1. <a href=\"#B.1\">Traceur</a><br> B.2. <a href=\"#B.2\">隐式和显式作用域</a><br> B.3. <a href=\"#B.3\">性能</a></li>\n<li><a href=\"#appendixC\">附录C this词法</a></li>\n</ol>\n<hr>\n<h2 id=\"第一章-作用域是什么\"><a href=\"#第一章-作用域是什么\" class=\"headerlink\" title=\"第一章 作用域是什么\"></a><div id=\"chapter1\">第一章 作用域是什么</div></h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a><div id=\"1.1\">1.1 编译原理</div></h3><ul>\n<li>编译代码的三个步骤<ol>\n<li>分词/词法分析：将字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。</li>\n<li>解析/语法分析：将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。</li>\n<li>代码生成：将 AST 转换为可执行代码的过程称被称为代码生成。<br>编译器编译完毕后，由引擎执行生成的代码。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a><div id=\"1.2\">1.2 理解作用域</div></h3><ul>\n<li>LHS查询：变量出现在赋值操作的左侧时进行的查询。试图找到变量的容器本身，<code>set</code>操作，当执行非法操作时，比如对一个没有声明的变量进行赋值，非严格模式下的引擎会自动声明该变量，而非严格模式会报错<code>ReferenceError</code>。</li>\n<li>RHS查询：变量出现在赋值操作的右侧时进行的查询。retrieve his source value，取到它的值，类似<code>get</code>操作，可能会引发两种错误：1. <code>ReferenceError</code>同作用域判别失败相关 2. <code>TypeError</code>则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</li>\n</ul>\n<h2 id=\"第二章-词法作用域\"><a href=\"#第二章-词法作用域\" class=\"headerlink\" title=\"第二章 词法作用域\"></a><div id=\"chapter2\">第二章 词法作用域</div></h2><p>作用域的两种工作模型：</p>\n<ul>\n<li>词法作用域。</li>\n<li>动态作用域。<br>JavaScript采用的是词法作用域。</li>\n</ul>\n<h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a><div id=\"2.1\">2.1 词法阶段</div></h3><ul>\n<li>标识符查找：从当前作用域，逐级向上，找到为止。<ul>\n<li>引申：遮蔽效应(内部的标识符“遮蔽”了外部的标识符)</li>\n</ul>\n</li>\n<li>全局变量与全局对象的关系：全局变量会自动成为全局对象(比如浏览器中的 window 对象)的属性。</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a><div id=\"2.2\">2.2 欺骗词法</div></h3><p>欺骗词法即在运行时修改词法的作用域。</p>\n<ul>\n<li><p>注意：不推荐进行欺骗词法。</p>\n<ul>\n<li>原因1：作用域会导致性能“下降”。引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。</li>\n<li>原因2：会被严格模式所影响(限制)。<code>with</code>被完全禁止，而在保留核心功能的前提下，间接或非安全地使用<code>eval(..)</code>也被禁止了。</li>\n</ul>\n</li>\n<li><p>欺骗词法的两种方式：</p>\n<ul>\n<li>eval函数：eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。<ul>\n<li>注意：在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。</li>\n</ul>\n</li>\n<li>with关键字：重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。<ul>\n<li>注意：尽管<code>with</code>块可以将一个对象处理为词法作用域，但是这个块内部正常的<code>var</code>声明并不会被限制在这个块的作用域中，而是被添加到<code>with</code>所处的函数作用域中。使用let即可避免污染函数作用域。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-函数作用域和块作用域\"><a href=\"#第三章-函数作用域和块作用域\" class=\"headerlink\" title=\"第三章 函数作用域和块作用域\"></a><div id=\"chapter3\">第三章 函数作用域和块作用域</div></h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a><div id=\"3.1\">3.1 函数中的作用域</div></h3><ul>\n<li>函数作用域的概念：属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a><div id=\"3.2\">3.2 隐藏内部实现</div></h3><ul>\n<li>为什么要隐藏内部实现？<ul>\n<li>最小特权原则（最小授权原则、最小暴露原则）：软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</li>\n<li>规避冲突。避免命名冲突，污染全局作用域。</li>\n</ul>\n</li>\n<li>隐藏内部实现的原理：将变量和函数用函数包裹起来，将其放置在函数作用域中。</li>\n<li>隐藏内部实现的方法<ul>\n<li>全局命名空间。在全局作用域中声明一个独特的变量，作为库的命名空间，所有需要暴露给外界的功能都是其属性。参考jquery（使用$符号），d3.js（使用d3）。</li>\n<li>模块管理。使用依赖管理器，将库的标识符显示地导入到特定的作用域中。</li>\n<li>IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression)。（具名函数的 IIFE 是最佳实践）</li>\n</ul>\n</li>\n<li>函数表达式和函数声明的辨析<ul>\n<li>函数表达式：函数被包含在一对 ( ) 括号内部，因此成为了一个表达式。</li>\n<li>函数声明：第一个单词必须是function。</li>\n<li>函数表达式可以是匿名的，而函数声明则不可以省略函数名。始终给函数表达式命名是一个最佳实践。</li>\n</ul>\n</li>\n<li>IIFE的进阶用法<ul>\n<li>把它们当作函数调用并传递参数进去。</li>\n<li>将一个参数命名为 undefined，但是在对应的位置不传入任何值，这样就可以 保证在代码块中 undefined 标识符的值真的是 undefined。</li>\n<li>倒置代码的运行顺序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-块作用域\"><a href=\"#3-3-块作用域\" class=\"headerlink\" title=\"3.3 块作用域\"></a><div id=\"3.3\">3.3 块作用域</div></h3><ul>\n<li><p>形式上的块作用域，实际上并不是块作用域的写法，会导致变量污染到整个函数作用域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = true;</span><br><span class=\"line\">if (foo) &#123;</span><br><span class=\"line\">    var bar = foo * 2;</span><br><span class=\"line\">    bar = something( bar ); console.log( bar );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>块作用域实现的几种方法</p>\n<ul>\n<li>with。用 with 从对象中创建出的作用域仅在 with 声明中而非外 部作用域中有效。</li>\n<li>try/catch。JavaScript 的 ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量（catch的实参？）仅在 catch 内部有效。如果在catch的代码块中使用var声明变量，在函数作用域中仍然能获取到声明的变量。</li>\n<li>let。ES6引入的新关键字，实现块作用域的最好方式。</li>\n<li>const。ES6引入的新关键字，同样可以实现块作用域，但变量的值不可以更改。</li>\n</ul>\n</li>\n<li>块作用域可以将无用的变量进行垃圾回收。</li>\n</ul>\n<h2 id=\"第四章-提升\"><a href=\"#第四章-提升\" class=\"headerlink\" title=\"第四章 提升\"></a><div id=\"chapter4\">第四章 提升</div></h2><p>变量声明在作用域中出现的位置不同，会导致不同的影响。</p>\n<ul>\n<li>提升的本质：代码的执行分为两个阶段：编译阶段和执行阶段。编译阶段编译器找到所有的声明，并用合适的作用域将它们关联起来。执行阶段引擎会直接执行代码。</li>\n<li>提升的对象：只有声明本身会被提升（无论是变量声明还是函数声明），而赋值或其他运行逻辑会留在原地。</li>\n<li>提升需要注意的点：<ul>\n<li>即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。</li>\n<li>函数会首先被提升，然后才是变量。</li>\n<li>函数会首先被提升，然后才是变量。</li>\n<li>尽量避免重复声明。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-作用域闭包\"><a href=\"#第五章-作用域闭包\" class=\"headerlink\" title=\"第五章 作用域闭包\"></a><div id=\"chapter5\">第五章 作用域闭包</div></h2><p>函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在JavaScript，函数在每次创建时生成闭包。（from mdn）</p>\n<h3 id=\"5-2-实质问题\"><a href=\"#5-2-实质问题\" class=\"headerlink\" title=\"5.2 实质问题\"></a><div id=\"5.2\">5.2 实质问题</div></h3><ul>\n<li>下面的这段代码清晰地展示了什么叫闭包：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">    function bar() &#123; </span><br><span class=\"line\">        console.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return bar; </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">var baz = foo();</span><br><span class=\"line\">baz(); // 2 —— 朋友，这就是闭包的效果。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-4-循环和闭包\"><a href=\"#5-4-循环和闭包\" class=\"headerlink\" title=\"5.4 循环和闭包\"></a><div id=\"5.4\">5.4 循环和闭包</div></h3><ul>\n<li><p>想要实现每隔一秒钟，按顺序打印出<code>1 2 3 4 5</code>。</p>\n<ul>\n<li><p>代码不能写成如下的形式，打印的结果会是每隔一秒钟输出一个6，原因是setTimeOut的回调函数是在循环结束了之后才执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=1; i&lt;=5; i++) &#123; </span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">    console.log( i ); &#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码可以写成如下形式：</p>\n<ul>\n<li><p>第一种方式，通过IIFE，创建新的作用域，并在新的作用域中记录循环时的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=1; i&lt;=5; i++) &#123; (function(j) &#123;</span><br><span class=\"line\">    setTimeout( function timer() &#123; console.log( j );</span><br><span class=\"line\">        &#125;, j*1000 );</span><br><span class=\"line\">    &#125;)( i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式，使用闭包的块作用域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i=1; i&lt;=5; i++) &#123; </span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">    console.log( i ); &#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function CoolModule() &#123;</span><br><span class=\"line\">    var something = &quot;cool&quot;;</span><br><span class=\"line\">    var another = [1, 2, 3];</span><br><span class=\"line\">    </span><br><span class=\"line\">    function doSomething() &#123; </span><br><span class=\"line\">        console.log( something );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function doAnother() &#123;</span><br><span class=\"line\">        console.log( another.join( &quot; ! &quot; ) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        doSomething: doSomething, </span><br><span class=\"line\">        doAnother: doAnother</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = CoolModule(); </span><br><span class=\"line\">foo.doSomething(); // cool</span><br><span class=\"line\">foo.doAnother(); // 1 ! 2 ! 3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包经模块模式稍加改进后实现的单例模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = (function CoolModule() &#123; var something = &quot;cool&quot;;</span><br><span class=\"line\">    var another = [1, 2, 3];</span><br><span class=\"line\">    function doSomething() &#123; </span><br><span class=\"line\">        console.log( something );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function doAnother() &#123;</span><br><span class=\"line\">        console.log( another.join( &quot; ! &quot; ) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        doSomething: doSomething, </span><br><span class=\"line\">        doAnother: doAnother</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">foo.doSomething(); // cool </span><br><span class=\"line\">foo.doAnother(); // 1 ! 2 ! 3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-5-模块\"><a href=\"#5-5-模块\" class=\"headerlink\" title=\"5.5 模块\"></a><div id=\"5.5\">5.5 模块</div></h3><p>模块有两个主要特征:</p>\n<ol>\n<li>为创建内部作用域而调用了一个包装函数;</li>\n<li>包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ol>\n<h3 id=\"5-5-1-现代的模块机制\"><a href=\"#5-5-1-现代的模块机制\" class=\"headerlink\" title=\"5.5.1 现代的模块机制\"></a>5.5.1 现代的模块机制</h3><ul>\n<li><p>一个模块管理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyModules = (function Manager() &#123;</span><br><span class=\"line\">    var modules = &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function define(name, deps, impl) &#123;</span><br><span class=\"line\">        for (var i=0; i&lt;deps.length; i++) &#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply( impl, deps ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function get(name) &#123; </span><br><span class=\"line\">        return modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用模块管理器来定义模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModules.define( &quot;bar&quot;, [], function() &#123; </span><br><span class=\"line\">    function hello(who) &#123;</span><br><span class=\"line\">        return &quot;Let me introduce: &quot; + who; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        hello: hello</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define( &quot;foo&quot;, [&quot;bar&quot;], function(bar) &#123; </span><br><span class=\"line\">    var hungry = &quot;hippo&quot;;</span><br><span class=\"line\">    function awesome() &#123;</span><br><span class=\"line\">        console.log( bar.hello( hungry ).toUpperCase() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        awesome: awesome</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var bar = MyModules.get( &quot;bar&quot; );</span><br><span class=\"line\">var foo = MyModules.get( &quot;foo&quot; ); </span><br><span class=\"line\">console.log( bar.hello( &quot;hippo&quot; )); // Let me introduce: hippo </span><br><span class=\"line\">foo.awesome(); // LET ME INTRODUCE: HIPPO</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-5-2-未来的模块机制\"><a href=\"#5-5-2-未来的模块机制\" class=\"headerlink\" title=\"5.5.2 未来的模块机制\"></a>5.5.2 未来的模块机制</h3><ul>\n<li><p>bar.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello(who) &#123;</span><br><span class=\"line\">    return &quot;Let me introduce: &quot; + who;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export hello;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>foo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 仅从 &quot;bar&quot; 模块导入 hello() import hello from &quot;bar&quot;;</span><br><span class=\"line\">var hungry = &quot;hippo&quot;;</span><br><span class=\"line\">function awesome() &#123; </span><br><span class=\"line\">    sconsole.log(hello( hungry ).toUpperCase() );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export awesome;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>baz.js,导入完整的 “foo” 和 “bar” 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module foo from &quot;foo&quot;; </span><br><span class=\"line\">module bar from &quot;bar&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    bar.hello( &quot;rhino&quot; )</span><br><span class=\"line\">); // Let me introduce: rhino </span><br><span class=\"line\"></span><br><span class=\"line\">foo.awesome(); // LET ME INTRODUCE: HIPPO</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。</p>\n</li>\n<li>module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。</li>\n<li>export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。</li>\n<li>这些操作可以在模块定义中根据需要使用任意多次。</li>\n</ul>\n<h2 id=\"附录A-动态作用域\"><a href=\"#附录A-动态作用域\" class=\"headerlink\" title=\"附录A 动态作用域\"></a><div id=\"appendixA\">附录A 动态作用域</div></h2><p>动态作用域和词法作用域的区别如下：</p>\n<ul>\n<li>词法作用域，关心函数是在何处声明以及如何声明。</li>\n<li>词法作用域的定义过程发生在书写代码的阶段。</li>\n<li>动态作用域，关心函数是如何调用的、从何处调用的。</li>\n<li>动态作用域在运行时才被动态定义。</li>\n</ul>\n<p>书中通过举例，比较了动态作用域和静态作用域之间的区别。</p>\n<p>动态作用域的代码调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log( a ); // 3(不是 2 !)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar() &#123; </span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    foo(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<p>静态作用域的代码调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    console.log( a ); // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123; </span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    foo(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 2; </span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"附录B-块作用域的替代方案\"><a href=\"#附录B-块作用域的替代方案\" class=\"headerlink\" title=\"附录B 块作用域的替代方案\"></a><div id=\"appendixB\">附录B 块作用域的替代方案</div></h2><h3 id=\"B-1-Traceur\"><a href=\"#B-1-Traceur\" class=\"headerlink\" title=\"B.1 Traceur\"></a><div id=\"B.1\">B.1 Traceur</div></h3><p>块作用域的替代方案：</p>\n<ul>\n<li>try catch。代码丑陋，但这是一种使不兼容es6的代码使用块作用域的一个手段。通常在代码中按照es6的块作用域方法去写，再由特定的工具（比如traceur）对块作用域转换为类似形式。</li>\n</ul>\n<h3 id=\"B-2-隐式和显式作用域\"><a href=\"#B-2-隐式和显式作用域\" class=\"headerlink\" title=\"B.2 隐式和显式作用域\"></a><div id=\"B.2\">B.2 隐式和显式作用域</div></h3><p>在第三章曾经提到过：</p>\n<blockquote>\n<p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。在开发和修改代码的过 程中，如果没有密切关注哪些块作用域中有绑定的变量，并且习惯性地移动这些块或者将 其包含在其他的块中，就会导致代码变得混乱。</p>\n</blockquote>\n<p>显式作用域的好处：</p>\n<ul>\n<li>显式作用域，作用域更加突出，</li>\n<li>显式作用域，在代码重构时表现得更加健壮。</li>\n</ul>\n<p>在第三章中提出的由隐式作用域变为显式作用域的解决方案是在隐式作用域的周围添加大括号。还有一种方案，通过let声明，也可以显式地表明一块作用域，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (a = 2) &#123;</span><br><span class=\"line\">    console.log( a ); // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( a ); // ReferenceError</span><br></pre></td></tr></table></figure></p>\n<p>但是<strong>注意：let 声明并不包含在 ES6 中。</strong></p>\n<p>使用es6语法的方案，方案一，仍然使用大括号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*let*/ &#123; </span><br><span class=\"line\">    let a = 2; </span><br><span class=\"line\">    console.log( a );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( a ); // ReferenceError</span><br></pre></td></tr></table></figure></p>\n<p>方案二，通过工具，把自己编写的let声明，转换为es6语法，即使用大括号围住显式作用域。</p>\n<p>（感觉有点太麻烦了，还不如直接用隐式的作用域或者在不明显的地方用大括号。）</p>\n<h3 id=\"B-3-性能\"><a href=\"#B-3-性能\" class=\"headerlink\" title=\"B.3 性能\"></a><div id=\"B.3\">B.3 性能</div></h3><ul>\n<li>try catch的性能很差。</li>\n<li>什么时候使用块作用域？<ul>\n<li>你是否想要块作用域?如果你想要，上述的内容可以帮助你。如果不想要，继续使用 var 来写代码就好了!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"附录C-this词法\"><a href=\"#附录C-this词法\" class=\"headerlink\" title=\"附录C this词法\"></a><div id=\"appendixC\">附录C this词法</div></h3><ul>\n<li>箭头函数不仅仅意味着少些代码。</li>\n<li>不建议箭头函数和词法作用域混用。</li>\n<li>建议在使用this的地方使用bind。（bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 from mdn）。</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>第一部分：作用域和闭包</p>","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ol>\n<li><a href=\"#chapter1\">作用域是什么</a><br> 1.1. <a href=\"#1.1\">编译原理</a><br> 1.2. <a href=\"#1.2\">理解作用域</a></li>\n<li><a href=\"#chapter2\">词法作用域</a><br> 2.1. <a href=\"#2.1\">词法阶段</a><br> 2.2. <a href=\"#2.2\">欺骗词法</a></li>\n<li><a href=\"#chapter3\">函数作用域和块作用域</a><br> 3.1. <a href=\"#3.1\">函数中的作用域</a><br> 3.2. <a href=\"#3.2\">隐藏内部实现</a><br> 3.3. <a href=\"#3.3\">块作用域</a></li>\n<li><a href=\"#chapter4\">提升</a></li>\n<li><a href=\"#chapter5\">作用域闭包</a><br> 5.2. <a href=\"#5.2\">实质问题</a><br> 5.4. <a href=\"#5.4\">循环和闭包</a><br> 5.5. <a href=\"#5.5\">模块</a></li>\n<li><a href=\"#appendixA\">附录A</a></li>\n<li><a href=\"#appendixB\">附录B 块作用域的替代方案</a><br> B.1. <a href=\"#B.1\">Traceur</a><br> B.2. <a href=\"#B.2\">隐式和显式作用域</a><br> B.3. <a href=\"#B.3\">性能</a></li>\n<li><a href=\"#appendixC\">附录C this词法</a></li>\n</ol>\n<hr>\n<h2 id=\"第一章-作用域是什么\"><a href=\"#第一章-作用域是什么\" class=\"headerlink\" title=\"第一章 作用域是什么\"></a><div id=\"chapter1\">第一章 作用域是什么</div></h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a><div id=\"1.1\">1.1 编译原理</div></h3><ul>\n<li>编译代码的三个步骤<ol>\n<li>分词/词法分析：将字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。</li>\n<li>解析/语法分析：将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。</li>\n<li>代码生成：将 AST 转换为可执行代码的过程称被称为代码生成。<br>编译器编译完毕后，由引擎执行生成的代码。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a><div id=\"1.2\">1.2 理解作用域</div></h3><ul>\n<li>LHS查询：变量出现在赋值操作的左侧时进行的查询。试图找到变量的容器本身，<code>set</code>操作，当执行非法操作时，比如对一个没有声明的变量进行赋值，非严格模式下的引擎会自动声明该变量，而非严格模式会报错<code>ReferenceError</code>。</li>\n<li>RHS查询：变量出现在赋值操作的右侧时进行的查询。retrieve his source value，取到它的值，类似<code>get</code>操作，可能会引发两种错误：1. <code>ReferenceError</code>同作用域判别失败相关 2. <code>TypeError</code>则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</li>\n</ul>\n<h2 id=\"第二章-词法作用域\"><a href=\"#第二章-词法作用域\" class=\"headerlink\" title=\"第二章 词法作用域\"></a><div id=\"chapter2\">第二章 词法作用域</div></h2><p>作用域的两种工作模型：</p>\n<ul>\n<li>词法作用域。</li>\n<li>动态作用域。<br>JavaScript采用的是词法作用域。</li>\n</ul>\n<h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a><div id=\"2.1\">2.1 词法阶段</div></h3><ul>\n<li>标识符查找：从当前作用域，逐级向上，找到为止。<ul>\n<li>引申：遮蔽效应(内部的标识符“遮蔽”了外部的标识符)</li>\n</ul>\n</li>\n<li>全局变量与全局对象的关系：全局变量会自动成为全局对象(比如浏览器中的 window 对象)的属性。</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a><div id=\"2.2\">2.2 欺骗词法</div></h3><p>欺骗词法即在运行时修改词法的作用域。</p>\n<ul>\n<li><p>注意：不推荐进行欺骗词法。</p>\n<ul>\n<li>原因1：作用域会导致性能“下降”。引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。</li>\n<li>原因2：会被严格模式所影响(限制)。<code>with</code>被完全禁止，而在保留核心功能的前提下，间接或非安全地使用<code>eval(..)</code>也被禁止了。</li>\n</ul>\n</li>\n<li><p>欺骗词法的两种方式：</p>\n<ul>\n<li>eval函数：eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。<ul>\n<li>注意：在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。</li>\n</ul>\n</li>\n<li>with关键字：重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。<ul>\n<li>注意：尽管<code>with</code>块可以将一个对象处理为词法作用域，但是这个块内部正常的<code>var</code>声明并不会被限制在这个块的作用域中，而是被添加到<code>with</code>所处的函数作用域中。使用let即可避免污染函数作用域。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-函数作用域和块作用域\"><a href=\"#第三章-函数作用域和块作用域\" class=\"headerlink\" title=\"第三章 函数作用域和块作用域\"></a><div id=\"chapter3\">第三章 函数作用域和块作用域</div></h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a><div id=\"3.1\">3.1 函数中的作用域</div></h3><ul>\n<li>函数作用域的概念：属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a><div id=\"3.2\">3.2 隐藏内部实现</div></h3><ul>\n<li>为什么要隐藏内部实现？<ul>\n<li>最小特权原则（最小授权原则、最小暴露原则）：软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</li>\n<li>规避冲突。避免命名冲突，污染全局作用域。</li>\n</ul>\n</li>\n<li>隐藏内部实现的原理：将变量和函数用函数包裹起来，将其放置在函数作用域中。</li>\n<li>隐藏内部实现的方法<ul>\n<li>全局命名空间。在全局作用域中声明一个独特的变量，作为库的命名空间，所有需要暴露给外界的功能都是其属性。参考jquery（使用$符号），d3.js（使用d3）。</li>\n<li>模块管理。使用依赖管理器，将库的标识符显示地导入到特定的作用域中。</li>\n<li>IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression)。（具名函数的 IIFE 是最佳实践）</li>\n</ul>\n</li>\n<li>函数表达式和函数声明的辨析<ul>\n<li>函数表达式：函数被包含在一对 ( ) 括号内部，因此成为了一个表达式。</li>\n<li>函数声明：第一个单词必须是function。</li>\n<li>函数表达式可以是匿名的，而函数声明则不可以省略函数名。始终给函数表达式命名是一个最佳实践。</li>\n</ul>\n</li>\n<li>IIFE的进阶用法<ul>\n<li>把它们当作函数调用并传递参数进去。</li>\n<li>将一个参数命名为 undefined，但是在对应的位置不传入任何值，这样就可以 保证在代码块中 undefined 标识符的值真的是 undefined。</li>\n<li>倒置代码的运行顺序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-块作用域\"><a href=\"#3-3-块作用域\" class=\"headerlink\" title=\"3.3 块作用域\"></a><div id=\"3.3\">3.3 块作用域</div></h3><ul>\n<li><p>形式上的块作用域，实际上并不是块作用域的写法，会导致变量污染到整个函数作用域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = true;</span><br><span class=\"line\">if (foo) &#123;</span><br><span class=\"line\">    var bar = foo * 2;</span><br><span class=\"line\">    bar = something( bar ); console.log( bar );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>块作用域实现的几种方法</p>\n<ul>\n<li>with。用 with 从对象中创建出的作用域仅在 with 声明中而非外 部作用域中有效。</li>\n<li>try/catch。JavaScript 的 ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量（catch的实参？）仅在 catch 内部有效。如果在catch的代码块中使用var声明变量，在函数作用域中仍然能获取到声明的变量。</li>\n<li>let。ES6引入的新关键字，实现块作用域的最好方式。</li>\n<li>const。ES6引入的新关键字，同样可以实现块作用域，但变量的值不可以更改。</li>\n</ul>\n</li>\n<li>块作用域可以将无用的变量进行垃圾回收。</li>\n</ul>\n<h2 id=\"第四章-提升\"><a href=\"#第四章-提升\" class=\"headerlink\" title=\"第四章 提升\"></a><div id=\"chapter4\">第四章 提升</div></h2><p>变量声明在作用域中出现的位置不同，会导致不同的影响。</p>\n<ul>\n<li>提升的本质：代码的执行分为两个阶段：编译阶段和执行阶段。编译阶段编译器找到所有的声明，并用合适的作用域将它们关联起来。执行阶段引擎会直接执行代码。</li>\n<li>提升的对象：只有声明本身会被提升（无论是变量声明还是函数声明），而赋值或其他运行逻辑会留在原地。</li>\n<li>提升需要注意的点：<ul>\n<li>即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。</li>\n<li>函数会首先被提升，然后才是变量。</li>\n<li>函数会首先被提升，然后才是变量。</li>\n<li>尽量避免重复声明。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-作用域闭包\"><a href=\"#第五章-作用域闭包\" class=\"headerlink\" title=\"第五章 作用域闭包\"></a><div id=\"chapter5\">第五章 作用域闭包</div></h2><p>函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在JavaScript，函数在每次创建时生成闭包。（from mdn）</p>\n<h3 id=\"5-2-实质问题\"><a href=\"#5-2-实质问题\" class=\"headerlink\" title=\"5.2 实质问题\"></a><div id=\"5.2\">5.2 实质问题</div></h3><ul>\n<li>下面的这段代码清晰地展示了什么叫闭包：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">    function bar() &#123; </span><br><span class=\"line\">        console.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return bar; </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">var baz = foo();</span><br><span class=\"line\">baz(); // 2 —— 朋友，这就是闭包的效果。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-4-循环和闭包\"><a href=\"#5-4-循环和闭包\" class=\"headerlink\" title=\"5.4 循环和闭包\"></a><div id=\"5.4\">5.4 循环和闭包</div></h3><ul>\n<li><p>想要实现每隔一秒钟，按顺序打印出<code>1 2 3 4 5</code>。</p>\n<ul>\n<li><p>代码不能写成如下的形式，打印的结果会是每隔一秒钟输出一个6，原因是setTimeOut的回调函数是在循环结束了之后才执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=1; i&lt;=5; i++) &#123; </span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">    console.log( i ); &#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码可以写成如下形式：</p>\n<ul>\n<li><p>第一种方式，通过IIFE，创建新的作用域，并在新的作用域中记录循环时的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=1; i&lt;=5; i++) &#123; (function(j) &#123;</span><br><span class=\"line\">    setTimeout( function timer() &#123; console.log( j );</span><br><span class=\"line\">        &#125;, j*1000 );</span><br><span class=\"line\">    &#125;)( i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式，使用闭包的块作用域：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i=1; i&lt;=5; i++) &#123; </span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">    console.log( i ); &#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function CoolModule() &#123;</span><br><span class=\"line\">    var something = &quot;cool&quot;;</span><br><span class=\"line\">    var another = [1, 2, 3];</span><br><span class=\"line\">    </span><br><span class=\"line\">    function doSomething() &#123; </span><br><span class=\"line\">        console.log( something );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function doAnother() &#123;</span><br><span class=\"line\">        console.log( another.join( &quot; ! &quot; ) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        doSomething: doSomething, </span><br><span class=\"line\">        doAnother: doAnother</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var foo = CoolModule(); </span><br><span class=\"line\">foo.doSomething(); // cool</span><br><span class=\"line\">foo.doAnother(); // 1 ! 2 ! 3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包经模块模式稍加改进后实现的单例模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = (function CoolModule() &#123; var something = &quot;cool&quot;;</span><br><span class=\"line\">    var another = [1, 2, 3];</span><br><span class=\"line\">    function doSomething() &#123; </span><br><span class=\"line\">        console.log( something );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function doAnother() &#123;</span><br><span class=\"line\">        console.log( another.join( &quot; ! &quot; ) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        doSomething: doSomething, </span><br><span class=\"line\">        doAnother: doAnother</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">foo.doSomething(); // cool </span><br><span class=\"line\">foo.doAnother(); // 1 ! 2 ! 3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-5-模块\"><a href=\"#5-5-模块\" class=\"headerlink\" title=\"5.5 模块\"></a><div id=\"5.5\">5.5 模块</div></h3><p>模块有两个主要特征:</p>\n<ol>\n<li>为创建内部作用域而调用了一个包装函数;</li>\n<li>包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ol>\n<h3 id=\"5-5-1-现代的模块机制\"><a href=\"#5-5-1-现代的模块机制\" class=\"headerlink\" title=\"5.5.1 现代的模块机制\"></a>5.5.1 现代的模块机制</h3><ul>\n<li><p>一个模块管理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyModules = (function Manager() &#123;</span><br><span class=\"line\">    var modules = &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function define(name, deps, impl) &#123;</span><br><span class=\"line\">        for (var i=0; i&lt;deps.length; i++) &#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply( impl, deps ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function get(name) &#123; </span><br><span class=\"line\">        return modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用模块管理器来定义模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModules.define( &quot;bar&quot;, [], function() &#123; </span><br><span class=\"line\">    function hello(who) &#123;</span><br><span class=\"line\">        return &quot;Let me introduce: &quot; + who; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        hello: hello</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define( &quot;foo&quot;, [&quot;bar&quot;], function(bar) &#123; </span><br><span class=\"line\">    var hungry = &quot;hippo&quot;;</span><br><span class=\"line\">    function awesome() &#123;</span><br><span class=\"line\">        console.log( bar.hello( hungry ).toUpperCase() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        awesome: awesome</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var bar = MyModules.get( &quot;bar&quot; );</span><br><span class=\"line\">var foo = MyModules.get( &quot;foo&quot; ); </span><br><span class=\"line\">console.log( bar.hello( &quot;hippo&quot; )); // Let me introduce: hippo </span><br><span class=\"line\">foo.awesome(); // LET ME INTRODUCE: HIPPO</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-5-2-未来的模块机制\"><a href=\"#5-5-2-未来的模块机制\" class=\"headerlink\" title=\"5.5.2 未来的模块机制\"></a>5.5.2 未来的模块机制</h3><ul>\n<li><p>bar.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello(who) &#123;</span><br><span class=\"line\">    return &quot;Let me introduce: &quot; + who;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export hello;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>foo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 仅从 &quot;bar&quot; 模块导入 hello() import hello from &quot;bar&quot;;</span><br><span class=\"line\">var hungry = &quot;hippo&quot;;</span><br><span class=\"line\">function awesome() &#123; </span><br><span class=\"line\">    sconsole.log(hello( hungry ).toUpperCase() );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export awesome;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>baz.js,导入完整的 “foo” 和 “bar” 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module foo from &quot;foo&quot;; </span><br><span class=\"line\">module bar from &quot;bar&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    bar.hello( &quot;rhino&quot; )</span><br><span class=\"line\">); // Let me introduce: rhino </span><br><span class=\"line\"></span><br><span class=\"line\">foo.awesome(); // LET ME INTRODUCE: HIPPO</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。</p>\n</li>\n<li>module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。</li>\n<li>export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。</li>\n<li>这些操作可以在模块定义中根据需要使用任意多次。</li>\n</ul>\n<h2 id=\"附录A-动态作用域\"><a href=\"#附录A-动态作用域\" class=\"headerlink\" title=\"附录A 动态作用域\"></a><div id=\"appendixA\">附录A 动态作用域</div></h2><p>动态作用域和词法作用域的区别如下：</p>\n<ul>\n<li>词法作用域，关心函数是在何处声明以及如何声明。</li>\n<li>词法作用域的定义过程发生在书写代码的阶段。</li>\n<li>动态作用域，关心函数是如何调用的、从何处调用的。</li>\n<li>动态作用域在运行时才被动态定义。</li>\n</ul>\n<p>书中通过举例，比较了动态作用域和静态作用域之间的区别。</p>\n<p>动态作用域的代码调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log( a ); // 3(不是 2 !)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar() &#123; </span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    foo(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<p>静态作用域的代码调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    console.log( a ); // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123; </span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    foo(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 2; </span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"附录B-块作用域的替代方案\"><a href=\"#附录B-块作用域的替代方案\" class=\"headerlink\" title=\"附录B 块作用域的替代方案\"></a><div id=\"appendixB\">附录B 块作用域的替代方案</div></h2><h3 id=\"B-1-Traceur\"><a href=\"#B-1-Traceur\" class=\"headerlink\" title=\"B.1 Traceur\"></a><div id=\"B.1\">B.1 Traceur</div></h3><p>块作用域的替代方案：</p>\n<ul>\n<li>try catch。代码丑陋，但这是一种使不兼容es6的代码使用块作用域的一个手段。通常在代码中按照es6的块作用域方法去写，再由特定的工具（比如traceur）对块作用域转换为类似形式。</li>\n</ul>\n<h3 id=\"B-2-隐式和显式作用域\"><a href=\"#B-2-隐式和显式作用域\" class=\"headerlink\" title=\"B.2 隐式和显式作用域\"></a><div id=\"B.2\">B.2 隐式和显式作用域</div></h3><p>在第三章曾经提到过：</p>\n<blockquote>\n<p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。在开发和修改代码的过 程中，如果没有密切关注哪些块作用域中有绑定的变量，并且习惯性地移动这些块或者将 其包含在其他的块中，就会导致代码变得混乱。</p>\n</blockquote>\n<p>显式作用域的好处：</p>\n<ul>\n<li>显式作用域，作用域更加突出，</li>\n<li>显式作用域，在代码重构时表现得更加健壮。</li>\n</ul>\n<p>在第三章中提出的由隐式作用域变为显式作用域的解决方案是在隐式作用域的周围添加大括号。还有一种方案，通过let声明，也可以显式地表明一块作用域，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (a = 2) &#123;</span><br><span class=\"line\">    console.log( a ); // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( a ); // ReferenceError</span><br></pre></td></tr></table></figure></p>\n<p>但是<strong>注意：let 声明并不包含在 ES6 中。</strong></p>\n<p>使用es6语法的方案，方案一，仍然使用大括号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*let*/ &#123; </span><br><span class=\"line\">    let a = 2; </span><br><span class=\"line\">    console.log( a );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( a ); // ReferenceError</span><br></pre></td></tr></table></figure></p>\n<p>方案二，通过工具，把自己编写的let声明，转换为es6语法，即使用大括号围住显式作用域。</p>\n<p>（感觉有点太麻烦了，还不如直接用隐式的作用域或者在不明显的地方用大括号。）</p>\n<h3 id=\"B-3-性能\"><a href=\"#B-3-性能\" class=\"headerlink\" title=\"B.3 性能\"></a><div id=\"B.3\">B.3 性能</div></h3><ul>\n<li>try catch的性能很差。</li>\n<li>什么时候使用块作用域？<ul>\n<li>你是否想要块作用域?如果你想要，上述的内容可以帮助你。如果不想要，继续使用 var 来写代码就好了!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"附录C-this词法\"><a href=\"#附录C-this词法\" class=\"headerlink\" title=\"附录C this词法\"></a><div id=\"appendixC\">附录C this词法</div></h3><ul>\n<li>箭头函数不仅仅意味着少些代码。</li>\n<li>不建议箭头函数和词法作用域混用。</li>\n<li>建议在使用this的地方使用bind。（bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 from mdn）。</li>\n</ul>"},{"title":"关于异步方法（一）：使用Promise","date":"2020-03-05T02:05:50.000Z","description":"js异步","_content":"\n## 1. 时刻牢记：ajax请求是异步的。\n比如：A方法调用ajax请求,B方法调用A方法，同时B方法调用C方法进行一些涉及到ajax返回的数据的处理工作（因某些原因该工作不能放到ajax请求的回调函数中，比如需要用到另一个ajax请求的内容）。\n\n伪代码如下，用axios替代ajax请求：\n```\n// 这段代码的目的：通过B函数，成功为经过ajax请求获取到的id设置name。\n\n// 全局变量\nvar data = []   // 我们最终要设置的变量\nvar mapRelation = [{userId:123,userName:1234}]  // 注意：这是通过另外一个ajax请求获得的。所以处理函数C不能或者说不方便放到A方法中。\n\n// 该方法通过异步请求，获取Id。\nfunction A(){\n    return axios(请求参数).then(res=>{\n        // 对请求所返回内容的处理工作\n        // 假如res为{userId:123};\n        data.push(res); \n    }).catch(err=>console.log(err))\n}\n\n\n// 该方法通过对象data的userId，为data设置userName。\nfunction C(data){\n    mapRelation.map(userItem=>{\n        if(userItem.userId === data.userId){\n            data.userName = userItem.uesrName;\n        }\n    })\n}\n\n// 设计B函数，为经过ajax请求获取到的id设置name。\n// 错误的写法。\nfunction bWrong(){\n    // 这里并不会成功地为后台传来的userId找到usernName。\n    // 因为A中axios请求的回调函数和函数C()是并行的关系。\n    A();\n    C();\n}\n\n// 正确的写法\nfunction bCorrect(){\n    // 由于axios().then()返回的是一个promise对象（），该对象又被A函数返回，于是可以通过.then()的方式进行串行处理请求。\n    A().then(()=>{\n        C();\n    })\n}\n```\n\n#### 补充：\n1. Promise.then()的语法如下。其中`[]`中的内容代表可选内容。`Promise.then(onFulfilled[,onRejected])。`\n2. then()返回一个 Promise 对象。(关于Promise.then()的更多内容[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then))\n3. catch()返回一个 Promise 对象。(关于Promise.catch()的更多内容[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch))\n2. Promise定义于ES6.\n\n## 2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()\n在写项目的时候经常会遇到，需要得到两个ajax请求的结果后，才能进行数据处理的场景。此时用Promise.all()便能将两个异步请求与数据处理方法进行串行化。\n\n一般的写法是：\n```\nPromise.all([方法1，方法2]).then(res=>{\n    需要串行执行的方法\n})\n```\n\n#### 补充：\n1. Promise.all(iterable)方法，返回一个Promise实例。如果iterable参数的所有方法执行成功，则返回的Promise实例中的参数为iterable执行成功后的返回值。否则返回没有成功执行的原因。\n\n## 3. 不得不说：Promise真的是个好东西。\n1. 解决了异步请求进行同步执行的问题。\n2. 解决了回调地狱的问题，链式调用简介又直观还好写。\n\n### Promise对象的状态\n* pendding，指异步操作正在进行中。\n* fulfilled，指异步操作成功完成。\n* rejected，指异步操作执行失败。\n\n#### 补充：Promise相关的方法\n1. `Promise.resolve()`：个人理解是Prmoise的一个状态，指问题成功解决、代码成功运行,设置Promise处于fulfilled状态。\n2. `Promise.reject()`：问题解决失败或代码运行失败。\n3. `Promise.then(succes,failed)`：在then中加入Promise状态为fulfilled或者reject的回调函数，链式执行。\n4. `Promise.catch(failed)`：仅在Promise状态为reject或者抛出异常时运行catch中的函数。\n5. `Promise.finally()`：仅在Promise结束时运行，无论结果是reject还是fulfilled。\n6. `Promise.all(iterator)`：执行iterator中的所有方法，方法之间是且的关系。如果全部方法的执行结果全部为fulfilled或未返回Promise的情况，回调fulfilled，否则回调reject。\n7.  `Promise.race(iterator)`：执行iterator中的方法，方法之间可以理解为或的关系。回调的是最早执行的函数的状态，如果最早的函数执行结果是fulfilled，则回调fulfilled，否则回调reject。如果迭代内容iterator是空，则永远等待。\n8. `Promise.allSettled(iterator)`将iterator包装成一个Prmoise实例，再执行iterator中的方法，所有方法都完成后才返回结果，返回结果是包含iterator执行结果的数组，且返回时Promise的状态一定是fulfilled。返回结果的数组中，每一项都有status属性，对应着Prmoise的执行结果，值为`'fulfilled'`或`'rejected'`。该方法由ES2020引入。\n9. `Promise.any(iterator)`执行iterator中的方法。如果iterator中某个方法返回的Promise状态为fulfilled，则函数回调fulfilled，否则当所有方法都返回rejected时，才回调rejected方法。该方法当前处于第三阶段提案。\n10. `Promise.try()`现在仍然属于提案，可以捕获Promise执行函数中的所有同步和异步错误。与`Promise.catch()`相呼应。\n\n\n## 参考资料\n* 使用Promise。From mdn：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\n* Promise对象：From mdn：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n* Promise对象：From 阮一峰：https://es6.ruanyifeng.com/#docs/promise#Promise-reject","source":"_posts/js基础/关于异步方法一.md","raw":"---\ntitle: 关于异步方法（一）：使用Promise #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-05 10:05:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [js异步] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: js异步\n---\n\n## 1. 时刻牢记：ajax请求是异步的。\n比如：A方法调用ajax请求,B方法调用A方法，同时B方法调用C方法进行一些涉及到ajax返回的数据的处理工作（因某些原因该工作不能放到ajax请求的回调函数中，比如需要用到另一个ajax请求的内容）。\n\n伪代码如下，用axios替代ajax请求：\n```\n// 这段代码的目的：通过B函数，成功为经过ajax请求获取到的id设置name。\n\n// 全局变量\nvar data = []   // 我们最终要设置的变量\nvar mapRelation = [{userId:123,userName:1234}]  // 注意：这是通过另外一个ajax请求获得的。所以处理函数C不能或者说不方便放到A方法中。\n\n// 该方法通过异步请求，获取Id。\nfunction A(){\n    return axios(请求参数).then(res=>{\n        // 对请求所返回内容的处理工作\n        // 假如res为{userId:123};\n        data.push(res); \n    }).catch(err=>console.log(err))\n}\n\n\n// 该方法通过对象data的userId，为data设置userName。\nfunction C(data){\n    mapRelation.map(userItem=>{\n        if(userItem.userId === data.userId){\n            data.userName = userItem.uesrName;\n        }\n    })\n}\n\n// 设计B函数，为经过ajax请求获取到的id设置name。\n// 错误的写法。\nfunction bWrong(){\n    // 这里并不会成功地为后台传来的userId找到usernName。\n    // 因为A中axios请求的回调函数和函数C()是并行的关系。\n    A();\n    C();\n}\n\n// 正确的写法\nfunction bCorrect(){\n    // 由于axios().then()返回的是一个promise对象（），该对象又被A函数返回，于是可以通过.then()的方式进行串行处理请求。\n    A().then(()=>{\n        C();\n    })\n}\n```\n\n#### 补充：\n1. Promise.then()的语法如下。其中`[]`中的内容代表可选内容。`Promise.then(onFulfilled[,onRejected])。`\n2. then()返回一个 Promise 对象。(关于Promise.then()的更多内容[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then))\n3. catch()返回一个 Promise 对象。(关于Promise.catch()的更多内容[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch))\n2. Promise定义于ES6.\n\n## 2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()\n在写项目的时候经常会遇到，需要得到两个ajax请求的结果后，才能进行数据处理的场景。此时用Promise.all()便能将两个异步请求与数据处理方法进行串行化。\n\n一般的写法是：\n```\nPromise.all([方法1，方法2]).then(res=>{\n    需要串行执行的方法\n})\n```\n\n#### 补充：\n1. Promise.all(iterable)方法，返回一个Promise实例。如果iterable参数的所有方法执行成功，则返回的Promise实例中的参数为iterable执行成功后的返回值。否则返回没有成功执行的原因。\n\n## 3. 不得不说：Promise真的是个好东西。\n1. 解决了异步请求进行同步执行的问题。\n2. 解决了回调地狱的问题，链式调用简介又直观还好写。\n\n### Promise对象的状态\n* pendding，指异步操作正在进行中。\n* fulfilled，指异步操作成功完成。\n* rejected，指异步操作执行失败。\n\n#### 补充：Promise相关的方法\n1. `Promise.resolve()`：个人理解是Prmoise的一个状态，指问题成功解决、代码成功运行,设置Promise处于fulfilled状态。\n2. `Promise.reject()`：问题解决失败或代码运行失败。\n3. `Promise.then(succes,failed)`：在then中加入Promise状态为fulfilled或者reject的回调函数，链式执行。\n4. `Promise.catch(failed)`：仅在Promise状态为reject或者抛出异常时运行catch中的函数。\n5. `Promise.finally()`：仅在Promise结束时运行，无论结果是reject还是fulfilled。\n6. `Promise.all(iterator)`：执行iterator中的所有方法，方法之间是且的关系。如果全部方法的执行结果全部为fulfilled或未返回Promise的情况，回调fulfilled，否则回调reject。\n7.  `Promise.race(iterator)`：执行iterator中的方法，方法之间可以理解为或的关系。回调的是最早执行的函数的状态，如果最早的函数执行结果是fulfilled，则回调fulfilled，否则回调reject。如果迭代内容iterator是空，则永远等待。\n8. `Promise.allSettled(iterator)`将iterator包装成一个Prmoise实例，再执行iterator中的方法，所有方法都完成后才返回结果，返回结果是包含iterator执行结果的数组，且返回时Promise的状态一定是fulfilled。返回结果的数组中，每一项都有status属性，对应着Prmoise的执行结果，值为`'fulfilled'`或`'rejected'`。该方法由ES2020引入。\n9. `Promise.any(iterator)`执行iterator中的方法。如果iterator中某个方法返回的Promise状态为fulfilled，则函数回调fulfilled，否则当所有方法都返回rejected时，才回调rejected方法。该方法当前处于第三阶段提案。\n10. `Promise.try()`现在仍然属于提案，可以捕获Promise执行函数中的所有同步和异步错误。与`Promise.catch()`相呼应。\n\n\n## 参考资料\n* 使用Promise。From mdn：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\n* Promise对象：From mdn：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n* Promise对象：From 阮一峰：https://es6.ruanyifeng.com/#docs/promise#Promise-reject","slug":"js基础/关于异步方法一","published":1,"updated":"2020-08-17T08:08:27.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kc0019ykrvd8u14hun","content":"<h2 id=\"1-时刻牢记：ajax请求是异步的。\"><a href=\"#1-时刻牢记：ajax请求是异步的。\" class=\"headerlink\" title=\"1. 时刻牢记：ajax请求是异步的。\"></a>1. 时刻牢记：ajax请求是异步的。</h2><p>比如：A方法调用ajax请求,B方法调用A方法，同时B方法调用C方法进行一些涉及到ajax返回的数据的处理工作（因某些原因该工作不能放到ajax请求的回调函数中，比如需要用到另一个ajax请求的内容）。</p>\n<p>伪代码如下，用axios替代ajax请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这段代码的目的：通过B函数，成功为经过ajax请求获取到的id设置name。</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量</span><br><span class=\"line\">var data = []   // 我们最终要设置的变量</span><br><span class=\"line\">var mapRelation = [&#123;userId:123,userName:1234&#125;]  // 注意：这是通过另外一个ajax请求获得的。所以处理函数C不能或者说不方便放到A方法中。</span><br><span class=\"line\"></span><br><span class=\"line\">// 该方法通过异步请求，获取Id。</span><br><span class=\"line\">function A()&#123;</span><br><span class=\"line\">    return axios(请求参数).then(res=&gt;&#123;</span><br><span class=\"line\">        // 对请求所返回内容的处理工作</span><br><span class=\"line\">        // 假如res为&#123;userId:123&#125;;</span><br><span class=\"line\">        data.push(res); </span><br><span class=\"line\">    &#125;).catch(err=&gt;console.log(err))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 该方法通过对象data的userId，为data设置userName。</span><br><span class=\"line\">function C(data)&#123;</span><br><span class=\"line\">    mapRelation.map(userItem=&gt;&#123;</span><br><span class=\"line\">        if(userItem.userId === data.userId)&#123;</span><br><span class=\"line\">            data.userName = userItem.uesrName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设计B函数，为经过ajax请求获取到的id设置name。</span><br><span class=\"line\">// 错误的写法。</span><br><span class=\"line\">function bWrong()&#123;</span><br><span class=\"line\">    // 这里并不会成功地为后台传来的userId找到usernName。</span><br><span class=\"line\">    // 因为A中axios请求的回调函数和函数C()是并行的关系。</span><br><span class=\"line\">    A();</span><br><span class=\"line\">    C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确的写法</span><br><span class=\"line\">function bCorrect()&#123;</span><br><span class=\"line\">    // 由于axios().then()返回的是一个promise对象（），该对象又被A函数返回，于是可以通过.then()的方式进行串行处理请求。</span><br><span class=\"line\">    A().then(()=&gt;&#123;</span><br><span class=\"line\">        C();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h4><ol>\n<li>Promise.then()的语法如下。其中<code>[]</code>中的内容代表可选内容。<code>Promise.then(onFulfilled[,onRejected])。</code></li>\n<li>then()返回一个 Promise 对象。(关于Promise.then()的更多内容<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\" target=\"_blank\" rel=\"noopener\">mdn</a>)</li>\n<li>catch()返回一个 Promise 对象。(关于Promise.catch()的更多内容<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\" target=\"_blank\" rel=\"noopener\">mdn</a>)</li>\n<li>Promise定义于ES6.</li>\n</ol>\n<h2 id=\"2-在多个异步请求执行完毕后，执行一段代码——Promise-all\"><a href=\"#2-在多个异步请求执行完毕后，执行一段代码——Promise-all\" class=\"headerlink\" title=\"2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()\"></a>2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()</h2><p>在写项目的时候经常会遇到，需要得到两个ajax请求的结果后，才能进行数据处理的场景。此时用Promise.all()便能将两个异步请求与数据处理方法进行串行化。</p>\n<p>一般的写法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([方法1，方法2]).then(res=&gt;&#123;</span><br><span class=\"line\">    需要串行执行的方法</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：-1\"><a href=\"#补充：-1\" class=\"headerlink\" title=\"补充：\"></a>补充：</h4><ol>\n<li>Promise.all(iterable)方法，返回一个Promise实例。如果iterable参数的所有方法执行成功，则返回的Promise实例中的参数为iterable执行成功后的返回值。否则返回没有成功执行的原因。</li>\n</ol>\n<h2 id=\"3-不得不说：Promise真的是个好东西。\"><a href=\"#3-不得不说：Promise真的是个好东西。\" class=\"headerlink\" title=\"3. 不得不说：Promise真的是个好东西。\"></a>3. 不得不说：Promise真的是个好东西。</h2><ol>\n<li>解决了异步请求进行同步执行的问题。</li>\n<li>解决了回调地狱的问题，链式调用简介又直观还好写。</li>\n</ol>\n<h3 id=\"Promise对象的状态\"><a href=\"#Promise对象的状态\" class=\"headerlink\" title=\"Promise对象的状态\"></a>Promise对象的状态</h3><ul>\n<li>pendding，指异步操作正在进行中。</li>\n<li>fulfilled，指异步操作成功完成。</li>\n<li>rejected，指异步操作执行失败。</li>\n</ul>\n<h4 id=\"补充：Promise相关的方法\"><a href=\"#补充：Promise相关的方法\" class=\"headerlink\" title=\"补充：Promise相关的方法\"></a>补充：Promise相关的方法</h4><ol>\n<li><code>Promise.resolve()</code>：个人理解是Prmoise的一个状态，指问题成功解决、代码成功运行,设置Promise处于fulfilled状态。</li>\n<li><code>Promise.reject()</code>：问题解决失败或代码运行失败。</li>\n<li><code>Promise.then(succes,failed)</code>：在then中加入Promise状态为fulfilled或者reject的回调函数，链式执行。</li>\n<li><code>Promise.catch(failed)</code>：仅在Promise状态为reject或者抛出异常时运行catch中的函数。</li>\n<li><code>Promise.finally()</code>：仅在Promise结束时运行，无论结果是reject还是fulfilled。</li>\n<li><code>Promise.all(iterator)</code>：执行iterator中的所有方法，方法之间是且的关系。如果全部方法的执行结果全部为fulfilled或未返回Promise的情况，回调fulfilled，否则回调reject。</li>\n<li><code>Promise.race(iterator)</code>：执行iterator中的方法，方法之间可以理解为或的关系。回调的是最早执行的函数的状态，如果最早的函数执行结果是fulfilled，则回调fulfilled，否则回调reject。如果迭代内容iterator是空，则永远等待。</li>\n<li><code>Promise.allSettled(iterator)</code>将iterator包装成一个Prmoise实例，再执行iterator中的方法，所有方法都完成后才返回结果，返回结果是包含iterator执行结果的数组，且返回时Promise的状态一定是fulfilled。返回结果的数组中，每一项都有status属性，对应着Prmoise的执行结果，值为<code>&#39;fulfilled&#39;</code>或<code>&#39;rejected&#39;</code>。该方法由ES2020引入。</li>\n<li><code>Promise.any(iterator)</code>执行iterator中的方法。如果iterator中某个方法返回的Promise状态为fulfilled，则函数回调fulfilled，否则当所有方法都返回rejected时，才回调rejected方法。该方法当前处于第三阶段提案。</li>\n<li><code>Promise.try()</code>现在仍然属于提案，可以捕获Promise执行函数中的所有同步和异步错误。与<code>Promise.catch()</code>相呼应。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>使用Promise。From mdn：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises</a></li>\n<li>Promise对象：From mdn：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n<li>Promise对象：From 阮一峰：<a href=\"https://es6.ruanyifeng.com/#docs/promise#Promise-reject\" target=\"_blank\" rel=\"noopener\">https://es6.ruanyifeng.com/#docs/promise#Promise-reject</a></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"1-时刻牢记：ajax请求是异步的。\"><a href=\"#1-时刻牢记：ajax请求是异步的。\" class=\"headerlink\" title=\"1. 时刻牢记：ajax请求是异步的。\"></a>1. 时刻牢记：ajax请求是异步的。</h2><p>比如：A方法调用ajax请求,B方法调用A方法，同时B方法调用C方法进行一些涉及到ajax返回的数据的处理工作（因某些原因该工作不能放到ajax请求的回调函数中，比如需要用到另一个ajax请求的内容）。</p>\n<p>伪代码如下，用axios替代ajax请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这段代码的目的：通过B函数，成功为经过ajax请求获取到的id设置name。</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量</span><br><span class=\"line\">var data = []   // 我们最终要设置的变量</span><br><span class=\"line\">var mapRelation = [&#123;userId:123,userName:1234&#125;]  // 注意：这是通过另外一个ajax请求获得的。所以处理函数C不能或者说不方便放到A方法中。</span><br><span class=\"line\"></span><br><span class=\"line\">// 该方法通过异步请求，获取Id。</span><br><span class=\"line\">function A()&#123;</span><br><span class=\"line\">    return axios(请求参数).then(res=&gt;&#123;</span><br><span class=\"line\">        // 对请求所返回内容的处理工作</span><br><span class=\"line\">        // 假如res为&#123;userId:123&#125;;</span><br><span class=\"line\">        data.push(res); </span><br><span class=\"line\">    &#125;).catch(err=&gt;console.log(err))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 该方法通过对象data的userId，为data设置userName。</span><br><span class=\"line\">function C(data)&#123;</span><br><span class=\"line\">    mapRelation.map(userItem=&gt;&#123;</span><br><span class=\"line\">        if(userItem.userId === data.userId)&#123;</span><br><span class=\"line\">            data.userName = userItem.uesrName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设计B函数，为经过ajax请求获取到的id设置name。</span><br><span class=\"line\">// 错误的写法。</span><br><span class=\"line\">function bWrong()&#123;</span><br><span class=\"line\">    // 这里并不会成功地为后台传来的userId找到usernName。</span><br><span class=\"line\">    // 因为A中axios请求的回调函数和函数C()是并行的关系。</span><br><span class=\"line\">    A();</span><br><span class=\"line\">    C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确的写法</span><br><span class=\"line\">function bCorrect()&#123;</span><br><span class=\"line\">    // 由于axios().then()返回的是一个promise对象（），该对象又被A函数返回，于是可以通过.then()的方式进行串行处理请求。</span><br><span class=\"line\">    A().then(()=&gt;&#123;</span><br><span class=\"line\">        C();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h4><ol>\n<li>Promise.then()的语法如下。其中<code>[]</code>中的内容代表可选内容。<code>Promise.then(onFulfilled[,onRejected])。</code></li>\n<li>then()返回一个 Promise 对象。(关于Promise.then()的更多内容<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\" target=\"_blank\" rel=\"noopener\">mdn</a>)</li>\n<li>catch()返回一个 Promise 对象。(关于Promise.catch()的更多内容<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\" target=\"_blank\" rel=\"noopener\">mdn</a>)</li>\n<li>Promise定义于ES6.</li>\n</ol>\n<h2 id=\"2-在多个异步请求执行完毕后，执行一段代码——Promise-all\"><a href=\"#2-在多个异步请求执行完毕后，执行一段代码——Promise-all\" class=\"headerlink\" title=\"2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()\"></a>2. 在多个异步请求执行完毕后，执行一段代码——Promise.all()</h2><p>在写项目的时候经常会遇到，需要得到两个ajax请求的结果后，才能进行数据处理的场景。此时用Promise.all()便能将两个异步请求与数据处理方法进行串行化。</p>\n<p>一般的写法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all([方法1，方法2]).then(res=&gt;&#123;</span><br><span class=\"line\">    需要串行执行的方法</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：-1\"><a href=\"#补充：-1\" class=\"headerlink\" title=\"补充：\"></a>补充：</h4><ol>\n<li>Promise.all(iterable)方法，返回一个Promise实例。如果iterable参数的所有方法执行成功，则返回的Promise实例中的参数为iterable执行成功后的返回值。否则返回没有成功执行的原因。</li>\n</ol>\n<h2 id=\"3-不得不说：Promise真的是个好东西。\"><a href=\"#3-不得不说：Promise真的是个好东西。\" class=\"headerlink\" title=\"3. 不得不说：Promise真的是个好东西。\"></a>3. 不得不说：Promise真的是个好东西。</h2><ol>\n<li>解决了异步请求进行同步执行的问题。</li>\n<li>解决了回调地狱的问题，链式调用简介又直观还好写。</li>\n</ol>\n<h3 id=\"Promise对象的状态\"><a href=\"#Promise对象的状态\" class=\"headerlink\" title=\"Promise对象的状态\"></a>Promise对象的状态</h3><ul>\n<li>pendding，指异步操作正在进行中。</li>\n<li>fulfilled，指异步操作成功完成。</li>\n<li>rejected，指异步操作执行失败。</li>\n</ul>\n<h4 id=\"补充：Promise相关的方法\"><a href=\"#补充：Promise相关的方法\" class=\"headerlink\" title=\"补充：Promise相关的方法\"></a>补充：Promise相关的方法</h4><ol>\n<li><code>Promise.resolve()</code>：个人理解是Prmoise的一个状态，指问题成功解决、代码成功运行,设置Promise处于fulfilled状态。</li>\n<li><code>Promise.reject()</code>：问题解决失败或代码运行失败。</li>\n<li><code>Promise.then(succes,failed)</code>：在then中加入Promise状态为fulfilled或者reject的回调函数，链式执行。</li>\n<li><code>Promise.catch(failed)</code>：仅在Promise状态为reject或者抛出异常时运行catch中的函数。</li>\n<li><code>Promise.finally()</code>：仅在Promise结束时运行，无论结果是reject还是fulfilled。</li>\n<li><code>Promise.all(iterator)</code>：执行iterator中的所有方法，方法之间是且的关系。如果全部方法的执行结果全部为fulfilled或未返回Promise的情况，回调fulfilled，否则回调reject。</li>\n<li><code>Promise.race(iterator)</code>：执行iterator中的方法，方法之间可以理解为或的关系。回调的是最早执行的函数的状态，如果最早的函数执行结果是fulfilled，则回调fulfilled，否则回调reject。如果迭代内容iterator是空，则永远等待。</li>\n<li><code>Promise.allSettled(iterator)</code>将iterator包装成一个Prmoise实例，再执行iterator中的方法，所有方法都完成后才返回结果，返回结果是包含iterator执行结果的数组，且返回时Promise的状态一定是fulfilled。返回结果的数组中，每一项都有status属性，对应着Prmoise的执行结果，值为<code>&#39;fulfilled&#39;</code>或<code>&#39;rejected&#39;</code>。该方法由ES2020引入。</li>\n<li><code>Promise.any(iterator)</code>执行iterator中的方法。如果iterator中某个方法返回的Promise状态为fulfilled，则函数回调fulfilled，否则当所有方法都返回rejected时，才回调rejected方法。该方法当前处于第三阶段提案。</li>\n<li><code>Promise.try()</code>现在仍然属于提案，可以捕获Promise执行函数中的所有同步和异步错误。与<code>Promise.catch()</code>相呼应。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>使用Promise。From mdn：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises</a></li>\n<li>Promise对象：From mdn：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n<li>Promise对象：From 阮一峰：<a href=\"https://es6.ruanyifeng.com/#docs/promise#Promise-reject\" target=\"_blank\" rel=\"noopener\">https://es6.ruanyifeng.com/#docs/promise#Promise-reject</a></li>\n</ul>\n"},{"title":"关于异步（二）：async function","date":"2020-03-10T07:09:00.000Z","description":"js异步","_content":"\n只需要两个关键字：async、await，辅助Promise的一些方法，即可优雅地将异步请求进行串行处理。\n\n本文主要展示async的用法。顺带将async与Promise进行比较，同时指出了setTimeout函数的一些注意事项。\n\n<!-- more-->\n\n## async和await\n### 使用async和await将异步请求串行传里的方法\n1. 首先要将包含异步操作的函数，声明为异步函数\n2. 在异步方法前加await关键字。\n\n### async关键字\n1. async关键字的功能：声明异步函数。\n\n### await关键字\n1. await关键字的功能：暂停异步函数的执行，等接收到Promise的执行结果后，再继续异步函数的执行。\n2. await关键字的返回值：返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。\n2. await关键字的使用条件：必须在async function中才能使用。\n\n\n### 用法示例\n```javascript\n    async function(){\n        console.log(\"准备执行异步方法...\");\n        var returnVal = await asyncFunction();  // asyncFunciton 是一个包含异步方法的函数，如包含ajax通信或setTimeout的函数\n        console.log(\"异步方法执行完毕！\")\n    }\n```\n\n## 具体示例1：串行执行异步方法\n\n只言片语可能无法很好理解，下面是一个小的示例，比较了promise的链式语法和async function的区别。\n\n我们期望在两秒后，对value变量设置一个值，并打印其结果。但是在实现上有些条件。\n1. 需要在一个方法中调用setTimeout。\n2. 在另一个方法中调用这个方法，并设置变量的值。\n\n是不是像极了平时写项目时，在一个方法中发起ajax请求，再另一个方法中调用这个请求，并接收请求返回的内容，对内容进行下一步的处理？\n\n### 第一种写法：一种错误的示例\n不使用Promise、不使用async function，博主在什么都不懂时便写过类似的代码，但这种写法肯定不行，无法满足要求。\n```\nfunction setValueAfter2Seconds(){\n    return setTimeout(()=>{\n        console.log(\"setTimeout 执行完毕\")\n        return \"new value\"\n    },2000)\n}\n\nfunction test(){\n    var value = \"old value\";\n    console.log(\"准备调用\");\n    value = setValueAfter2Seconds()\n    console.log(\"结束调用，准备打印值\");\n    console.log(value);\n}\n```\n\n错误原因：\n1. 注意，setTimeout回调函数的返回值和setTimeout的返回值没有任何关系！没有任何关系！没有任何关系！所以通过在setTimeout函数中进行return没有任何作用！setTimeout的返回值是一个唯一的id，用于传入给`clearTimeout`后可取消该定时器。\n2. setTimeout方法和其他语句是异步执行的，具体原因需要了解js中的并发模型与事件循环的机制。我们只消知道setTimeout是个异步的方法即可。\n\n### 第二种写法：Promise的写法\n使用Promise链式语法的方案如下所示：\n```javascript\nfunction setValueAfter2Seconds(){\n    return new Promise((resolve)=>{\n        console.log(`setTimeout 准备执行`)\n        setTimeout(()=>{\n            console.log(`setTimeout 执行结束`)\n            resolve(`new value`);\n        },2000)\n    })\n}\n\nfunction test(){\n    var value = \"old value\";\n\n    console.log(\"Promise执行函数 准备执行\");\n    setValueAfter2Seconds().then(res=>{\n        console.log(\"Promise执行函数 执行结束\");\n        value = res;\n        console.log(value);\n    });\n    console.log(\"Promise链外部的内容仍然会先于setTimeout执行\");\n}\n```\n下面对代码进行分析\n1. 在`setValueAfter2Seconds()`中，返回了一个Promise对象。该对象的参数为一个函数，叫做“执行函数”。执行函数接受的第一个参数resolve，是Promise的一个方法。当执行函数中的所有内容顺利完成时，将调用resolve函数，否则会调用reject函数（此处未添加，reject是执行器函数的第二个参数）。\n2. 在`test()`中，运行了`setValueAfter2Seconds()`后，执行Promise对象的then方法（`then()`即Promise的执行函数顺利完成后执行的方法），`then()`接收的参数为一个函数，被称作“处理方法（handlers）”。所有期望在`setValueAfter2Seconds()`方法执行完毕后，继续执行的代码需要写到“处理方法(handlers)”中。\"处理方法\"之外的语句，与Promise链中的语句仍然是异步执行（这点注意，这是Promise与async不同的最大表现之一）。\n\n### 第三种写法：使用async\n```javascript\nasync function setValueAfter2Seconds(){\n    return new Promise((resolve)=>{\n        console.log(`setTimeout 准备执行`)\n        setTimeout(()=>{\n            console.log(`setTimeout 执行结束`)\n            resolve(`new value`);\n        },2000)\n    })\n}\n\nasync function test(){\n    var value = \"old value\";\n\n    console.log(\"Prmomise执行函数准备执行\");\n    value = await setValueAfter2Seconds();\n    console.log(\"Promise执行函数 执行结束\");\n    console.log(value);\n}\n```\n下面对代码进行分析：\n1. 使用`async`关键字声明`test()`是一个异步函数。\n2. 使用`await`关键字暂停异步函数的执行，等待Promise执行函数运行完毕，接收Promise对象的处理结果，即resolve函数的参数`new value`，并赋值给value变量，然后执行后续的代码。\n\n### 具体示例2：并行执行异步方法\n\n### Promise写法\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentPromise = function() {\n    console.log(\"开始并行执行异步方法\");\n\n    Promise.all([asyncFunction1(), asyncFunction2()]).then((messages) => {\n        console.log(messages[0]);\n        console.log(messages[1]);\n    });\n    console.log(\"Promise.all外部的内容仍然会先于setTimeout执行\");\n}\n```\n\n### async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentAsync1 = async function() {\n    console.log(\"开始并行执行异步方法\");\n\n    await Promise.all([asyncFunction1(), asyncFunction2()]).then((messages) => {\n        console.log(messages[0]);\n        console.log(messages[1]);\n    });\n    console.log(\"Promise.all外部的内容与Promise.all顺序执行\");\n}\n```\n\n### async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentAsync2 = async function() {\n    var message = [0,0];\n    console.log(\"开始并行执行异步方法\");\n    \n    message[0] = asyncFunction1();\n    message[1] = asyncFunction2();\n\n    console.log(await message[0]);\n    console.log(await message[1]);\n    console.log(\"async1Funvtion1、asyncFunction2的并行执行，其他内容串行执行\");\n}\n```\n\n\n## async await和Promise链式写法的区别\n1. async写法避免了Promise的链式写法。\n2. 结合使用async和Promise能发挥更大的作用。","source":"_posts/js基础/关于异步方法二.md","raw":"---\ntitle: 关于异步（二）：async function #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-10 15:09:00 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [js异步] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: js异步\n---\n\n只需要两个关键字：async、await，辅助Promise的一些方法，即可优雅地将异步请求进行串行处理。\n\n本文主要展示async的用法。顺带将async与Promise进行比较，同时指出了setTimeout函数的一些注意事项。\n\n<!-- more-->\n\n## async和await\n### 使用async和await将异步请求串行传里的方法\n1. 首先要将包含异步操作的函数，声明为异步函数\n2. 在异步方法前加await关键字。\n\n### async关键字\n1. async关键字的功能：声明异步函数。\n\n### await关键字\n1. await关键字的功能：暂停异步函数的执行，等接收到Promise的执行结果后，再继续异步函数的执行。\n2. await关键字的返回值：返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。\n2. await关键字的使用条件：必须在async function中才能使用。\n\n\n### 用法示例\n```javascript\n    async function(){\n        console.log(\"准备执行异步方法...\");\n        var returnVal = await asyncFunction();  // asyncFunciton 是一个包含异步方法的函数，如包含ajax通信或setTimeout的函数\n        console.log(\"异步方法执行完毕！\")\n    }\n```\n\n## 具体示例1：串行执行异步方法\n\n只言片语可能无法很好理解，下面是一个小的示例，比较了promise的链式语法和async function的区别。\n\n我们期望在两秒后，对value变量设置一个值，并打印其结果。但是在实现上有些条件。\n1. 需要在一个方法中调用setTimeout。\n2. 在另一个方法中调用这个方法，并设置变量的值。\n\n是不是像极了平时写项目时，在一个方法中发起ajax请求，再另一个方法中调用这个请求，并接收请求返回的内容，对内容进行下一步的处理？\n\n### 第一种写法：一种错误的示例\n不使用Promise、不使用async function，博主在什么都不懂时便写过类似的代码，但这种写法肯定不行，无法满足要求。\n```\nfunction setValueAfter2Seconds(){\n    return setTimeout(()=>{\n        console.log(\"setTimeout 执行完毕\")\n        return \"new value\"\n    },2000)\n}\n\nfunction test(){\n    var value = \"old value\";\n    console.log(\"准备调用\");\n    value = setValueAfter2Seconds()\n    console.log(\"结束调用，准备打印值\");\n    console.log(value);\n}\n```\n\n错误原因：\n1. 注意，setTimeout回调函数的返回值和setTimeout的返回值没有任何关系！没有任何关系！没有任何关系！所以通过在setTimeout函数中进行return没有任何作用！setTimeout的返回值是一个唯一的id，用于传入给`clearTimeout`后可取消该定时器。\n2. setTimeout方法和其他语句是异步执行的，具体原因需要了解js中的并发模型与事件循环的机制。我们只消知道setTimeout是个异步的方法即可。\n\n### 第二种写法：Promise的写法\n使用Promise链式语法的方案如下所示：\n```javascript\nfunction setValueAfter2Seconds(){\n    return new Promise((resolve)=>{\n        console.log(`setTimeout 准备执行`)\n        setTimeout(()=>{\n            console.log(`setTimeout 执行结束`)\n            resolve(`new value`);\n        },2000)\n    })\n}\n\nfunction test(){\n    var value = \"old value\";\n\n    console.log(\"Promise执行函数 准备执行\");\n    setValueAfter2Seconds().then(res=>{\n        console.log(\"Promise执行函数 执行结束\");\n        value = res;\n        console.log(value);\n    });\n    console.log(\"Promise链外部的内容仍然会先于setTimeout执行\");\n}\n```\n下面对代码进行分析\n1. 在`setValueAfter2Seconds()`中，返回了一个Promise对象。该对象的参数为一个函数，叫做“执行函数”。执行函数接受的第一个参数resolve，是Promise的一个方法。当执行函数中的所有内容顺利完成时，将调用resolve函数，否则会调用reject函数（此处未添加，reject是执行器函数的第二个参数）。\n2. 在`test()`中，运行了`setValueAfter2Seconds()`后，执行Promise对象的then方法（`then()`即Promise的执行函数顺利完成后执行的方法），`then()`接收的参数为一个函数，被称作“处理方法（handlers）”。所有期望在`setValueAfter2Seconds()`方法执行完毕后，继续执行的代码需要写到“处理方法(handlers)”中。\"处理方法\"之外的语句，与Promise链中的语句仍然是异步执行（这点注意，这是Promise与async不同的最大表现之一）。\n\n### 第三种写法：使用async\n```javascript\nasync function setValueAfter2Seconds(){\n    return new Promise((resolve)=>{\n        console.log(`setTimeout 准备执行`)\n        setTimeout(()=>{\n            console.log(`setTimeout 执行结束`)\n            resolve(`new value`);\n        },2000)\n    })\n}\n\nasync function test(){\n    var value = \"old value\";\n\n    console.log(\"Prmomise执行函数准备执行\");\n    value = await setValueAfter2Seconds();\n    console.log(\"Promise执行函数 执行结束\");\n    console.log(value);\n}\n```\n下面对代码进行分析：\n1. 使用`async`关键字声明`test()`是一个异步函数。\n2. 使用`await`关键字暂停异步函数的执行，等待Promise执行函数运行完毕，接收Promise对象的处理结果，即resolve函数的参数`new value`，并赋值给value变量，然后执行后续的代码。\n\n### 具体示例2：并行执行异步方法\n\n### Promise写法\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentPromise = function() {\n    console.log(\"开始并行执行异步方法\");\n\n    Promise.all([asyncFunction1(), asyncFunction2()]).then((messages) => {\n        console.log(messages[0]);\n        console.log(messages[1]);\n    });\n    console.log(\"Promise.all外部的内容仍然会先于setTimeout执行\");\n}\n```\n\n### async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentAsync1 = async function() {\n    console.log(\"开始并行执行异步方法\");\n\n    await Promise.all([asyncFunction1(), asyncFunction2()]).then((messages) => {\n        console.log(messages[0]);\n        console.log(messages[1]);\n    });\n    console.log(\"Promise.all外部的内容与Promise.all顺序执行\");\n}\n```\n\n### async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\n```javascript\nvar asyncFunction1 = function() {\n    console.log(\"异步方法1 准备执行 等待时间设置为1秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法1\");\n            console.log(\"异步方法1 执行完毕\");\n        }, 1000);\n    });\n};\n\nvar asyncFunction2 = function() {\n    console.log(\"异步方法2 准备执行 等待时间设置为2秒\");\n    return new Promise(resolve => {\n        setTimeout(function() {\n            resolve(\"异步方法2\");\n            console.log(\"异步方法2 执行完毕\");\n        }, 2000);\n    });\n};\n\n\nvar concurrentAsync2 = async function() {\n    var message = [0,0];\n    console.log(\"开始并行执行异步方法\");\n    \n    message[0] = asyncFunction1();\n    message[1] = asyncFunction2();\n\n    console.log(await message[0]);\n    console.log(await message[1]);\n    console.log(\"async1Funvtion1、asyncFunction2的并行执行，其他内容串行执行\");\n}\n```\n\n\n## async await和Promise链式写法的区别\n1. async写法避免了Promise的链式写法。\n2. 结合使用async和Promise能发挥更大的作用。","slug":"js基础/关于异步方法二","published":1,"updated":"2020-08-17T08:08:32.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kd001aykrv4k0zsecn","content":"<p>只需要两个关键字：async、await，辅助Promise的一些方法，即可优雅地将异步请求进行串行处理。</p>\n<p>本文主要展示async的用法。顺带将async与Promise进行比较，同时指出了setTimeout函数的一些注意事项。</p>\n<a id=\"more\"></a>\n<h2 id=\"async和await\"><a href=\"#async和await\" class=\"headerlink\" title=\"async和await\"></a>async和await</h2><h3 id=\"使用async和await将异步请求串行传里的方法\"><a href=\"#使用async和await将异步请求串行传里的方法\" class=\"headerlink\" title=\"使用async和await将异步请求串行传里的方法\"></a>使用async和await将异步请求串行传里的方法</h3><ol>\n<li>首先要将包含异步操作的函数，声明为异步函数</li>\n<li>在异步方法前加await关键字。</li>\n</ol>\n<h3 id=\"async关键字\"><a href=\"#async关键字\" class=\"headerlink\" title=\"async关键字\"></a>async关键字</h3><ol>\n<li>async关键字的功能：声明异步函数。</li>\n</ol>\n<h3 id=\"await关键字\"><a href=\"#await关键字\" class=\"headerlink\" title=\"await关键字\"></a>await关键字</h3><ol>\n<li>await关键字的功能：暂停异步函数的执行，等接收到Promise的执行结果后，再继续异步函数的执行。</li>\n<li>await关键字的返回值：返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</li>\n<li>await关键字的使用条件：必须在async function中才能使用。</li>\n</ol>\n<h3 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备执行异步方法...\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnVal = <span class=\"keyword\">await</span> asyncFunction();  <span class=\"comment\">// asyncFunciton 是一个包含异步方法的函数，如包含ajax通信或setTimeout的函数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法执行完毕！\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体示例1：串行执行异步方法\"><a href=\"#具体示例1：串行执行异步方法\" class=\"headerlink\" title=\"具体示例1：串行执行异步方法\"></a>具体示例1：串行执行异步方法</h2><p>只言片语可能无法很好理解，下面是一个小的示例，比较了promise的链式语法和async function的区别。</p>\n<p>我们期望在两秒后，对value变量设置一个值，并打印其结果。但是在实现上有些条件。</p>\n<ol>\n<li>需要在一个方法中调用setTimeout。</li>\n<li>在另一个方法中调用这个方法，并设置变量的值。</li>\n</ol>\n<p>是不是像极了平时写项目时，在一个方法中发起ajax请求，再另一个方法中调用这个请求，并接收请求返回的内容，对内容进行下一步的处理？</p>\n<h3 id=\"第一种写法：一种错误的示例\"><a href=\"#第一种写法：一种错误的示例\" class=\"headerlink\" title=\"第一种写法：一种错误的示例\"></a>第一种写法：一种错误的示例</h3><p>不使用Promise、不使用async function，博主在什么都不懂时便写过类似的代码，但这种写法肯定不行，无法满足要求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setValueAfter2Seconds()&#123;</span><br><span class=\"line\">    return setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        console.log(&quot;setTimeout 执行完毕&quot;)</span><br><span class=\"line\">        return &quot;new value&quot;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    var value = &quot;old value&quot;;</span><br><span class=\"line\">    console.log(&quot;准备调用&quot;);</span><br><span class=\"line\">    value = setValueAfter2Seconds()</span><br><span class=\"line\">    console.log(&quot;结束调用，准备打印值&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>错误原因：</p>\n<ol>\n<li>注意，setTimeout回调函数的返回值和setTimeout的返回值没有任何关系！没有任何关系！没有任何关系！所以通过在setTimeout函数中进行return没有任何作用！setTimeout的返回值是一个唯一的id，用于传入给<code>clearTimeout</code>后可取消该定时器。</li>\n<li>setTimeout方法和其他语句是异步执行的，具体原因需要了解js中的并发模型与事件循环的机制。我们只消知道setTimeout是个异步的方法即可。</li>\n</ol>\n<h3 id=\"第二种写法：Promise的写法\"><a href=\"#第二种写法：Promise的写法\" class=\"headerlink\" title=\"第二种写法：Promise的写法\"></a>第二种写法：Promise的写法</h3><p>使用Promise链式语法的方案如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setValueAfter2Seconds</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 准备执行`</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 执行结束`</span>)</span><br><span class=\"line\">            resolve(<span class=\"string\">`new value`</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"string\">\"old value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 准备执行\"</span>);</span><br><span class=\"line\">    setValueAfter2Seconds().then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 执行结束\"</span>);</span><br><span class=\"line\">        value = res;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise链外部的内容仍然会先于setTimeout执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面对代码进行分析</p>\n<ol>\n<li>在<code>setValueAfter2Seconds()</code>中，返回了一个Promise对象。该对象的参数为一个函数，叫做“执行函数”。执行函数接受的第一个参数resolve，是Promise的一个方法。当执行函数中的所有内容顺利完成时，将调用resolve函数，否则会调用reject函数（此处未添加，reject是执行器函数的第二个参数）。</li>\n<li>在<code>test()</code>中，运行了<code>setValueAfter2Seconds()</code>后，执行Promise对象的then方法（<code>then()</code>即Promise的执行函数顺利完成后执行的方法），<code>then()</code>接收的参数为一个函数，被称作“处理方法（handlers）”。所有期望在<code>setValueAfter2Seconds()</code>方法执行完毕后，继续执行的代码需要写到“处理方法(handlers)”中。”处理方法”之外的语句，与Promise链中的语句仍然是异步执行（这点注意，这是Promise与async不同的最大表现之一）。</li>\n</ol>\n<h3 id=\"第三种写法：使用async\"><a href=\"#第三种写法：使用async\" class=\"headerlink\" title=\"第三种写法：使用async\"></a>第三种写法：使用async</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setValueAfter2Seconds</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 准备执行`</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 执行结束`</span>)</span><br><span class=\"line\">            resolve(<span class=\"string\">`new value`</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"string\">\"old value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prmomise执行函数准备执行\"</span>);</span><br><span class=\"line\">    value = <span class=\"keyword\">await</span> setValueAfter2Seconds();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 执行结束\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面对代码进行分析：</p>\n<ol>\n<li>使用<code>async</code>关键字声明<code>test()</code>是一个异步函数。</li>\n<li>使用<code>await</code>关键字暂停异步函数的执行，等待Promise执行函数运行完毕，接收Promise对象的处理结果，即resolve函数的参数<code>new value</code>，并赋值给value变量，然后执行后续的代码。</li>\n</ol>\n<h3 id=\"具体示例2：并行执行异步方法\"><a href=\"#具体示例2：并行执行异步方法\" class=\"headerlink\" title=\"具体示例2：并行执行异步方法\"></a>具体示例2：并行执行异步方法</h3><h3 id=\"Promise写法\"><a href=\"#Promise写法\" class=\"headerlink\" title=\"Promise写法\"></a>Promise写法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentPromise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([asyncFunction1(), asyncFunction2()]).then(<span class=\"function\">(<span class=\"params\">messages</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise.all外部的内容仍然会先于setTimeout执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"async写法1：使用Promise-all，所有异步方法执行完毕后执行后续内容。\"><a href=\"#async写法1：使用Promise-all，所有异步方法执行完毕后执行后续内容。\" class=\"headerlink\" title=\"async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。\"></a>async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentAsync1 = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([asyncFunction1(), asyncFunction2()]).then(<span class=\"function\">(<span class=\"params\">messages</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise.all外部的内容与Promise.all顺序执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\"><a href=\"#async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\" class=\"headerlink\" title=\"async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\"></a>async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentAsync2 = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = [<span class=\"number\">0</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    message[<span class=\"number\">0</span>] = asyncFunction1();</span><br><span class=\"line\">    message[<span class=\"number\">1</span>] = asyncFunction2();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> message[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> message[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1Funvtion1、asyncFunction2的并行执行，其他内容串行执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-await和Promise链式写法的区别\"><a href=\"#async-await和Promise链式写法的区别\" class=\"headerlink\" title=\"async await和Promise链式写法的区别\"></a>async await和Promise链式写法的区别</h2><ol>\n<li>async写法避免了Promise的链式写法。</li>\n<li>结合使用async和Promise能发挥更大的作用。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>只需要两个关键字：async、await，辅助Promise的一些方法，即可优雅地将异步请求进行串行处理。</p>\n<p>本文主要展示async的用法。顺带将async与Promise进行比较，同时指出了setTimeout函数的一些注意事项。</p>","more":"<h2 id=\"async和await\"><a href=\"#async和await\" class=\"headerlink\" title=\"async和await\"></a>async和await</h2><h3 id=\"使用async和await将异步请求串行传里的方法\"><a href=\"#使用async和await将异步请求串行传里的方法\" class=\"headerlink\" title=\"使用async和await将异步请求串行传里的方法\"></a>使用async和await将异步请求串行传里的方法</h3><ol>\n<li>首先要将包含异步操作的函数，声明为异步函数</li>\n<li>在异步方法前加await关键字。</li>\n</ol>\n<h3 id=\"async关键字\"><a href=\"#async关键字\" class=\"headerlink\" title=\"async关键字\"></a>async关键字</h3><ol>\n<li>async关键字的功能：声明异步函数。</li>\n</ol>\n<h3 id=\"await关键字\"><a href=\"#await关键字\" class=\"headerlink\" title=\"await关键字\"></a>await关键字</h3><ol>\n<li>await关键字的功能：暂停异步函数的执行，等接收到Promise的执行结果后，再继续异步函数的执行。</li>\n<li>await关键字的返回值：返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</li>\n<li>await关键字的使用条件：必须在async function中才能使用。</li>\n</ol>\n<h3 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备执行异步方法...\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> returnVal = <span class=\"keyword\">await</span> asyncFunction();  <span class=\"comment\">// asyncFunciton 是一个包含异步方法的函数，如包含ajax通信或setTimeout的函数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法执行完毕！\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体示例1：串行执行异步方法\"><a href=\"#具体示例1：串行执行异步方法\" class=\"headerlink\" title=\"具体示例1：串行执行异步方法\"></a>具体示例1：串行执行异步方法</h2><p>只言片语可能无法很好理解，下面是一个小的示例，比较了promise的链式语法和async function的区别。</p>\n<p>我们期望在两秒后，对value变量设置一个值，并打印其结果。但是在实现上有些条件。</p>\n<ol>\n<li>需要在一个方法中调用setTimeout。</li>\n<li>在另一个方法中调用这个方法，并设置变量的值。</li>\n</ol>\n<p>是不是像极了平时写项目时，在一个方法中发起ajax请求，再另一个方法中调用这个请求，并接收请求返回的内容，对内容进行下一步的处理？</p>\n<h3 id=\"第一种写法：一种错误的示例\"><a href=\"#第一种写法：一种错误的示例\" class=\"headerlink\" title=\"第一种写法：一种错误的示例\"></a>第一种写法：一种错误的示例</h3><p>不使用Promise、不使用async function，博主在什么都不懂时便写过类似的代码，但这种写法肯定不行，无法满足要求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setValueAfter2Seconds()&#123;</span><br><span class=\"line\">    return setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        console.log(&quot;setTimeout 执行完毕&quot;)</span><br><span class=\"line\">        return &quot;new value&quot;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    var value = &quot;old value&quot;;</span><br><span class=\"line\">    console.log(&quot;准备调用&quot;);</span><br><span class=\"line\">    value = setValueAfter2Seconds()</span><br><span class=\"line\">    console.log(&quot;结束调用，准备打印值&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>错误原因：</p>\n<ol>\n<li>注意，setTimeout回调函数的返回值和setTimeout的返回值没有任何关系！没有任何关系！没有任何关系！所以通过在setTimeout函数中进行return没有任何作用！setTimeout的返回值是一个唯一的id，用于传入给<code>clearTimeout</code>后可取消该定时器。</li>\n<li>setTimeout方法和其他语句是异步执行的，具体原因需要了解js中的并发模型与事件循环的机制。我们只消知道setTimeout是个异步的方法即可。</li>\n</ol>\n<h3 id=\"第二种写法：Promise的写法\"><a href=\"#第二种写法：Promise的写法\" class=\"headerlink\" title=\"第二种写法：Promise的写法\"></a>第二种写法：Promise的写法</h3><p>使用Promise链式语法的方案如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setValueAfter2Seconds</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 准备执行`</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 执行结束`</span>)</span><br><span class=\"line\">            resolve(<span class=\"string\">`new value`</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"string\">\"old value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 准备执行\"</span>);</span><br><span class=\"line\">    setValueAfter2Seconds().then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 执行结束\"</span>);</span><br><span class=\"line\">        value = res;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise链外部的内容仍然会先于setTimeout执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面对代码进行分析</p>\n<ol>\n<li>在<code>setValueAfter2Seconds()</code>中，返回了一个Promise对象。该对象的参数为一个函数，叫做“执行函数”。执行函数接受的第一个参数resolve，是Promise的一个方法。当执行函数中的所有内容顺利完成时，将调用resolve函数，否则会调用reject函数（此处未添加，reject是执行器函数的第二个参数）。</li>\n<li>在<code>test()</code>中，运行了<code>setValueAfter2Seconds()</code>后，执行Promise对象的then方法（<code>then()</code>即Promise的执行函数顺利完成后执行的方法），<code>then()</code>接收的参数为一个函数，被称作“处理方法（handlers）”。所有期望在<code>setValueAfter2Seconds()</code>方法执行完毕后，继续执行的代码需要写到“处理方法(handlers)”中。”处理方法”之外的语句，与Promise链中的语句仍然是异步执行（这点注意，这是Promise与async不同的最大表现之一）。</li>\n</ol>\n<h3 id=\"第三种写法：使用async\"><a href=\"#第三种写法：使用async\" class=\"headerlink\" title=\"第三种写法：使用async\"></a>第三种写法：使用async</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setValueAfter2Seconds</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 准备执行`</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`setTimeout 执行结束`</span>)</span><br><span class=\"line\">            resolve(<span class=\"string\">`new value`</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"string\">\"old value\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prmomise执行函数准备执行\"</span>);</span><br><span class=\"line\">    value = <span class=\"keyword\">await</span> setValueAfter2Seconds();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise执行函数 执行结束\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面对代码进行分析：</p>\n<ol>\n<li>使用<code>async</code>关键字声明<code>test()</code>是一个异步函数。</li>\n<li>使用<code>await</code>关键字暂停异步函数的执行，等待Promise执行函数运行完毕，接收Promise对象的处理结果，即resolve函数的参数<code>new value</code>，并赋值给value变量，然后执行后续的代码。</li>\n</ol>\n<h3 id=\"具体示例2：并行执行异步方法\"><a href=\"#具体示例2：并行执行异步方法\" class=\"headerlink\" title=\"具体示例2：并行执行异步方法\"></a>具体示例2：并行执行异步方法</h3><h3 id=\"Promise写法\"><a href=\"#Promise写法\" class=\"headerlink\" title=\"Promise写法\"></a>Promise写法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentPromise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([asyncFunction1(), asyncFunction2()]).then(<span class=\"function\">(<span class=\"params\">messages</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise.all外部的内容仍然会先于setTimeout执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"async写法1：使用Promise-all，所有异步方法执行完毕后执行后续内容。\"><a href=\"#async写法1：使用Promise-all，所有异步方法执行完毕后执行后续内容。\" class=\"headerlink\" title=\"async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。\"></a>async写法1：使用Promise.all，所有异步方法执行完毕后执行后续内容。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentAsync1 = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([asyncFunction1(), asyncFunction2()]).then(<span class=\"function\">(<span class=\"params\">messages</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(messages[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Promise.all外部的内容与Promise.all顺序执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\"><a href=\"#async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\" class=\"headerlink\" title=\"async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。\"></a>async写法2：异步方法同时执行，其他内容串行执行，遇到await时阻塞。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 准备执行 等待时间设置为1秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法1\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法1 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> asyncFunction2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 准备执行 等待时间设置为2秒\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">\"异步方法2\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步方法2 执行完毕\"</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> concurrentAsync2 = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = [<span class=\"number\">0</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始并行执行异步方法\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    message[<span class=\"number\">0</span>] = asyncFunction1();</span><br><span class=\"line\">    message[<span class=\"number\">1</span>] = asyncFunction2();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> message[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> message[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1Funvtion1、asyncFunction2的并行执行，其他内容串行执行\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-await和Promise链式写法的区别\"><a href=\"#async-await和Promise链式写法的区别\" class=\"headerlink\" title=\"async await和Promise链式写法的区别\"></a>async await和Promise链式写法的区别</h2><ol>\n<li>async写法避免了Promise的链式写法。</li>\n<li>结合使用async和Promise能发挥更大的作用。</li>\n</ol>"},{"title":"关于箭头函数","date":"2020-07-01T15:35:30.000Z","_content":"\n1. 箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。\n2. 箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。","source":"_posts/js基础/关于箭头函数需要注意的地方.md","raw":"---\ntitle: 关于箭头函数 \ndate: 2020-07-01 23:35:30 \ncategories: es6\ntags: [es6, js]\n---\n\n1. 箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。\n2. 箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。","slug":"js基础/关于箭头函数需要注意的地方","published":1,"updated":"2020-08-17T08:08:05.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kd001bykrvneku8meq","content":"<ol>\n<li>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。</li>\n<li>箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<ol>\n<li>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。</li>\n<li>箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</li>\n</ol>\n"},{"title":"MySQL小记","date":"2020-03-15T01:40:30.000Z","description":"记录使用mysql时常用的语法、函数和语句。","_content":"\n记录使用mysql时常用的语法、函数和语句。\n\n<!-- more -->\n\n## 语法\n\n### case when语句\n* 用于计算条件列表并返回多个可能结果表达式之一。\n* 有两种形式，**简单case函数**和**case搜索函数**\n\n#### 1. 简单case函数\n语法如下：\n```\nCASE input_expression\n    WHEN when_expression THEN result_expression\n        [ ...n ]\n    [\n        ELSE else_result_expression\n    END\n```\n\n#### 2. case搜索函数\n```\nCASE   \nWHEN Boolean_expression THEN result_expression\n        [ ...n ]\n    [\n        ELSE else_result_expression\n    END\n```\n\n## 常用函数\n### 1. convert()\n把字段转换成指定类型。\n\n### 2. concat()\n* 作用：拼接字符串。\n* 语法：concat(str1,str2)\n\n### 3. dayofweek()\n* 作用：返回指定日期的工作日索引（即指定日期是一周中的第几天）。其中1是周日，2是周一，以此类推...7是周六。\n* 语法：dayofweek(date)\n\n### 4. dayofmonth()\n* 作用：返回指定日期所在月的天数的索引（即指定日期是一个月中的第几天）。范围为1到31。\n* 语法：dayofmonth(date)\n\n### 5. dayofyear()\n* 作用：返回指定日期date所在年的天数的索引（即指定日期是一年中的第几天）。范围为1到366。\n* 语法：dayofyear(date)\n\n### 6. weekofyear()\n* 作用：返回指定日期所在的星期是这一年的第几个星期。范围为1到53.\n* 语法：weekofyear(date)\n\n### 7. adddate(date,INTERVAL expr unit)\n* 作用：修改时间。向指定的日期添加指定的时间。\n* 语法：adddate(date,INTERVAL expr unit)\n\n### 8. curdate()\n* 作用：返回当前的日期。\n* 语法：curdate()\n\n### 9. year()\n* 作用：返回指定日期的年份。\n* 语法：year(date)\n\n### 10. month()\n* 作用：返回指定日期的月份。\n* 语法：month(date)\n\n### 11. quarter()\n* 作用：返回指定日期在一年中的季度。\n* 语法：quarter(date)\n\n### 12. sign()\n* 作用：根据X是负数、零或正数，将参数的符号返回为-1、0、或1\n* 语法：sign(x)\n\n### 13. find_in_set()\nFIND_IN_SET(str,strlist)\n\nstr 要查询的字符串\nstrlist 字段名 参数以”,”分隔 如 (1,2,6,8)\n查询字段(strlist)中包含(str)的结果，返回结果为null或记录\n\n假如字符串str在由N个子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。 一个字符串列表就是一个由一些被 ‘,’ 符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则FIND_IN_SET() 函数被优化，使用比特计算。 如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。\n\n## 常用语句\n1. 修改自增字段的起始值。\n```\nALTER table table_name\nAUTO_INCREMENT=起始值 \n```","source":"_posts/mysql/Mysql小记.md","raw":"---\ntitle: MySQL小记 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-15 09:40:30 #文章生成时间，一般不改，当然也可以任意修改\ncategories: mysql #分类\ntags: [mysql] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 记录使用mysql时常用的语法、函数和语句。\n---\n\n记录使用mysql时常用的语法、函数和语句。\n\n<!-- more -->\n\n## 语法\n\n### case when语句\n* 用于计算条件列表并返回多个可能结果表达式之一。\n* 有两种形式，**简单case函数**和**case搜索函数**\n\n#### 1. 简单case函数\n语法如下：\n```\nCASE input_expression\n    WHEN when_expression THEN result_expression\n        [ ...n ]\n    [\n        ELSE else_result_expression\n    END\n```\n\n#### 2. case搜索函数\n```\nCASE   \nWHEN Boolean_expression THEN result_expression\n        [ ...n ]\n    [\n        ELSE else_result_expression\n    END\n```\n\n## 常用函数\n### 1. convert()\n把字段转换成指定类型。\n\n### 2. concat()\n* 作用：拼接字符串。\n* 语法：concat(str1,str2)\n\n### 3. dayofweek()\n* 作用：返回指定日期的工作日索引（即指定日期是一周中的第几天）。其中1是周日，2是周一，以此类推...7是周六。\n* 语法：dayofweek(date)\n\n### 4. dayofmonth()\n* 作用：返回指定日期所在月的天数的索引（即指定日期是一个月中的第几天）。范围为1到31。\n* 语法：dayofmonth(date)\n\n### 5. dayofyear()\n* 作用：返回指定日期date所在年的天数的索引（即指定日期是一年中的第几天）。范围为1到366。\n* 语法：dayofyear(date)\n\n### 6. weekofyear()\n* 作用：返回指定日期所在的星期是这一年的第几个星期。范围为1到53.\n* 语法：weekofyear(date)\n\n### 7. adddate(date,INTERVAL expr unit)\n* 作用：修改时间。向指定的日期添加指定的时间。\n* 语法：adddate(date,INTERVAL expr unit)\n\n### 8. curdate()\n* 作用：返回当前的日期。\n* 语法：curdate()\n\n### 9. year()\n* 作用：返回指定日期的年份。\n* 语法：year(date)\n\n### 10. month()\n* 作用：返回指定日期的月份。\n* 语法：month(date)\n\n### 11. quarter()\n* 作用：返回指定日期在一年中的季度。\n* 语法：quarter(date)\n\n### 12. sign()\n* 作用：根据X是负数、零或正数，将参数的符号返回为-1、0、或1\n* 语法：sign(x)\n\n### 13. find_in_set()\nFIND_IN_SET(str,strlist)\n\nstr 要查询的字符串\nstrlist 字段名 参数以”,”分隔 如 (1,2,6,8)\n查询字段(strlist)中包含(str)的结果，返回结果为null或记录\n\n假如字符串str在由N个子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。 一个字符串列表就是一个由一些被 ‘,’ 符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则FIND_IN_SET() 函数被优化，使用比特计算。 如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。\n\n## 常用语句\n1. 修改自增字段的起始值。\n```\nALTER table table_name\nAUTO_INCREMENT=起始值 \n```","slug":"mysql/Mysql小记","published":1,"updated":"2020-08-17T09:21:23.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ke001cykrvmiqv68ab","content":"<p>记录使用mysql时常用的语法、函数和语句。</p>\n<a id=\"more\"></a>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"case-when语句\"><a href=\"#case-when语句\" class=\"headerlink\" title=\"case when语句\"></a>case when语句</h3><ul>\n<li>用于计算条件列表并返回多个可能结果表达式之一。</li>\n<li>有两种形式，<strong>简单case函数</strong>和<strong>case搜索函数</strong></li>\n</ul>\n<h4 id=\"1-简单case函数\"><a href=\"#1-简单case函数\" class=\"headerlink\" title=\"1. 简单case函数\"></a>1. 简单case函数</h4><p>语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE input_expression</span><br><span class=\"line\">    WHEN when_expression THEN result_expression</span><br><span class=\"line\">        [ ...n ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        ELSE else_result_expression</span><br><span class=\"line\">    END</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-case搜索函数\"><a href=\"#2-case搜索函数\" class=\"headerlink\" title=\"2. case搜索函数\"></a>2. case搜索函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE   </span><br><span class=\"line\">WHEN Boolean_expression THEN result_expression</span><br><span class=\"line\">        [ ...n ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        ELSE else_result_expression</span><br><span class=\"line\">    END</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"1-convert\"><a href=\"#1-convert\" class=\"headerlink\" title=\"1. convert()\"></a>1. convert()</h3><p>把字段转换成指定类型。</p>\n<h3 id=\"2-concat\"><a href=\"#2-concat\" class=\"headerlink\" title=\"2. concat()\"></a>2. concat()</h3><ul>\n<li>作用：拼接字符串。</li>\n<li>语法：concat(str1,str2)</li>\n</ul>\n<h3 id=\"3-dayofweek\"><a href=\"#3-dayofweek\" class=\"headerlink\" title=\"3. dayofweek()\"></a>3. dayofweek()</h3><ul>\n<li>作用：返回指定日期的工作日索引（即指定日期是一周中的第几天）。其中1是周日，2是周一，以此类推…7是周六。</li>\n<li>语法：dayofweek(date)</li>\n</ul>\n<h3 id=\"4-dayofmonth\"><a href=\"#4-dayofmonth\" class=\"headerlink\" title=\"4. dayofmonth()\"></a>4. dayofmonth()</h3><ul>\n<li>作用：返回指定日期所在月的天数的索引（即指定日期是一个月中的第几天）。范围为1到31。</li>\n<li>语法：dayofmonth(date)</li>\n</ul>\n<h3 id=\"5-dayofyear\"><a href=\"#5-dayofyear\" class=\"headerlink\" title=\"5. dayofyear()\"></a>5. dayofyear()</h3><ul>\n<li>作用：返回指定日期date所在年的天数的索引（即指定日期是一年中的第几天）。范围为1到366。</li>\n<li>语法：dayofyear(date)</li>\n</ul>\n<h3 id=\"6-weekofyear\"><a href=\"#6-weekofyear\" class=\"headerlink\" title=\"6. weekofyear()\"></a>6. weekofyear()</h3><ul>\n<li>作用：返回指定日期所在的星期是这一年的第几个星期。范围为1到53.</li>\n<li>语法：weekofyear(date)</li>\n</ul>\n<h3 id=\"7-adddate-date-INTERVAL-expr-unit\"><a href=\"#7-adddate-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"7. adddate(date,INTERVAL expr unit)\"></a>7. adddate(date,INTERVAL expr unit)</h3><ul>\n<li>作用：修改时间。向指定的日期添加指定的时间。</li>\n<li>语法：adddate(date,INTERVAL expr unit)</li>\n</ul>\n<h3 id=\"8-curdate\"><a href=\"#8-curdate\" class=\"headerlink\" title=\"8. curdate()\"></a>8. curdate()</h3><ul>\n<li>作用：返回当前的日期。</li>\n<li>语法：curdate()</li>\n</ul>\n<h3 id=\"9-year\"><a href=\"#9-year\" class=\"headerlink\" title=\"9. year()\"></a>9. year()</h3><ul>\n<li>作用：返回指定日期的年份。</li>\n<li>语法：year(date)</li>\n</ul>\n<h3 id=\"10-month\"><a href=\"#10-month\" class=\"headerlink\" title=\"10. month()\"></a>10. month()</h3><ul>\n<li>作用：返回指定日期的月份。</li>\n<li>语法：month(date)</li>\n</ul>\n<h3 id=\"11-quarter\"><a href=\"#11-quarter\" class=\"headerlink\" title=\"11. quarter()\"></a>11. quarter()</h3><ul>\n<li>作用：返回指定日期在一年中的季度。</li>\n<li>语法：quarter(date)</li>\n</ul>\n<h3 id=\"12-sign\"><a href=\"#12-sign\" class=\"headerlink\" title=\"12. sign()\"></a>12. sign()</h3><ul>\n<li>作用：根据X是负数、零或正数，将参数的符号返回为-1、0、或1</li>\n<li>语法：sign(x)</li>\n</ul>\n<h3 id=\"13-find-in-set\"><a href=\"#13-find-in-set\" class=\"headerlink\" title=\"13. find_in_set()\"></a>13. find_in_set()</h3><p>FIND_IN_SET(str,strlist)</p>\n<p>str 要查询的字符串<br>strlist 字段名 参数以”,”分隔 如 (1,2,6,8)<br>查询字段(strlist)中包含(str)的结果，返回结果为null或记录</p>\n<p>假如字符串str在由N个子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。 一个字符串列表就是一个由一些被 ‘,’ 符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则FIND_IN_SET() 函数被优化，使用比特计算。 如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。</p>\n<h2 id=\"常用语句\"><a href=\"#常用语句\" class=\"headerlink\" title=\"常用语句\"></a>常用语句</h2><ol>\n<li>修改自增字段的起始值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER table table_name</span><br><span class=\"line\">AUTO_INCREMENT=起始值</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>记录使用mysql时常用的语法、函数和语句。</p>","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"case-when语句\"><a href=\"#case-when语句\" class=\"headerlink\" title=\"case when语句\"></a>case when语句</h3><ul>\n<li>用于计算条件列表并返回多个可能结果表达式之一。</li>\n<li>有两种形式，<strong>简单case函数</strong>和<strong>case搜索函数</strong></li>\n</ul>\n<h4 id=\"1-简单case函数\"><a href=\"#1-简单case函数\" class=\"headerlink\" title=\"1. 简单case函数\"></a>1. 简单case函数</h4><p>语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE input_expression</span><br><span class=\"line\">    WHEN when_expression THEN result_expression</span><br><span class=\"line\">        [ ...n ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        ELSE else_result_expression</span><br><span class=\"line\">    END</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-case搜索函数\"><a href=\"#2-case搜索函数\" class=\"headerlink\" title=\"2. case搜索函数\"></a>2. case搜索函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE   </span><br><span class=\"line\">WHEN Boolean_expression THEN result_expression</span><br><span class=\"line\">        [ ...n ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        ELSE else_result_expression</span><br><span class=\"line\">    END</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"1-convert\"><a href=\"#1-convert\" class=\"headerlink\" title=\"1. convert()\"></a>1. convert()</h3><p>把字段转换成指定类型。</p>\n<h3 id=\"2-concat\"><a href=\"#2-concat\" class=\"headerlink\" title=\"2. concat()\"></a>2. concat()</h3><ul>\n<li>作用：拼接字符串。</li>\n<li>语法：concat(str1,str2)</li>\n</ul>\n<h3 id=\"3-dayofweek\"><a href=\"#3-dayofweek\" class=\"headerlink\" title=\"3. dayofweek()\"></a>3. dayofweek()</h3><ul>\n<li>作用：返回指定日期的工作日索引（即指定日期是一周中的第几天）。其中1是周日，2是周一，以此类推…7是周六。</li>\n<li>语法：dayofweek(date)</li>\n</ul>\n<h3 id=\"4-dayofmonth\"><a href=\"#4-dayofmonth\" class=\"headerlink\" title=\"4. dayofmonth()\"></a>4. dayofmonth()</h3><ul>\n<li>作用：返回指定日期所在月的天数的索引（即指定日期是一个月中的第几天）。范围为1到31。</li>\n<li>语法：dayofmonth(date)</li>\n</ul>\n<h3 id=\"5-dayofyear\"><a href=\"#5-dayofyear\" class=\"headerlink\" title=\"5. dayofyear()\"></a>5. dayofyear()</h3><ul>\n<li>作用：返回指定日期date所在年的天数的索引（即指定日期是一年中的第几天）。范围为1到366。</li>\n<li>语法：dayofyear(date)</li>\n</ul>\n<h3 id=\"6-weekofyear\"><a href=\"#6-weekofyear\" class=\"headerlink\" title=\"6. weekofyear()\"></a>6. weekofyear()</h3><ul>\n<li>作用：返回指定日期所在的星期是这一年的第几个星期。范围为1到53.</li>\n<li>语法：weekofyear(date)</li>\n</ul>\n<h3 id=\"7-adddate-date-INTERVAL-expr-unit\"><a href=\"#7-adddate-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"7. adddate(date,INTERVAL expr unit)\"></a>7. adddate(date,INTERVAL expr unit)</h3><ul>\n<li>作用：修改时间。向指定的日期添加指定的时间。</li>\n<li>语法：adddate(date,INTERVAL expr unit)</li>\n</ul>\n<h3 id=\"8-curdate\"><a href=\"#8-curdate\" class=\"headerlink\" title=\"8. curdate()\"></a>8. curdate()</h3><ul>\n<li>作用：返回当前的日期。</li>\n<li>语法：curdate()</li>\n</ul>\n<h3 id=\"9-year\"><a href=\"#9-year\" class=\"headerlink\" title=\"9. year()\"></a>9. year()</h3><ul>\n<li>作用：返回指定日期的年份。</li>\n<li>语法：year(date)</li>\n</ul>\n<h3 id=\"10-month\"><a href=\"#10-month\" class=\"headerlink\" title=\"10. month()\"></a>10. month()</h3><ul>\n<li>作用：返回指定日期的月份。</li>\n<li>语法：month(date)</li>\n</ul>\n<h3 id=\"11-quarter\"><a href=\"#11-quarter\" class=\"headerlink\" title=\"11. quarter()\"></a>11. quarter()</h3><ul>\n<li>作用：返回指定日期在一年中的季度。</li>\n<li>语法：quarter(date)</li>\n</ul>\n<h3 id=\"12-sign\"><a href=\"#12-sign\" class=\"headerlink\" title=\"12. sign()\"></a>12. sign()</h3><ul>\n<li>作用：根据X是负数、零或正数，将参数的符号返回为-1、0、或1</li>\n<li>语法：sign(x)</li>\n</ul>\n<h3 id=\"13-find-in-set\"><a href=\"#13-find-in-set\" class=\"headerlink\" title=\"13. find_in_set()\"></a>13. find_in_set()</h3><p>FIND_IN_SET(str,strlist)</p>\n<p>str 要查询的字符串<br>strlist 字段名 参数以”,”分隔 如 (1,2,6,8)<br>查询字段(strlist)中包含(str)的结果，返回结果为null或记录</p>\n<p>假如字符串str在由N个子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。 一个字符串列表就是一个由一些被 ‘,’ 符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则FIND_IN_SET() 函数被优化，使用比特计算。 如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。</p>\n<h2 id=\"常用语句\"><a href=\"#常用语句\" class=\"headerlink\" title=\"常用语句\"></a>常用语句</h2><ol>\n<li>修改自增字段的起始值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER table table_name</span><br><span class=\"line\">AUTO_INCREMENT=起始值</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"sql语法：UNION子句","date":"2017-10-27T08:20:00.000Z","_content":"\n如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。\n\nunion和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。\n\n## UNION\n对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序。union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。\n\n## UNION ALL\n对两个结果集进行并集操作，包括重复行，不进行排序；如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。","source":"_posts/sql/sql语法：union操作符.md","raw":"---\ntitle: sql语法：UNION子句\ndate: 2017-10-27 16:20:00 #文章生成时间，一般不改，当然也可以任意修改\ncategories: sql #分类\ntags: [sql] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n\n如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。\n\nunion和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。\n\n## UNION\n对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序。union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。\n\n## UNION ALL\n对两个结果集进行并集操作，包括重复行，不进行排序；如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。","slug":"sql/sql语法：union操作符","published":1,"updated":"2020-08-17T09:23:00.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ke001dykrvh3v62jz8","content":"<p>如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。</p>\n<p>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。</p>\n<h2 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h2><p>对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序。union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>\n<h2 id=\"UNION-ALL\"><a href=\"#UNION-ALL\" class=\"headerlink\" title=\"UNION ALL\"></a>UNION ALL</h2><p>对两个结果集进行并集操作，包括重复行，不进行排序；如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。</p>\n<p>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。</p>\n<h2 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h2><p>对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序。union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>\n<h2 id=\"UNION-ALL\"><a href=\"#UNION-ALL\" class=\"headerlink\" title=\"UNION ALL\"></a>UNION ALL</h2><p>对两个结果集进行并集操作，包括重复行，不进行排序；如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。</p>\n"},{"title":"vim中文乱码的解决方案","date":"2017-10-24T07:11:50.000Z","description":"vim中文乱码解决方案。","thumbnail":"http://ewinds.pw/vim2.jpg","_content":"\n「封面图：VIM图标」\n\n<!-- more -->\n\n### 解决方案\t\n\n出现上述现象是编码出了问题。\n\n1. 执行`sudo vim ~/.vimrc`\n2. 输入\n\n    set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n    set termencoding=utf-8\n    set encoding=utf-8\n\n成功解决乱码。\n---\n\n### 原理\n\n#### 为什么要改变vimrc文件\n\n`vimrc`文件用于初始化vim。使用vim时，vim会到指定目录下寻找vimrc并用其进行初始化。更多的内容见`:help vimrc`，通过`version`，可以看到vim规定的vimrc文件路径。例如我的：\n\n    system vimrc file: \"$VIM/vimrc\"\n    user vimrc file: \"$HOME/.vimrc\"\n    2nd user vimrc file: \"~/.vim/vimrc\"\n    user exrc file: \"$HOME/.exrc\"\n    fall-back for $VIM: \"/usr/share/vim\"\n    \n#### 编辑内容的含义是什么？\n\n（1） 磁盘文件的字符编码 \n存放在磁盘上的文本文件，是按照一定的字符编码进行保存的，不同的文件可能使用了不同的字符编码。 \n这在VIM中被叫做：fileencoding。\n\n（2） VIM缓冲区以及界面的字符编码 \nVIM运行时，其菜单、标签、以及各个缓冲区统一使用一种字符编码方式。 \n这在VIM中被叫做：encoding。\n\n（3) 终端使用的字符编码 \n终端同一时刻只能使用一种字符编码，并按照这种编码从接收到的字节流中识别字符，并显示，终端的字符编码是可以动态调整的。 \n这在VIM中被叫做：termencoding。\n\n可以看出，VIM涉及到的3种字符编码之间的转换： \n读：fileencoding—–> encoding \n显：encoding ——> termencoding \n写：encoding ——-> fileencoding\n\n#### 那些字符编码\n\nUTF-8（8-bit Unicode Transformation Format）：是一种针对Unicode的可变长度字符编码，又称万国码。 支持中文。\n\nUCS（通用字符集）：包含了用于表达所有已知语言的字符，保证了与其他字符集的双向兼容， 是所有其他字符集标准的一个超集。支持中文。Unicode规范中推荐的标记字节顺序的方法是BOM。BOM是Byte Order Mark。在UCS编码中有一个叫做\"ZERO WIDTH NO-BREAK SPACE\"的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符\"ZERO WIDTH NO-BREAK SPACE\"。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符\"ZERO WIDTH NO-BREAK SPACE\"又被称作BOM。\n\ngb18030、gbk、gb2312肯定是支持中文的编码。\n  \nCP936其实就是GBK，IBM在发明Code Page的时候将GBK放在第936页，所以叫CP936。\n\n参考资料： http://blog.csdn.net/smstong/article/details/51279810\n参考资料： http://www.fmddlmyy.cn/text6.html\n参考资料： https://www.zhihu.com/question/35609295\n","source":"_posts/vim/vim中文乱码的解决方案.md","raw":"---\ntitle: vim中文乱码的解决方案\ndate: 2017-10-24 15:11:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 工具 #分类\ntags: [工具, vim] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: vim中文乱码解决方案。\nthumbnail: http://ewinds.pw/vim2.jpg\n---\n\n「封面图：VIM图标」\n\n<!-- more -->\n\n### 解决方案\t\n\n出现上述现象是编码出了问题。\n\n1. 执行`sudo vim ~/.vimrc`\n2. 输入\n\n    set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n    set termencoding=utf-8\n    set encoding=utf-8\n\n成功解决乱码。\n---\n\n### 原理\n\n#### 为什么要改变vimrc文件\n\n`vimrc`文件用于初始化vim。使用vim时，vim会到指定目录下寻找vimrc并用其进行初始化。更多的内容见`:help vimrc`，通过`version`，可以看到vim规定的vimrc文件路径。例如我的：\n\n    system vimrc file: \"$VIM/vimrc\"\n    user vimrc file: \"$HOME/.vimrc\"\n    2nd user vimrc file: \"~/.vim/vimrc\"\n    user exrc file: \"$HOME/.exrc\"\n    fall-back for $VIM: \"/usr/share/vim\"\n    \n#### 编辑内容的含义是什么？\n\n（1） 磁盘文件的字符编码 \n存放在磁盘上的文本文件，是按照一定的字符编码进行保存的，不同的文件可能使用了不同的字符编码。 \n这在VIM中被叫做：fileencoding。\n\n（2） VIM缓冲区以及界面的字符编码 \nVIM运行时，其菜单、标签、以及各个缓冲区统一使用一种字符编码方式。 \n这在VIM中被叫做：encoding。\n\n（3) 终端使用的字符编码 \n终端同一时刻只能使用一种字符编码，并按照这种编码从接收到的字节流中识别字符，并显示，终端的字符编码是可以动态调整的。 \n这在VIM中被叫做：termencoding。\n\n可以看出，VIM涉及到的3种字符编码之间的转换： \n读：fileencoding—–> encoding \n显：encoding ——> termencoding \n写：encoding ——-> fileencoding\n\n#### 那些字符编码\n\nUTF-8（8-bit Unicode Transformation Format）：是一种针对Unicode的可变长度字符编码，又称万国码。 支持中文。\n\nUCS（通用字符集）：包含了用于表达所有已知语言的字符，保证了与其他字符集的双向兼容， 是所有其他字符集标准的一个超集。支持中文。Unicode规范中推荐的标记字节顺序的方法是BOM。BOM是Byte Order Mark。在UCS编码中有一个叫做\"ZERO WIDTH NO-BREAK SPACE\"的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符\"ZERO WIDTH NO-BREAK SPACE\"。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符\"ZERO WIDTH NO-BREAK SPACE\"又被称作BOM。\n\ngb18030、gbk、gb2312肯定是支持中文的编码。\n  \nCP936其实就是GBK，IBM在发明Code Page的时候将GBK放在第936页，所以叫CP936。\n\n参考资料： http://blog.csdn.net/smstong/article/details/51279810\n参考资料： http://www.fmddlmyy.cn/text6.html\n参考资料： https://www.zhihu.com/question/35609295\n","slug":"vim/vim中文乱码的解决方案","published":1,"updated":"2020-08-17T09:23:09.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kf001eykrv7hq1hnqc","content":"<p>「封面图：VIM图标」</p>\n<a id=\"more\"></a>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>出现上述现象是编码出了问题。</p>\n<ol>\n<li>执行<code>sudo vim ~/.vimrc</code></li>\n<li><p>输入</p>\n<p> set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<br> set termencoding=utf-8<br> set encoding=utf-8</p>\n</li>\n</ol>\n<h2 id=\"成功解决乱码。\"><a href=\"#成功解决乱码。\" class=\"headerlink\" title=\"成功解决乱码。\"></a>成功解决乱码。</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"为什么要改变vimrc文件\"><a href=\"#为什么要改变vimrc文件\" class=\"headerlink\" title=\"为什么要改变vimrc文件\"></a>为什么要改变vimrc文件</h4><p><code>vimrc</code>文件用于初始化vim。使用vim时，vim会到指定目录下寻找vimrc并用其进行初始化。更多的内容见<code>:help vimrc</code>，通过<code>version</code>，可以看到vim规定的vimrc文件路径。例如我的：</p>\n<pre><code>system vimrc file: &quot;$VIM/vimrc&quot;\nuser vimrc file: &quot;$HOME/.vimrc&quot;\n2nd user vimrc file: &quot;~/.vim/vimrc&quot;\nuser exrc file: &quot;$HOME/.exrc&quot;\nfall-back for $VIM: &quot;/usr/share/vim&quot;\n</code></pre><h4 id=\"编辑内容的含义是什么？\"><a href=\"#编辑内容的含义是什么？\" class=\"headerlink\" title=\"编辑内容的含义是什么？\"></a>编辑内容的含义是什么？</h4><p>（1） 磁盘文件的字符编码<br>存放在磁盘上的文本文件，是按照一定的字符编码进行保存的，不同的文件可能使用了不同的字符编码。<br>这在VIM中被叫做：fileencoding。</p>\n<p>（2） VIM缓冲区以及界面的字符编码<br>VIM运行时，其菜单、标签、以及各个缓冲区统一使用一种字符编码方式。<br>这在VIM中被叫做：encoding。</p>\n<p>（3) 终端使用的字符编码<br>终端同一时刻只能使用一种字符编码，并按照这种编码从接收到的字节流中识别字符，并显示，终端的字符编码是可以动态调整的。<br>这在VIM中被叫做：termencoding。</p>\n<p>可以看出，VIM涉及到的3种字符编码之间的转换：<br>读：fileencoding—–&gt; encoding<br>显：encoding ——&gt; termencoding<br>写：encoding ——-&gt; fileencoding</p>\n<h4 id=\"那些字符编码\"><a href=\"#那些字符编码\" class=\"headerlink\" title=\"那些字符编码\"></a>那些字符编码</h4><p>UTF-8（8-bit Unicode Transformation Format）：是一种针对Unicode的可变长度字符编码，又称万国码。 支持中文。</p>\n<p>UCS（通用字符集）：包含了用于表达所有已知语言的字符，保证了与其他字符集的双向兼容， 是所有其他字符集标准的一个超集。支持中文。Unicode规范中推荐的标记字节顺序的方法是BOM。BOM是Byte Order Mark。在UCS编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE”的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符”ZERO WIDTH NO-BREAK SPACE”。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符”ZERO WIDTH NO-BREAK SPACE”又被称作BOM。</p>\n<p>gb18030、gbk、gb2312肯定是支持中文的编码。</p>\n<p>CP936其实就是GBK，IBM在发明Code Page的时候将GBK放在第936页，所以叫CP936。</p>\n<p>参考资料： <a href=\"http://blog.csdn.net/smstong/article/details/51279810\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/smstong/article/details/51279810</a><br>参考资料： <a href=\"http://www.fmddlmyy.cn/text6.html\" target=\"_blank\" rel=\"noopener\">http://www.fmddlmyy.cn/text6.html</a><br>参考资料： <a href=\"https://www.zhihu.com/question/35609295\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/35609295</a></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>「封面图：VIM图标」</p>","more":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>出现上述现象是编码出了问题。</p>\n<ol>\n<li>执行<code>sudo vim ~/.vimrc</code></li>\n<li><p>输入</p>\n<p> set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<br> set termencoding=utf-8<br> set encoding=utf-8</p>\n</li>\n</ol>\n<h2 id=\"成功解决乱码。\"><a href=\"#成功解决乱码。\" class=\"headerlink\" title=\"成功解决乱码。\"></a>成功解决乱码。</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h4 id=\"为什么要改变vimrc文件\"><a href=\"#为什么要改变vimrc文件\" class=\"headerlink\" title=\"为什么要改变vimrc文件\"></a>为什么要改变vimrc文件</h4><p><code>vimrc</code>文件用于初始化vim。使用vim时，vim会到指定目录下寻找vimrc并用其进行初始化。更多的内容见<code>:help vimrc</code>，通过<code>version</code>，可以看到vim规定的vimrc文件路径。例如我的：</p>\n<pre><code>system vimrc file: &quot;$VIM/vimrc&quot;\nuser vimrc file: &quot;$HOME/.vimrc&quot;\n2nd user vimrc file: &quot;~/.vim/vimrc&quot;\nuser exrc file: &quot;$HOME/.exrc&quot;\nfall-back for $VIM: &quot;/usr/share/vim&quot;\n</code></pre><h4 id=\"编辑内容的含义是什么？\"><a href=\"#编辑内容的含义是什么？\" class=\"headerlink\" title=\"编辑内容的含义是什么？\"></a>编辑内容的含义是什么？</h4><p>（1） 磁盘文件的字符编码<br>存放在磁盘上的文本文件，是按照一定的字符编码进行保存的，不同的文件可能使用了不同的字符编码。<br>这在VIM中被叫做：fileencoding。</p>\n<p>（2） VIM缓冲区以及界面的字符编码<br>VIM运行时，其菜单、标签、以及各个缓冲区统一使用一种字符编码方式。<br>这在VIM中被叫做：encoding。</p>\n<p>（3) 终端使用的字符编码<br>终端同一时刻只能使用一种字符编码，并按照这种编码从接收到的字节流中识别字符，并显示，终端的字符编码是可以动态调整的。<br>这在VIM中被叫做：termencoding。</p>\n<p>可以看出，VIM涉及到的3种字符编码之间的转换：<br>读：fileencoding—–&gt; encoding<br>显：encoding ——&gt; termencoding<br>写：encoding ——-&gt; fileencoding</p>\n<h4 id=\"那些字符编码\"><a href=\"#那些字符编码\" class=\"headerlink\" title=\"那些字符编码\"></a>那些字符编码</h4><p>UTF-8（8-bit Unicode Transformation Format）：是一种针对Unicode的可变长度字符编码，又称万国码。 支持中文。</p>\n<p>UCS（通用字符集）：包含了用于表达所有已知语言的字符，保证了与其他字符集的双向兼容， 是所有其他字符集标准的一个超集。支持中文。Unicode规范中推荐的标记字节顺序的方法是BOM。BOM是Byte Order Mark。在UCS编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE”的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符”ZERO WIDTH NO-BREAK SPACE”。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符”ZERO WIDTH NO-BREAK SPACE”又被称作BOM。</p>\n<p>gb18030、gbk、gb2312肯定是支持中文的编码。</p>\n<p>CP936其实就是GBK，IBM在发明Code Page的时候将GBK放在第936页，所以叫CP936。</p>\n<p>参考资料： <a href=\"http://blog.csdn.net/smstong/article/details/51279810\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/smstong/article/details/51279810</a><br>参考资料： <a href=\"http://www.fmddlmyy.cn/text6.html\" target=\"_blank\" rel=\"noopener\">http://www.fmddlmyy.cn/text6.html</a><br>参考资料： <a href=\"https://www.zhihu.com/question/35609295\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/35609295</a></p>"},{"title":"sql语法：JOIN子句","date":"2017-10-27T07:11:50.000Z","_content":"* 内连接： \n    1. inner join(即join)\n* 外连接：\n    1. left join\n    2. right join\n    3. full join\n\n## 内连接\n### 1. innerJoin\n只连接匹配行。\n\n## 外连接\n\n### 1. left join\n返回左表的全部行和右表的满足on条件的行。如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替。\n\n### 2. right join\n返回右表的全部行和左边满足ON条件的行。如果右表的行在左表中没有匹配，那么这一行左表中对应数据用NULL代替。\n\n### 3. full join\n从左表和右表返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，则对面的数据用NULL代替。\n\n","source":"_posts/sql/sql语法：JOIN子句.md","raw":"---\ntitle: sql语法：JOIN子句\ndate: 2017-10-27 15:11:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: sql #分类\ntags: [sql] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n* 内连接： \n    1. inner join(即join)\n* 外连接：\n    1. left join\n    2. right join\n    3. full join\n\n## 内连接\n### 1. innerJoin\n只连接匹配行。\n\n## 外连接\n\n### 1. left join\n返回左表的全部行和右表的满足on条件的行。如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替。\n\n### 2. right join\n返回右表的全部行和左边满足ON条件的行。如果右表的行在左表中没有匹配，那么这一行左表中对应数据用NULL代替。\n\n### 3. full join\n从左表和右表返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，则对面的数据用NULL代替。\n\n","slug":"sql/sql语法：JOIN子句","published":1,"updated":"2020-08-17T09:22:48.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kf001fykrvmnqz8hyw","content":"<ul>\n<li>内连接： <ol>\n<li>inner join(即join)</li>\n</ol>\n</li>\n<li>外连接：<ol>\n<li>left join</li>\n<li>right join</li>\n<li>full join</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h2><h3 id=\"1-innerJoin\"><a href=\"#1-innerJoin\" class=\"headerlink\" title=\"1. innerJoin\"></a>1. innerJoin</h3><p>只连接匹配行。</p>\n<h2 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h2><h3 id=\"1-left-join\"><a href=\"#1-left-join\" class=\"headerlink\" title=\"1. left join\"></a>1. left join</h3><p>返回左表的全部行和右表的满足on条件的行。如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替。</p>\n<h3 id=\"2-right-join\"><a href=\"#2-right-join\" class=\"headerlink\" title=\"2. right join\"></a>2. right join</h3><p>返回右表的全部行和左边满足ON条件的行。如果右表的行在左表中没有匹配，那么这一行左表中对应数据用NULL代替。</p>\n<h3 id=\"3-full-join\"><a href=\"#3-full-join\" class=\"headerlink\" title=\"3. full join\"></a>3. full join</h3><p>从左表和右表返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，则对面的数据用NULL代替。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<ul>\n<li>内连接： <ol>\n<li>inner join(即join)</li>\n</ol>\n</li>\n<li>外连接：<ol>\n<li>left join</li>\n<li>right join</li>\n<li>full join</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h2><h3 id=\"1-innerJoin\"><a href=\"#1-innerJoin\" class=\"headerlink\" title=\"1. innerJoin\"></a>1. innerJoin</h3><p>只连接匹配行。</p>\n<h2 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h2><h3 id=\"1-left-join\"><a href=\"#1-left-join\" class=\"headerlink\" title=\"1. left join\"></a>1. left join</h3><p>返回左表的全部行和右表的满足on条件的行。如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替。</p>\n<h3 id=\"2-right-join\"><a href=\"#2-right-join\" class=\"headerlink\" title=\"2. right join\"></a>2. right join</h3><p>返回右表的全部行和左边满足ON条件的行。如果右表的行在左表中没有匹配，那么这一行左表中对应数据用NULL代替。</p>\n<h3 id=\"3-full-join\"><a href=\"#3-full-join\" class=\"headerlink\" title=\"3. full join\"></a>3. full join</h3><p>从左表和右表返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，则对面的数据用NULL代替。</p>\n"},{"title":"vuex学习笔记","date":"2020-04-24T03:23:50.000Z","description":null,"_content":"\n### mapState辅助函数\n第一个可选参数不太懂。\n第二个参数可以为对象或者数组。\n数组，适用于计算属性的名称和state的名称相同时。\n对象，key为computed的key，value如果是字符串，直接返回该字符串对应的State。如果是函数，则函数的第一个参数为state。\n辅助函数常与扩展运算符一起用。\n\n\n### 使用常量替代 Mutation 事件类型\n#### 具体实践：\n1. 将mutation的名称全部作为常量提取到另一个文件`mutations-type.js`，并将全部常量export。\n2. 定义mutation时，导入`mutations-type.js`文件中的常量。并且在创建vuex的mutations中全部用常量作为类型名。\n3. 触发mutation，即调用commit时，需要将调用的类型名从`mutations-type.js`中引入，并使用常量作为commit方法的类型名。\n\n优点：\n1. 如果需要修改mutation的类型名，只需将常量的值进行修改即可，无需改动其他内容。降低改动成本。\n2. 可以让合作者对整个应用的mutation一目了然。即mutation是如何定义的、何处调用的commit会更加清晰。\n","source":"_posts/vue/vuex学习笔记.md","raw":"---\ntitle: vuex学习笔记\ndate: 2020-04-24 11:23:50\ncategories: 前端\ntags: [vue, 前端]\ndescription: \n---\n\n### mapState辅助函数\n第一个可选参数不太懂。\n第二个参数可以为对象或者数组。\n数组，适用于计算属性的名称和state的名称相同时。\n对象，key为computed的key，value如果是字符串，直接返回该字符串对应的State。如果是函数，则函数的第一个参数为state。\n辅助函数常与扩展运算符一起用。\n\n\n### 使用常量替代 Mutation 事件类型\n#### 具体实践：\n1. 将mutation的名称全部作为常量提取到另一个文件`mutations-type.js`，并将全部常量export。\n2. 定义mutation时，导入`mutations-type.js`文件中的常量。并且在创建vuex的mutations中全部用常量作为类型名。\n3. 触发mutation，即调用commit时，需要将调用的类型名从`mutations-type.js`中引入，并使用常量作为commit方法的类型名。\n\n优点：\n1. 如果需要修改mutation的类型名，只需将常量的值进行修改即可，无需改动其他内容。降低改动成本。\n2. 可以让合作者对整个应用的mutation一目了然。即mutation是如何定义的、何处调用的commit会更加清晰。\n","slug":"vue/vuex学习笔记","published":1,"updated":"2020-08-17T09:36:21.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kf001gykrve9nte7mc","content":"<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>第一个可选参数不太懂。<br>第二个参数可以为对象或者数组。<br>数组，适用于计算属性的名称和state的名称相同时。<br>对象，key为computed的key，value如果是字符串，直接返回该字符串对应的State。如果是函数，则函数的第一个参数为state。<br>辅助函数常与扩展运算符一起用。</p>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><h4 id=\"具体实践：\"><a href=\"#具体实践：\" class=\"headerlink\" title=\"具体实践：\"></a>具体实践：</h4><ol>\n<li>将mutation的名称全部作为常量提取到另一个文件<code>mutations-type.js</code>，并将全部常量export。</li>\n<li>定义mutation时，导入<code>mutations-type.js</code>文件中的常量。并且在创建vuex的mutations中全部用常量作为类型名。</li>\n<li>触发mutation，即调用commit时，需要将调用的类型名从<code>mutations-type.js</code>中引入，并使用常量作为commit方法的类型名。</li>\n</ol>\n<p>优点：</p>\n<ol>\n<li>如果需要修改mutation的类型名，只需将常量的值进行修改即可，无需改动其他内容。降低改动成本。</li>\n<li>可以让合作者对整个应用的mutation一目了然。即mutation是如何定义的、何处调用的commit会更加清晰。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"mapState辅助函数\"><a href=\"#mapState辅助函数\" class=\"headerlink\" title=\"mapState辅助函数\"></a>mapState辅助函数</h3><p>第一个可选参数不太懂。<br>第二个参数可以为对象或者数组。<br>数组，适用于计算属性的名称和state的名称相同时。<br>对象，key为computed的key，value如果是字符串，直接返回该字符串对应的State。如果是函数，则函数的第一个参数为state。<br>辅助函数常与扩展运算符一起用。</p>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><h4 id=\"具体实践：\"><a href=\"#具体实践：\" class=\"headerlink\" title=\"具体实践：\"></a>具体实践：</h4><ol>\n<li>将mutation的名称全部作为常量提取到另一个文件<code>mutations-type.js</code>，并将全部常量export。</li>\n<li>定义mutation时，导入<code>mutations-type.js</code>文件中的常量。并且在创建vuex的mutations中全部用常量作为类型名。</li>\n<li>触发mutation，即调用commit时，需要将调用的类型名从<code>mutations-type.js</code>中引入，并使用常量作为commit方法的类型名。</li>\n</ol>\n<p>优点：</p>\n<ol>\n<li>如果需要修改mutation的类型名，只需将常量的值进行修改即可，无需改动其他内容。降低改动成本。</li>\n<li>可以让合作者对整个应用的mutation一目了然。即mutation是如何定义的、何处调用的commit会更加清晰。</li>\n</ol>\n"},{"title":"vue学习笔记：可复用性&组合","date":"2020-04-20T04:05:50.000Z","description":null,"_content":"\n## 目录\n1. [混入（mixin）](#1)\n2. [自定义指令](#2)\n3. [渲染函数&JSX](#3)\n4. [插件](#4)\n5. [过滤器](#5)\n\n## <div id=\"1\">1. 混入</div>\nVue中使用全局变量的方案。顾名思义，混入功能可以将vue组件的一些选项如data、created、methods，置入到每一个组件中，从而被每个组件使用。混入的内容将涉及所有组件——十分混乱；混入的内容可注入到每个组件中——十分深入。\n\n* 选项合并：解决混入时的同名选项冲突问题。\n    * 数据对象：递归合并，组件优先。\n    * 生命周期钩子：合并为数组，mixin中的钩子先调用。\n    * 值为对象的选项：合并为同一个对象，键名冲突时组件优先（如methods中的同名方法）。\n* 全局混入：即全局注册，混入的主要使用场景。\n* 自定义选项合并策略（不太清楚这一块的作用。）\n\n### 全局混入用法实践\n* 将混入内容单独写到一个文件中，例如：\n```javascript\nconst mixin = {\n    data(){\n        return {\n            msg:\"Hello~\"\n        }\n    }\n}\nexport default mixin\n```\n* 在main.js文件中引入：\n```javascript\nimport mixin from '路径/mixin.js'\nVue.mixin(mixin)\n```\n\n## 2. <div id=\"2\">自定义指令</div>\n通过自定义指令可以更方便地控制dom的样式及行为，而不仅仅局限于v-bind、v-model、v-show等。\n* 钩子函数：类似组件的生命周期。这就是钩子函数就是自定义指令的生命周期。\n* 钩子函数参数：所绑定元素的DOM、包含指令属性的对象、vnode、上一个vnode。\n* 对象字面量：指令函数能够接收所有合法js语句。\n\n## 3. <div id=\"3\">渲染函数</div>\n通过render函数，可以使用js编写模版。有时直接使用template编写模版重复度会较高，而使用js编写可以简洁很多。\n这一部分内容比较多，理解难度比较大，暂时没有完全吃透。\n\n## 4. <div id=\"4\">插件</div>\n可以通过插件封装经常使用的重复代码，在一定程度上减少了冗余代码。\n\n## 5. <div id=\"5\">过滤器</div>\n主要用来格式化数据。除了可以在组件内部使用filers属性定义局部过滤器之外，还可以使用Vue.filter()定义全局过滤器。\n过滤器的声明和使用方法：https://www.cnblogs.com/yan7/p/8133897.html","source":"_posts/vue/vue学习笔记:可复用性&组合.md","raw":"---\ntitle: vue学习笔记：可复用性&组合\ndate: 2020-04-20 12:05:50\ncategories: 前端\ntags: [vue, 前端]\ndescription: \n---\n\n## 目录\n1. [混入（mixin）](#1)\n2. [自定义指令](#2)\n3. [渲染函数&JSX](#3)\n4. [插件](#4)\n5. [过滤器](#5)\n\n## <div id=\"1\">1. 混入</div>\nVue中使用全局变量的方案。顾名思义，混入功能可以将vue组件的一些选项如data、created、methods，置入到每一个组件中，从而被每个组件使用。混入的内容将涉及所有组件——十分混乱；混入的内容可注入到每个组件中——十分深入。\n\n* 选项合并：解决混入时的同名选项冲突问题。\n    * 数据对象：递归合并，组件优先。\n    * 生命周期钩子：合并为数组，mixin中的钩子先调用。\n    * 值为对象的选项：合并为同一个对象，键名冲突时组件优先（如methods中的同名方法）。\n* 全局混入：即全局注册，混入的主要使用场景。\n* 自定义选项合并策略（不太清楚这一块的作用。）\n\n### 全局混入用法实践\n* 将混入内容单独写到一个文件中，例如：\n```javascript\nconst mixin = {\n    data(){\n        return {\n            msg:\"Hello~\"\n        }\n    }\n}\nexport default mixin\n```\n* 在main.js文件中引入：\n```javascript\nimport mixin from '路径/mixin.js'\nVue.mixin(mixin)\n```\n\n## 2. <div id=\"2\">自定义指令</div>\n通过自定义指令可以更方便地控制dom的样式及行为，而不仅仅局限于v-bind、v-model、v-show等。\n* 钩子函数：类似组件的生命周期。这就是钩子函数就是自定义指令的生命周期。\n* 钩子函数参数：所绑定元素的DOM、包含指令属性的对象、vnode、上一个vnode。\n* 对象字面量：指令函数能够接收所有合法js语句。\n\n## 3. <div id=\"3\">渲染函数</div>\n通过render函数，可以使用js编写模版。有时直接使用template编写模版重复度会较高，而使用js编写可以简洁很多。\n这一部分内容比较多，理解难度比较大，暂时没有完全吃透。\n\n## 4. <div id=\"4\">插件</div>\n可以通过插件封装经常使用的重复代码，在一定程度上减少了冗余代码。\n\n## 5. <div id=\"5\">过滤器</div>\n主要用来格式化数据。除了可以在组件内部使用filers属性定义局部过滤器之外，还可以使用Vue.filter()定义全局过滤器。\n过滤器的声明和使用方法：https://www.cnblogs.com/yan7/p/8133897.html","slug":"vue/vue学习笔记:可复用性&组合","published":1,"updated":"2020-08-22T04:05:28.321Z","_id":"ckdych0kg001hykrv69jecpmp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">混入（mixin）</a></li>\n<li><a href=\"#2\">自定义指令</a></li>\n<li><a href=\"#3\">渲染函数&amp;JSX</a></li>\n<li><a href=\"#4\">插件</a></li>\n<li><a href=\"#5\">过滤器</a></li>\n</ol>\n<h2 id=\"1-混入\"><a href=\"#1-混入\" class=\"headerlink\" title=\"1. 混入\"></a><div id=\"1\">1. 混入</div></h2><p>Vue中使用全局变量的方案。顾名思义，混入功能可以将vue组件的一些选项如data、created、methods，置入到每一个组件中，从而被每个组件使用。混入的内容将涉及所有组件——十分混乱；混入的内容可注入到每个组件中——十分深入。</p>\n<ul>\n<li>选项合并：解决混入时的同名选项冲突问题。<ul>\n<li>数据对象：递归合并，组件优先。</li>\n<li>生命周期钩子：合并为数组，mixin中的钩子先调用。</li>\n<li>值为对象的选项：合并为同一个对象，键名冲突时组件优先（如methods中的同名方法）。</li>\n</ul>\n</li>\n<li>全局混入：即全局注册，混入的主要使用场景。</li>\n<li>自定义选项合并策略（不太清楚这一块的作用。）</li>\n</ul>\n<h3 id=\"全局混入用法实践\"><a href=\"#全局混入用法实践\" class=\"headerlink\" title=\"全局混入用法实践\"></a>全局混入用法实践</h3><ul>\n<li><p>将混入内容单独写到一个文件中，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mixin = &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            msg:<span class=\"string\">\"Hello~\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mixin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js文件中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mixin <span class=\"keyword\">from</span> <span class=\"string\">'路径/mixin.js'</span></span><br><span class=\"line\">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-自定义指令\"><a href=\"#2-自定义指令\" class=\"headerlink\" title=\"2. 自定义指令\"></a>2. <div id=\"2\">自定义指令</div></h2><p>通过自定义指令可以更方便地控制dom的样式及行为，而不仅仅局限于v-bind、v-model、v-show等。</p>\n<ul>\n<li>钩子函数：类似组件的生命周期。这就是钩子函数就是自定义指令的生命周期。</li>\n<li>钩子函数参数：所绑定元素的DOM、包含指令属性的对象、vnode、上一个vnode。</li>\n<li>对象字面量：指令函数能够接收所有合法js语句。</li>\n</ul>\n<h2 id=\"3-渲染函数\"><a href=\"#3-渲染函数\" class=\"headerlink\" title=\"3. 渲染函数\"></a>3. <div id=\"3\">渲染函数</div></h2><p>通过render函数，可以使用js编写模版。有时直接使用template编写模版重复度会较高，而使用js编写可以简洁很多。<br>这一部分内容比较多，理解难度比较大，暂时没有完全吃透。</p>\n<h2 id=\"4-插件\"><a href=\"#4-插件\" class=\"headerlink\" title=\"4. 插件\"></a>4. <div id=\"4\">插件</div></h2><p>可以通过插件封装经常使用的重复代码，在一定程度上减少了冗余代码。</p>\n<h2 id=\"5-过滤器\"><a href=\"#5-过滤器\" class=\"headerlink\" title=\"5. 过滤器\"></a>5. <div id=\"5\">过滤器</div></h2><p>主要用来格式化数据。除了可以在组件内部使用filers属性定义局部过滤器之外，还可以使用Vue.filter()定义全局过滤器。<br>过滤器的声明和使用方法：<a href=\"https://www.cnblogs.com/yan7/p/8133897.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yan7/p/8133897.html</a></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">混入（mixin）</a></li>\n<li><a href=\"#2\">自定义指令</a></li>\n<li><a href=\"#3\">渲染函数&amp;JSX</a></li>\n<li><a href=\"#4\">插件</a></li>\n<li><a href=\"#5\">过滤器</a></li>\n</ol>\n<h2 id=\"1-混入\"><a href=\"#1-混入\" class=\"headerlink\" title=\"1. 混入\"></a><div id=\"1\">1. 混入</div></h2><p>Vue中使用全局变量的方案。顾名思义，混入功能可以将vue组件的一些选项如data、created、methods，置入到每一个组件中，从而被每个组件使用。混入的内容将涉及所有组件——十分混乱；混入的内容可注入到每个组件中——十分深入。</p>\n<ul>\n<li>选项合并：解决混入时的同名选项冲突问题。<ul>\n<li>数据对象：递归合并，组件优先。</li>\n<li>生命周期钩子：合并为数组，mixin中的钩子先调用。</li>\n<li>值为对象的选项：合并为同一个对象，键名冲突时组件优先（如methods中的同名方法）。</li>\n</ul>\n</li>\n<li>全局混入：即全局注册，混入的主要使用场景。</li>\n<li>自定义选项合并策略（不太清楚这一块的作用。）</li>\n</ul>\n<h3 id=\"全局混入用法实践\"><a href=\"#全局混入用法实践\" class=\"headerlink\" title=\"全局混入用法实践\"></a>全局混入用法实践</h3><ul>\n<li><p>将混入内容单独写到一个文件中，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mixin = &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            msg:<span class=\"string\">\"Hello~\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mixin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js文件中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mixin <span class=\"keyword\">from</span> <span class=\"string\">'路径/mixin.js'</span></span><br><span class=\"line\">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-自定义指令\"><a href=\"#2-自定义指令\" class=\"headerlink\" title=\"2. 自定义指令\"></a>2. <div id=\"2\">自定义指令</div></h2><p>通过自定义指令可以更方便地控制dom的样式及行为，而不仅仅局限于v-bind、v-model、v-show等。</p>\n<ul>\n<li>钩子函数：类似组件的生命周期。这就是钩子函数就是自定义指令的生命周期。</li>\n<li>钩子函数参数：所绑定元素的DOM、包含指令属性的对象、vnode、上一个vnode。</li>\n<li>对象字面量：指令函数能够接收所有合法js语句。</li>\n</ul>\n<h2 id=\"3-渲染函数\"><a href=\"#3-渲染函数\" class=\"headerlink\" title=\"3. 渲染函数\"></a>3. <div id=\"3\">渲染函数</div></h2><p>通过render函数，可以使用js编写模版。有时直接使用template编写模版重复度会较高，而使用js编写可以简洁很多。<br>这一部分内容比较多，理解难度比较大，暂时没有完全吃透。</p>\n<h2 id=\"4-插件\"><a href=\"#4-插件\" class=\"headerlink\" title=\"4. 插件\"></a>4. <div id=\"4\">插件</div></h2><p>可以通过插件封装经常使用的重复代码，在一定程度上减少了冗余代码。</p>\n<h2 id=\"5-过滤器\"><a href=\"#5-过滤器\" class=\"headerlink\" title=\"5. 过滤器\"></a>5. <div id=\"5\">过滤器</div></h2><p>主要用来格式化数据。除了可以在组件内部使用filers属性定义局部过滤器之外，还可以使用Vue.filter()定义全局过滤器。<br>过滤器的声明和使用方法：<a href=\"https://www.cnblogs.com/yan7/p/8133897.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yan7/p/8133897.html</a></p>\n"},{"title":"前端代码检测工具：eslint","date":"2020-03-11T07:04:50.000Z","description":"eslint","_content":"\neslint配置简单、功能强大，官网文档丰富、实用。\n\n一款难得的好工具。\n\n<!-- more-->\n\n# vue项目中使用eslint（vue-cli搭建）\n\n## 1. 安装eslint\n* vue-cli安装eslint：在使用vue-cli搭建vue项目时，可选择安装eslint。\n* 手动安装eslint至当前项目：`npm i eslint --save-dev`\n* 全局安装eslint命令行工具：`npm i eslint -g `\n\n## 2. 配置eslint\n### 使用vue-cli安装eslint时的配置文件\nvue-cli安装eslint，有两种可能的配置文件方式\n1. 配置文件集成在`package.json`文件中\n2. 配置文件为`.eslintrc.js`\n二者可同时生效\n\n## 3. 配置文件内容解读\n以我使用vue-cli搭建的项目的eslint配置文件为例：\n```javascript\n/* eslint配置 */\nmodule.exports = {\n    root: true,     // 只在项目目录中寻找eslint配置文件，禁止向父级目录寻找配置文件。\n    env: {          // 在env中指定脚本的运行环境\n        node: true  // 使用 Node.js 全局变量和 Node.js 作用域。\n    },\n    extends: [                  // 扩展配置\n        \"plugin:vue/essential\", // 启用esline-plugin-vue的essential配置\n        \"eslint:recommended\"    // 启用eslint推荐的规则\n    ],\n    parserOptions: {            // 解析器选项\n        parser: \"babel-eslint\"  // 一个对Babel解析器的包装，使其能够与 ESLint 兼容。\n    },\n    plugins: [  // 插件\n        'vue',  // eslint-plugin-vue插件\n        'html'  // eslint-plugin-html插件\n    ],\n    rules: {    // 规则\n        \"no-multiple-empty-lines\": [2, { \"max\": 3 }],   // 空行不得连续超过三行。\n        \"no-extra-boolean-cast\": 2,  // 禁止不必要的布尔类型转换\n        \"no-extra-semi\": 2,          // 禁止使用额外的分号，禁止情况如：\";;\"\n    }\n}\n```\n\n## 4. 规则的级别\n1. \"off\" or 0 - 关闭规则\n2. \"warn\" or 1 - 将规则视为一个警告（不会影响退出码）\n3. \"error\" or 2 - 将规则视为一个错误 (退出码为1)\n\n> 这三个错误级别可以允许你细粒度的控制 ESLint 是如何应用规则。（摘自官方文档）\n\n## 扩展阅读\n* eslint官方文档：https://eslint.bootcss.com/\n* plugin-vue-eslint官方文档：https://eslint.vuejs.org/","source":"_posts/代码质量检查/代码检测工具eslint初印象.md","raw":"---\ntitle: 前端代码检测工具：eslint #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-11 15:04:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [代码质量检查, eslint] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: eslint\n---\n\neslint配置简单、功能强大，官网文档丰富、实用。\n\n一款难得的好工具。\n\n<!-- more-->\n\n# vue项目中使用eslint（vue-cli搭建）\n\n## 1. 安装eslint\n* vue-cli安装eslint：在使用vue-cli搭建vue项目时，可选择安装eslint。\n* 手动安装eslint至当前项目：`npm i eslint --save-dev`\n* 全局安装eslint命令行工具：`npm i eslint -g `\n\n## 2. 配置eslint\n### 使用vue-cli安装eslint时的配置文件\nvue-cli安装eslint，有两种可能的配置文件方式\n1. 配置文件集成在`package.json`文件中\n2. 配置文件为`.eslintrc.js`\n二者可同时生效\n\n## 3. 配置文件内容解读\n以我使用vue-cli搭建的项目的eslint配置文件为例：\n```javascript\n/* eslint配置 */\nmodule.exports = {\n    root: true,     // 只在项目目录中寻找eslint配置文件，禁止向父级目录寻找配置文件。\n    env: {          // 在env中指定脚本的运行环境\n        node: true  // 使用 Node.js 全局变量和 Node.js 作用域。\n    },\n    extends: [                  // 扩展配置\n        \"plugin:vue/essential\", // 启用esline-plugin-vue的essential配置\n        \"eslint:recommended\"    // 启用eslint推荐的规则\n    ],\n    parserOptions: {            // 解析器选项\n        parser: \"babel-eslint\"  // 一个对Babel解析器的包装，使其能够与 ESLint 兼容。\n    },\n    plugins: [  // 插件\n        'vue',  // eslint-plugin-vue插件\n        'html'  // eslint-plugin-html插件\n    ],\n    rules: {    // 规则\n        \"no-multiple-empty-lines\": [2, { \"max\": 3 }],   // 空行不得连续超过三行。\n        \"no-extra-boolean-cast\": 2,  // 禁止不必要的布尔类型转换\n        \"no-extra-semi\": 2,          // 禁止使用额外的分号，禁止情况如：\";;\"\n    }\n}\n```\n\n## 4. 规则的级别\n1. \"off\" or 0 - 关闭规则\n2. \"warn\" or 1 - 将规则视为一个警告（不会影响退出码）\n3. \"error\" or 2 - 将规则视为一个错误 (退出码为1)\n\n> 这三个错误级别可以允许你细粒度的控制 ESLint 是如何应用规则。（摘自官方文档）\n\n## 扩展阅读\n* eslint官方文档：https://eslint.bootcss.com/\n* plugin-vue-eslint官方文档：https://eslint.vuejs.org/","slug":"代码质量检查/代码检测工具eslint初印象","published":1,"updated":"2020-08-17T09:36:23.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kg001iykrvdnqgyeb2","content":"<p>eslint配置简单、功能强大，官网文档丰富、实用。</p>\n<p>一款难得的好工具。</p>\n<a id=\"more\"></a>\n<h1 id=\"vue项目中使用eslint（vue-cli搭建）\"><a href=\"#vue项目中使用eslint（vue-cli搭建）\" class=\"headerlink\" title=\"vue项目中使用eslint（vue-cli搭建）\"></a>vue项目中使用eslint（vue-cli搭建）</h1><h2 id=\"1-安装eslint\"><a href=\"#1-安装eslint\" class=\"headerlink\" title=\"1. 安装eslint\"></a>1. 安装eslint</h2><ul>\n<li>vue-cli安装eslint：在使用vue-cli搭建vue项目时，可选择安装eslint。</li>\n<li>手动安装eslint至当前项目：<code>npm i eslint --save-dev</code></li>\n<li>全局安装eslint命令行工具：<code>npm i eslint -g</code></li>\n</ul>\n<h2 id=\"2-配置eslint\"><a href=\"#2-配置eslint\" class=\"headerlink\" title=\"2. 配置eslint\"></a>2. 配置eslint</h2><h3 id=\"使用vue-cli安装eslint时的配置文件\"><a href=\"#使用vue-cli安装eslint时的配置文件\" class=\"headerlink\" title=\"使用vue-cli安装eslint时的配置文件\"></a>使用vue-cli安装eslint时的配置文件</h3><p>vue-cli安装eslint，有两种可能的配置文件方式</p>\n<ol>\n<li>配置文件集成在<code>package.json</code>文件中</li>\n<li>配置文件为<code>.eslintrc.js</code><br>二者可同时生效</li>\n</ol>\n<h2 id=\"3-配置文件内容解读\"><a href=\"#3-配置文件内容解读\" class=\"headerlink\" title=\"3. 配置文件内容解读\"></a>3. 配置文件内容解读</h2><p>以我使用vue-cli搭建的项目的eslint配置文件为例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* eslint配置 */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    root: <span class=\"literal\">true</span>,     <span class=\"comment\">// 只在项目目录中寻找eslint配置文件，禁止向父级目录寻找配置文件。</span></span><br><span class=\"line\">    env: &#123;          <span class=\"comment\">// 在env中指定脚本的运行环境</span></span><br><span class=\"line\">        node: <span class=\"literal\">true</span>  <span class=\"comment\">// 使用 Node.js 全局变量和 Node.js 作用域。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extends: [                  <span class=\"comment\">// 扩展配置</span></span><br><span class=\"line\">        <span class=\"string\">\"plugin:vue/essential\"</span>, <span class=\"comment\">// 启用esline-plugin-vue的essential配置</span></span><br><span class=\"line\">        <span class=\"string\">\"eslint:recommended\"</span>    <span class=\"comment\">// 启用eslint推荐的规则</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    parserOptions: &#123;            <span class=\"comment\">// 解析器选项</span></span><br><span class=\"line\">        parser: <span class=\"string\">\"babel-eslint\"</span>  <span class=\"comment\">// 一个对Babel解析器的包装，使其能够与 ESLint 兼容。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">        <span class=\"string\">'vue'</span>,  <span class=\"comment\">// eslint-plugin-vue插件</span></span><br><span class=\"line\">        <span class=\"string\">'html'</span>  <span class=\"comment\">// eslint-plugin-html插件</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    rules: &#123;    <span class=\"comment\">// 规则</span></span><br><span class=\"line\">        <span class=\"string\">\"no-multiple-empty-lines\"</span>: [<span class=\"number\">2</span>, &#123; <span class=\"string\">\"max\"</span>: <span class=\"number\">3</span> &#125;],   <span class=\"comment\">// 空行不得连续超过三行。</span></span><br><span class=\"line\">        <span class=\"string\">\"no-extra-boolean-cast\"</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 禁止不必要的布尔类型转换</span></span><br><span class=\"line\">        <span class=\"string\">\"no-extra-semi\"</span>: <span class=\"number\">2</span>,          <span class=\"comment\">// 禁止使用额外的分号，禁止情况如：\";;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-规则的级别\"><a href=\"#4-规则的级别\" class=\"headerlink\" title=\"4. 规则的级别\"></a>4. 规则的级别</h2><ol>\n<li>“off” or 0 - 关闭规则</li>\n<li>“warn” or 1 - 将规则视为一个警告（不会影响退出码）</li>\n<li>“error” or 2 - 将规则视为一个错误 (退出码为1)</li>\n</ol>\n<blockquote>\n<p>这三个错误级别可以允许你细粒度的控制 ESLint 是如何应用规则。（摘自官方文档）</p>\n</blockquote>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>eslint官方文档：<a href=\"https://eslint.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://eslint.bootcss.com/</a></li>\n<li>plugin-vue-eslint官方文档：<a href=\"https://eslint.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://eslint.vuejs.org/</a></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>eslint配置简单、功能强大，官网文档丰富、实用。</p>\n<p>一款难得的好工具。</p>","more":"<h1 id=\"vue项目中使用eslint（vue-cli搭建）\"><a href=\"#vue项目中使用eslint（vue-cli搭建）\" class=\"headerlink\" title=\"vue项目中使用eslint（vue-cli搭建）\"></a>vue项目中使用eslint（vue-cli搭建）</h1><h2 id=\"1-安装eslint\"><a href=\"#1-安装eslint\" class=\"headerlink\" title=\"1. 安装eslint\"></a>1. 安装eslint</h2><ul>\n<li>vue-cli安装eslint：在使用vue-cli搭建vue项目时，可选择安装eslint。</li>\n<li>手动安装eslint至当前项目：<code>npm i eslint --save-dev</code></li>\n<li>全局安装eslint命令行工具：<code>npm i eslint -g</code></li>\n</ul>\n<h2 id=\"2-配置eslint\"><a href=\"#2-配置eslint\" class=\"headerlink\" title=\"2. 配置eslint\"></a>2. 配置eslint</h2><h3 id=\"使用vue-cli安装eslint时的配置文件\"><a href=\"#使用vue-cli安装eslint时的配置文件\" class=\"headerlink\" title=\"使用vue-cli安装eslint时的配置文件\"></a>使用vue-cli安装eslint时的配置文件</h3><p>vue-cli安装eslint，有两种可能的配置文件方式</p>\n<ol>\n<li>配置文件集成在<code>package.json</code>文件中</li>\n<li>配置文件为<code>.eslintrc.js</code><br>二者可同时生效</li>\n</ol>\n<h2 id=\"3-配置文件内容解读\"><a href=\"#3-配置文件内容解读\" class=\"headerlink\" title=\"3. 配置文件内容解读\"></a>3. 配置文件内容解读</h2><p>以我使用vue-cli搭建的项目的eslint配置文件为例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* eslint配置 */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    root: <span class=\"literal\">true</span>,     <span class=\"comment\">// 只在项目目录中寻找eslint配置文件，禁止向父级目录寻找配置文件。</span></span><br><span class=\"line\">    env: &#123;          <span class=\"comment\">// 在env中指定脚本的运行环境</span></span><br><span class=\"line\">        node: <span class=\"literal\">true</span>  <span class=\"comment\">// 使用 Node.js 全局变量和 Node.js 作用域。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extends: [                  <span class=\"comment\">// 扩展配置</span></span><br><span class=\"line\">        <span class=\"string\">\"plugin:vue/essential\"</span>, <span class=\"comment\">// 启用esline-plugin-vue的essential配置</span></span><br><span class=\"line\">        <span class=\"string\">\"eslint:recommended\"</span>    <span class=\"comment\">// 启用eslint推荐的规则</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    parserOptions: &#123;            <span class=\"comment\">// 解析器选项</span></span><br><span class=\"line\">        parser: <span class=\"string\">\"babel-eslint\"</span>  <span class=\"comment\">// 一个对Babel解析器的包装，使其能够与 ESLint 兼容。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">        <span class=\"string\">'vue'</span>,  <span class=\"comment\">// eslint-plugin-vue插件</span></span><br><span class=\"line\">        <span class=\"string\">'html'</span>  <span class=\"comment\">// eslint-plugin-html插件</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    rules: &#123;    <span class=\"comment\">// 规则</span></span><br><span class=\"line\">        <span class=\"string\">\"no-multiple-empty-lines\"</span>: [<span class=\"number\">2</span>, &#123; <span class=\"string\">\"max\"</span>: <span class=\"number\">3</span> &#125;],   <span class=\"comment\">// 空行不得连续超过三行。</span></span><br><span class=\"line\">        <span class=\"string\">\"no-extra-boolean-cast\"</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 禁止不必要的布尔类型转换</span></span><br><span class=\"line\">        <span class=\"string\">\"no-extra-semi\"</span>: <span class=\"number\">2</span>,          <span class=\"comment\">// 禁止使用额外的分号，禁止情况如：\";;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-规则的级别\"><a href=\"#4-规则的级别\" class=\"headerlink\" title=\"4. 规则的级别\"></a>4. 规则的级别</h2><ol>\n<li>“off” or 0 - 关闭规则</li>\n<li>“warn” or 1 - 将规则视为一个警告（不会影响退出码）</li>\n<li>“error” or 2 - 将规则视为一个错误 (退出码为1)</li>\n</ol>\n<blockquote>\n<p>这三个错误级别可以允许你细粒度的控制 ESLint 是如何应用规则。（摘自官方文档）</p>\n</blockquote>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>eslint官方文档：<a href=\"https://eslint.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://eslint.bootcss.com/</a></li>\n<li>plugin-vue-eslint官方文档：<a href=\"https://eslint.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://eslint.vuejs.org/</a></li>\n</ul>"},{"title":"后台代码质量检查工具：SonarQube","date":"2020-04-09T03:35:30.000Z","description":"使用SonarQube进行代码质量检查","_content":"\nSonarQube的安装、插件配置及个人的一些感受\n\n<!-- more -->\n\n## 目录\n1. [安装SonarQube](#1)\n2. [配置相关插件](#2)\n    1. [汉化插件](#2.1)\n    2. [导出代码质量检测报告插件](#2.2)\n3. [其他SonarQube相关操作](#3)\n    1. [查看当前SonarQube版本](#3.1)\n\n## <span id=\"1\">1. 安装SonarQube</span>\n1. 前往SonarQube官网进行下载（推荐下载Community版本，免费，功能够用）：https://www.sonarqube.org/downloads/\n2. 下载完成后解压该文件，此处最好不要使用root用户进行解压。该步骤在官网文档的说明十分详细：https://docs.sonarqube.org/latest/setup/get-started-2-minutes/ \n3. 解压后在命令行下进入解压后的文件夹，然后进入`bin`目录，该文件夹包含了不同平台下的脚本文件。如：\n    ```\n    jsw-license\t\tmacosx-universal-64\n    linux-x86-64\t\twindows-x86-64\n    ```\n4. 根据自己的平台cd到相应文件夹下（博主是macos），然后输入`sonar.sh start`运行SonarQube。\n5. 进入SonarQube客户端界面：http://localhost:9000 \n\n## <span id=\"2\">2. 配置相关插件</span>\n\n### <span id=\"2.1\">2.1 汉化插件</span>\n1. 下载汉化插件。一定要下载相应版本，否则可能会无法启动SonarQube：https://github.com/SonarQubeCommunity/sonar-l10n-zh\n2. 将下载后的插件移动到`sonarQube根目录/extensions/plugins`\n3. 重启SonarQube\n\n### <span id=\"2.2\">导出代码质量检测报告插件</span>\n1. 使用该仓库的python程序导出：https://github.com/ximone/Sonar_Report_Generator\n\n## <span id=\"3\">3. 其他SonarQube相关操作</span>\n### <span id=\"3.1\">1. 查看当前SonarQube的版本</span>\n在SonarQube的客户端界面选择Administration->System\n\n## 个人感受\n使用不多，课程要求才进行了初步尝试。\n个人感觉该软件对一个软件开发团队而言意义更大一些。\n1. 可以更好地帮助一个软件开发团队维护代码，使得代码编写符合内部的编码规范。\n2. 可以方便地review代码。","source":"_posts/代码质量检查/使用SonarQube进行代码质量检查.md","raw":"---\ntitle:  后台代码质量检查工具：SonarQube \n\ndate: 2020-04-09 11:35:30\n\ncategories: 后端\n\ntags: [代码质量检查, SonarQube] \n\ndescription: 使用SonarQube进行代码质量检查\n---\n\nSonarQube的安装、插件配置及个人的一些感受\n\n<!-- more -->\n\n## 目录\n1. [安装SonarQube](#1)\n2. [配置相关插件](#2)\n    1. [汉化插件](#2.1)\n    2. [导出代码质量检测报告插件](#2.2)\n3. [其他SonarQube相关操作](#3)\n    1. [查看当前SonarQube版本](#3.1)\n\n## <span id=\"1\">1. 安装SonarQube</span>\n1. 前往SonarQube官网进行下载（推荐下载Community版本，免费，功能够用）：https://www.sonarqube.org/downloads/\n2. 下载完成后解压该文件，此处最好不要使用root用户进行解压。该步骤在官网文档的说明十分详细：https://docs.sonarqube.org/latest/setup/get-started-2-minutes/ \n3. 解压后在命令行下进入解压后的文件夹，然后进入`bin`目录，该文件夹包含了不同平台下的脚本文件。如：\n    ```\n    jsw-license\t\tmacosx-universal-64\n    linux-x86-64\t\twindows-x86-64\n    ```\n4. 根据自己的平台cd到相应文件夹下（博主是macos），然后输入`sonar.sh start`运行SonarQube。\n5. 进入SonarQube客户端界面：http://localhost:9000 \n\n## <span id=\"2\">2. 配置相关插件</span>\n\n### <span id=\"2.1\">2.1 汉化插件</span>\n1. 下载汉化插件。一定要下载相应版本，否则可能会无法启动SonarQube：https://github.com/SonarQubeCommunity/sonar-l10n-zh\n2. 将下载后的插件移动到`sonarQube根目录/extensions/plugins`\n3. 重启SonarQube\n\n### <span id=\"2.2\">导出代码质量检测报告插件</span>\n1. 使用该仓库的python程序导出：https://github.com/ximone/Sonar_Report_Generator\n\n## <span id=\"3\">3. 其他SonarQube相关操作</span>\n### <span id=\"3.1\">1. 查看当前SonarQube的版本</span>\n在SonarQube的客户端界面选择Administration->System\n\n## 个人感受\n使用不多，课程要求才进行了初步尝试。\n个人感觉该软件对一个软件开发团队而言意义更大一些。\n1. 可以更好地帮助一个软件开发团队维护代码，使得代码编写符合内部的编码规范。\n2. 可以方便地review代码。","slug":"代码质量检查/使用SonarQube进行代码质量检查","published":1,"updated":"2020-08-17T08:05:19.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kh001jykrv9qp81fa1","content":"<p>SonarQube的安装、插件配置及个人的一些感受</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">安装SonarQube</a></li>\n<li><a href=\"#2\">配置相关插件</a><ol>\n<li><a href=\"#2.1\">汉化插件</a></li>\n<li><a href=\"#2.2\">导出代码质量检测报告插件</a></li>\n</ol>\n</li>\n<li><a href=\"#3\">其他SonarQube相关操作</a><ol>\n<li><a href=\"#3.1\">查看当前SonarQube版本</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-安装SonarQube\"><a href=\"#1-安装SonarQube\" class=\"headerlink\" title=\"1. 安装SonarQube\"></a><span id=\"1\">1. 安装SonarQube</span></h2><ol>\n<li>前往SonarQube官网进行下载（推荐下载Community版本，免费，功能够用）：<a href=\"https://www.sonarqube.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.sonarqube.org/downloads/</a></li>\n<li>下载完成后解压该文件，此处最好不要使用root用户进行解压。该步骤在官网文档的说明十分详细：<a href=\"https://docs.sonarqube.org/latest/setup/get-started-2-minutes/\" target=\"_blank\" rel=\"noopener\">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a> </li>\n<li><p>解压后在命令行下进入解压后的文件夹，然后进入<code>bin</code>目录，该文件夹包含了不同平台下的脚本文件。如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsw-license\t\tmacosx-universal-64</span><br><span class=\"line\">linux-x86-64\t\twindows-x86-64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据自己的平台cd到相应文件夹下（博主是macos），然后输入<code>sonar.sh start</code>运行SonarQube。</p>\n</li>\n<li>进入SonarQube客户端界面：<a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a> </li>\n</ol>\n<h2 id=\"2-配置相关插件\"><a href=\"#2-配置相关插件\" class=\"headerlink\" title=\"2. 配置相关插件\"></a><span id=\"2\">2. 配置相关插件</span></h2><h3 id=\"2-1-汉化插件\"><a href=\"#2-1-汉化插件\" class=\"headerlink\" title=\"2.1 汉化插件\"></a><span id=\"2.1\">2.1 汉化插件</span></h3><ol>\n<li>下载汉化插件。一定要下载相应版本，否则可能会无法启动SonarQube：<a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/SonarQubeCommunity/sonar-l10n-zh</a></li>\n<li>将下载后的插件移动到<code>sonarQube根目录/extensions/plugins</code></li>\n<li>重启SonarQube</li>\n</ol>\n<h3 id=\"导出代码质量检测报告插件\"><a href=\"#导出代码质量检测报告插件\" class=\"headerlink\" title=\"导出代码质量检测报告插件\"></a><span id=\"2.2\">导出代码质量检测报告插件</span></h3><ol>\n<li>使用该仓库的python程序导出：<a href=\"https://github.com/ximone/Sonar_Report_Generator\" target=\"_blank\" rel=\"noopener\">https://github.com/ximone/Sonar_Report_Generator</a></li>\n</ol>\n<h2 id=\"3-其他SonarQube相关操作\"><a href=\"#3-其他SonarQube相关操作\" class=\"headerlink\" title=\"3. 其他SonarQube相关操作\"></a><span id=\"3\">3. 其他SonarQube相关操作</span></h2><h3 id=\"1-查看当前SonarQube的版本\"><a href=\"#1-查看当前SonarQube的版本\" class=\"headerlink\" title=\"1. 查看当前SonarQube的版本\"></a><span id=\"3.1\">1. 查看当前SonarQube的版本</span></h3><p>在SonarQube的客户端界面选择Administration-&gt;System</p>\n<h2 id=\"个人感受\"><a href=\"#个人感受\" class=\"headerlink\" title=\"个人感受\"></a>个人感受</h2><p>使用不多，课程要求才进行了初步尝试。<br>个人感觉该软件对一个软件开发团队而言意义更大一些。</p>\n<ol>\n<li>可以更好地帮助一个软件开发团队维护代码，使得代码编写符合内部的编码规范。</li>\n<li>可以方便地review代码。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>SonarQube的安装、插件配置及个人的一些感受</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">安装SonarQube</a></li>\n<li><a href=\"#2\">配置相关插件</a><ol>\n<li><a href=\"#2.1\">汉化插件</a></li>\n<li><a href=\"#2.2\">导出代码质量检测报告插件</a></li>\n</ol>\n</li>\n<li><a href=\"#3\">其他SonarQube相关操作</a><ol>\n<li><a href=\"#3.1\">查看当前SonarQube版本</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-安装SonarQube\"><a href=\"#1-安装SonarQube\" class=\"headerlink\" title=\"1. 安装SonarQube\"></a><span id=\"1\">1. 安装SonarQube</span></h2><ol>\n<li>前往SonarQube官网进行下载（推荐下载Community版本，免费，功能够用）：<a href=\"https://www.sonarqube.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.sonarqube.org/downloads/</a></li>\n<li>下载完成后解压该文件，此处最好不要使用root用户进行解压。该步骤在官网文档的说明十分详细：<a href=\"https://docs.sonarqube.org/latest/setup/get-started-2-minutes/\" target=\"_blank\" rel=\"noopener\">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a> </li>\n<li><p>解压后在命令行下进入解压后的文件夹，然后进入<code>bin</code>目录，该文件夹包含了不同平台下的脚本文件。如：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsw-license\t\tmacosx-universal-64</span><br><span class=\"line\">linux-x86-64\t\twindows-x86-64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据自己的平台cd到相应文件夹下（博主是macos），然后输入<code>sonar.sh start</code>运行SonarQube。</p>\n</li>\n<li>进入SonarQube客户端界面：<a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a> </li>\n</ol>\n<h2 id=\"2-配置相关插件\"><a href=\"#2-配置相关插件\" class=\"headerlink\" title=\"2. 配置相关插件\"></a><span id=\"2\">2. 配置相关插件</span></h2><h3 id=\"2-1-汉化插件\"><a href=\"#2-1-汉化插件\" class=\"headerlink\" title=\"2.1 汉化插件\"></a><span id=\"2.1\">2.1 汉化插件</span></h3><ol>\n<li>下载汉化插件。一定要下载相应版本，否则可能会无法启动SonarQube：<a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/SonarQubeCommunity/sonar-l10n-zh</a></li>\n<li>将下载后的插件移动到<code>sonarQube根目录/extensions/plugins</code></li>\n<li>重启SonarQube</li>\n</ol>\n<h3 id=\"导出代码质量检测报告插件\"><a href=\"#导出代码质量检测报告插件\" class=\"headerlink\" title=\"导出代码质量检测报告插件\"></a><span id=\"2.2\">导出代码质量检测报告插件</span></h3><ol>\n<li>使用该仓库的python程序导出：<a href=\"https://github.com/ximone/Sonar_Report_Generator\" target=\"_blank\" rel=\"noopener\">https://github.com/ximone/Sonar_Report_Generator</a></li>\n</ol>\n<h2 id=\"3-其他SonarQube相关操作\"><a href=\"#3-其他SonarQube相关操作\" class=\"headerlink\" title=\"3. 其他SonarQube相关操作\"></a><span id=\"3\">3. 其他SonarQube相关操作</span></h2><h3 id=\"1-查看当前SonarQube的版本\"><a href=\"#1-查看当前SonarQube的版本\" class=\"headerlink\" title=\"1. 查看当前SonarQube的版本\"></a><span id=\"3.1\">1. 查看当前SonarQube的版本</span></h3><p>在SonarQube的客户端界面选择Administration-&gt;System</p>\n<h2 id=\"个人感受\"><a href=\"#个人感受\" class=\"headerlink\" title=\"个人感受\"></a>个人感受</h2><p>使用不多，课程要求才进行了初步尝试。<br>个人感觉该软件对一个软件开发团队而言意义更大一些。</p>\n<ol>\n<li>可以更好地帮助一个软件开发团队维护代码，使得代码编写符合内部的编码规范。</li>\n<li>可以方便地review代码。</li>\n</ol>"},{"title":"js语言最佳实践","date":"2017-07-30T02:39:50.000Z","description":"关于attribute和property的区别","_content":"### 解耦应用逻辑/事件处理程序\n应将应用逻辑和实践处理程序分离。\n* 优点\n    * 更容易进行单元测试。\n    * 更容易更改触发特定过程的事件。\n\n### 编码实践\n* 值比较使用严格比较操作符（===），减少类型的转换操作。\n* 在赋值时，可以使用逻辑运算简化代码\n    * &&：返回第一个false的原始值，若全部为true返回最后一个true的原始值。\n    * ||：返回第一个true的原始值，若全部为false则返回最后一个false的原始值。\n    * !!：快速取得当前值得布尔值。\n* switch效率略高于if else。\n\n","source":"_posts/命名规范及最佳实践/js语言最佳实践.md","raw":"---\ntitle:  js语言最佳实践 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-07-30 10:39:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 关于attribute和property的区别\n---\n### 解耦应用逻辑/事件处理程序\n应将应用逻辑和实践处理程序分离。\n* 优点\n    * 更容易进行单元测试。\n    * 更容易更改触发特定过程的事件。\n\n### 编码实践\n* 值比较使用严格比较操作符（===），减少类型的转换操作。\n* 在赋值时，可以使用逻辑运算简化代码\n    * &&：返回第一个false的原始值，若全部为true返回最后一个true的原始值。\n    * ||：返回第一个true的原始值，若全部为false则返回最后一个false的原始值。\n    * !!：快速取得当前值得布尔值。\n* switch效率略高于if else。\n\n","slug":"命名规范及最佳实践/js语言最佳实践","published":1,"updated":"2020-08-17T09:20:36.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kh001kykrv2nl7bt2b","content":"<h3 id=\"解耦应用逻辑-事件处理程序\"><a href=\"#解耦应用逻辑-事件处理程序\" class=\"headerlink\" title=\"解耦应用逻辑/事件处理程序\"></a>解耦应用逻辑/事件处理程序</h3><p>应将应用逻辑和实践处理程序分离。</p>\n<ul>\n<li>优点<ul>\n<li>更容易进行单元测试。</li>\n<li>更容易更改触发特定过程的事件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编码实践\"><a href=\"#编码实践\" class=\"headerlink\" title=\"编码实践\"></a>编码实践</h3><ul>\n<li>值比较使用严格比较操作符（===），减少类型的转换操作。</li>\n<li>在赋值时，可以使用逻辑运算简化代码<ul>\n<li>&amp;&amp;：返回第一个false的原始值，若全部为true返回最后一个true的原始值。</li>\n<li>||：返回第一个true的原始值，若全部为false则返回最后一个false的原始值。</li>\n<li>!!：快速取得当前值得布尔值。</li>\n</ul>\n</li>\n<li>switch效率略高于if else。</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"解耦应用逻辑-事件处理程序\"><a href=\"#解耦应用逻辑-事件处理程序\" class=\"headerlink\" title=\"解耦应用逻辑/事件处理程序\"></a>解耦应用逻辑/事件处理程序</h3><p>应将应用逻辑和实践处理程序分离。</p>\n<ul>\n<li>优点<ul>\n<li>更容易进行单元测试。</li>\n<li>更容易更改触发特定过程的事件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编码实践\"><a href=\"#编码实践\" class=\"headerlink\" title=\"编码实践\"></a>编码实践</h3><ul>\n<li>值比较使用严格比较操作符（===），减少类型的转换操作。</li>\n<li>在赋值时，可以使用逻辑运算简化代码<ul>\n<li>&amp;&amp;：返回第一个false的原始值，若全部为true返回最后一个true的原始值。</li>\n<li>||：返回第一个true的原始值，若全部为false则返回最后一个false的原始值。</li>\n<li>!!：快速取得当前值得布尔值。</li>\n</ul>\n</li>\n<li>switch效率略高于if else。</li>\n</ul>\n"},{"title":"js 命名规范","date":"2020-08-02T01:40:30.000Z","_content":"\n### 变量名：\n* 变量名应为名词如car或person。\n\n\n### 函数名\n语法规范：\n任何合法的javascript标识符都可以作为函数的名称。\n约定俗成的内容：(非ECMAScript语法，但是为了便于开发者理解和识别，约定的函数命名规范。)\n命名方法： 小驼峰式命名法\n* 命名规范： 前缀应该为动词，常用前缀如下：\n    * can\t 判断是否可执行某个动作\n    * has\t 判断是否含有某个值\n    * is\t 判断是否为某个值\n    * get\t 获取某个值\n    * set\t 设置某个值\n    * load\t 加载某些数据","source":"_posts/命名规范及最佳实践/命名规范：js.md","raw":"---\ntitle: js 命名规范\ndate: 2020-08-02 09:40:30\ncategories: js\ntags: [命名规范, js] \n---\n\n### 变量名：\n* 变量名应为名词如car或person。\n\n\n### 函数名\n语法规范：\n任何合法的javascript标识符都可以作为函数的名称。\n约定俗成的内容：(非ECMAScript语法，但是为了便于开发者理解和识别，约定的函数命名规范。)\n命名方法： 小驼峰式命名法\n* 命名规范： 前缀应该为动词，常用前缀如下：\n    * can\t 判断是否可执行某个动作\n    * has\t 判断是否含有某个值\n    * is\t 判断是否为某个值\n    * get\t 获取某个值\n    * set\t 设置某个值\n    * load\t 加载某些数据","slug":"命名规范及最佳实践/命名规范：js","published":1,"updated":"2020-08-17T08:12:50.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kh001lykrv00i4v23d","content":"<h3 id=\"变量名：\"><a href=\"#变量名：\" class=\"headerlink\" title=\"变量名：\"></a>变量名：</h3><ul>\n<li>变量名应为名词如car或person。</li>\n</ul>\n<h3 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h3><p>语法规范：<br>任何合法的javascript标识符都可以作为函数的名称。<br>约定俗成的内容：(非ECMAScript语法，但是为了便于开发者理解和识别，约定的函数命名规范。)<br>命名方法： 小驼峰式命名法</p>\n<ul>\n<li>命名规范： 前缀应该为动词，常用前缀如下：<ul>\n<li>can     判断是否可执行某个动作</li>\n<li>has     判断是否含有某个值</li>\n<li>is     判断是否为某个值</li>\n<li>get     获取某个值</li>\n<li>set     设置某个值</li>\n<li>load     加载某些数据</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"变量名：\"><a href=\"#变量名：\" class=\"headerlink\" title=\"变量名：\"></a>变量名：</h3><ul>\n<li>变量名应为名词如car或person。</li>\n</ul>\n<h3 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h3><p>语法规范：<br>任何合法的javascript标识符都可以作为函数的名称。<br>约定俗成的内容：(非ECMAScript语法，但是为了便于开发者理解和识别，约定的函数命名规范。)<br>命名方法： 小驼峰式命名法</p>\n<ul>\n<li>命名规范： 前缀应该为动词，常用前缀如下：<ul>\n<li>can     判断是否可执行某个动作</li>\n<li>has     判断是否含有某个值</li>\n<li>is     判断是否为某个值</li>\n<li>get     获取某个值</li>\n<li>set     设置某个值</li>\n<li>load     加载某些数据</li>\n</ul>\n</li>\n</ul>\n"},{"title":"浏览器存储总结","date":"2020-08-17T07:04:50.000Z","_content":"\n存储方式：\n1. localStorage\n2. sessionStorage\n3. cookie\n\n浏览器的存储根据上下文环境不同，涉及到几个层级关系。\n1. 浏览器。firefox or chome or ...\n2. 浏览器窗口。一个窗口包含一堆标签页。\n3. 浏览器标签页。\n    * 引申：标签页之间是否同源。\n    * 引申：点击链接，进行跳转\n        * 跳转到新的标签页。\n        * 在本标签页内跳转，不生成新页面。\n4. 内嵌iframe\n\n## 1. localStorage\nHTML5新增。\n* 生命周期：用于将数据长久保存在网站中，保存的数据没有过期时间，直到手动删除。关闭浏览器呢？\n* 使用范围：同一个浏览器下的不同浏览器窗口的同源标签页之间，可以共享。\n* 大小：因浏览器而异，大致在2.5MB到10MB之间。\n\n### 基本操作\n`localStorage`对象的对象原型为`Storage`。\n* 设置localStorage：`localStorage.setItem('test','设置localStorage')`\n* 获取localStorage\n    * 获取指定记录：`localStorage.getItem('test')`\n    * 获取全部记录：`window.localStorage`\n* 移除localStorage\n    * 移除指定记录：`localStorage.removeItem('test')`\n    * 移除全部记录：`localStorage.clear()`\n* 获取localStorage的长度：`localStorage.length`\n* 获取某条localStorage记录的名称：`localStorage.key(idx)`\n\n## 2. sessionStorage\nHTML5新增。\n* 生命周期：当前窗口/标签页，刷新时不会被清空。\n* 使用范围：当前标签页。当前标签页内跳转可以共享sessionStorage，但是通过打开新标签页跳转时不能共享。\n\n### 基本操作\n`sessionStorage`的对象原型也为`Storage`。api和localStorage几乎可以说是一模一样。\n* 设置sessionStorage：`sessionStorage.setItem('test',\"设置sessionStorage)`\n* 获取sessionStorage\n    * 获取指定记录：`sessionStorage.getItem('test')`\n    * 获取全部记录：`window.sessionStorage`\n* 移除sessionStorage\n    * 移除指定记录：`sessionStorage.removeItem('test')`\n    * 移除全部记录：`sessionStorage.clear()`\n* 获取sessionStorage的长度：`sessionStorage.length`\n* 获取某条sessionStorage记录的名称：`sessionStorage.key(idx)`\n\n## 3. cookie\ncookie经常与session搭配使用。由于http协议是无状态的，而服务器如果要识别当前通信的客户，此时需要一个“通行证”，由服务器颁发给客户端，客户端以后再与后台通信时，仅需要将通行证和要传递的内容一起发给后台，后台看到通行证就会明白自己在与谁通信，然后就可以将需要的数据返回给前端。cookie和session的作用，就是此处的通行证。\n\n生命周期：Cookie存储于电脑上的文本文件中，如果不进行清除或未打到过期时间，永远不会消失。\n适用范围：同一个浏览器下可以共享。\n使用场景：可以帮助我们实现记录用户个人信息的功能。Cookie经常被用于存储用户的信息，来实现记住用户名、记住密码等功能。\n\n### 基本操作\n* 设置cookie：`document.cookie=\"键值对;过期时间;cookie路径\"`，如：`document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";`\n* 获取cookie：获取字符串格式的cookie：`document.cookie`\n* 删除cookie：为该记录设置一个已经过去的时间或者当前时间`document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT\";`\n由于cookie的相关api较少，操作不方便，故使用时最好能够封装一些cookie的基本操作。\n\n## 4. indexedDB\n浏览器内置的大量数据存储技术。\n\n相关教程：http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\n\n\n## localStorage和sessionStorage的区别\n时效性。localStorage会一直存储在浏览器中，除非手动删除。而sessionStorage会在关闭窗口或标签页后清除，仅仅用于临时保存。","source":"_posts/浏览器/浏览器存储总结.md","raw":"---\ntitle: 浏览器存储总结 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-08-17 15:04:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [浏览器原理] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n\n存储方式：\n1. localStorage\n2. sessionStorage\n3. cookie\n\n浏览器的存储根据上下文环境不同，涉及到几个层级关系。\n1. 浏览器。firefox or chome or ...\n2. 浏览器窗口。一个窗口包含一堆标签页。\n3. 浏览器标签页。\n    * 引申：标签页之间是否同源。\n    * 引申：点击链接，进行跳转\n        * 跳转到新的标签页。\n        * 在本标签页内跳转，不生成新页面。\n4. 内嵌iframe\n\n## 1. localStorage\nHTML5新增。\n* 生命周期：用于将数据长久保存在网站中，保存的数据没有过期时间，直到手动删除。关闭浏览器呢？\n* 使用范围：同一个浏览器下的不同浏览器窗口的同源标签页之间，可以共享。\n* 大小：因浏览器而异，大致在2.5MB到10MB之间。\n\n### 基本操作\n`localStorage`对象的对象原型为`Storage`。\n* 设置localStorage：`localStorage.setItem('test','设置localStorage')`\n* 获取localStorage\n    * 获取指定记录：`localStorage.getItem('test')`\n    * 获取全部记录：`window.localStorage`\n* 移除localStorage\n    * 移除指定记录：`localStorage.removeItem('test')`\n    * 移除全部记录：`localStorage.clear()`\n* 获取localStorage的长度：`localStorage.length`\n* 获取某条localStorage记录的名称：`localStorage.key(idx)`\n\n## 2. sessionStorage\nHTML5新增。\n* 生命周期：当前窗口/标签页，刷新时不会被清空。\n* 使用范围：当前标签页。当前标签页内跳转可以共享sessionStorage，但是通过打开新标签页跳转时不能共享。\n\n### 基本操作\n`sessionStorage`的对象原型也为`Storage`。api和localStorage几乎可以说是一模一样。\n* 设置sessionStorage：`sessionStorage.setItem('test',\"设置sessionStorage)`\n* 获取sessionStorage\n    * 获取指定记录：`sessionStorage.getItem('test')`\n    * 获取全部记录：`window.sessionStorage`\n* 移除sessionStorage\n    * 移除指定记录：`sessionStorage.removeItem('test')`\n    * 移除全部记录：`sessionStorage.clear()`\n* 获取sessionStorage的长度：`sessionStorage.length`\n* 获取某条sessionStorage记录的名称：`sessionStorage.key(idx)`\n\n## 3. cookie\ncookie经常与session搭配使用。由于http协议是无状态的，而服务器如果要识别当前通信的客户，此时需要一个“通行证”，由服务器颁发给客户端，客户端以后再与后台通信时，仅需要将通行证和要传递的内容一起发给后台，后台看到通行证就会明白自己在与谁通信，然后就可以将需要的数据返回给前端。cookie和session的作用，就是此处的通行证。\n\n生命周期：Cookie存储于电脑上的文本文件中，如果不进行清除或未打到过期时间，永远不会消失。\n适用范围：同一个浏览器下可以共享。\n使用场景：可以帮助我们实现记录用户个人信息的功能。Cookie经常被用于存储用户的信息，来实现记住用户名、记住密码等功能。\n\n### 基本操作\n* 设置cookie：`document.cookie=\"键值对;过期时间;cookie路径\"`，如：`document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";`\n* 获取cookie：获取字符串格式的cookie：`document.cookie`\n* 删除cookie：为该记录设置一个已经过去的时间或者当前时间`document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT\";`\n由于cookie的相关api较少，操作不方便，故使用时最好能够封装一些cookie的基本操作。\n\n## 4. indexedDB\n浏览器内置的大量数据存储技术。\n\n相关教程：http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\n\n\n## localStorage和sessionStorage的区别\n时效性。localStorage会一直存储在浏览器中，除非手动删除。而sessionStorage会在关闭窗口或标签页后清除，仅仅用于临时保存。","slug":"浏览器/浏览器存储总结","published":1,"updated":"2020-08-17T08:01:04.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ki001mykrvaxauvjlx","content":"<p>存储方式：</p>\n<ol>\n<li>localStorage</li>\n<li>sessionStorage</li>\n<li>cookie</li>\n</ol>\n<p>浏览器的存储根据上下文环境不同，涉及到几个层级关系。</p>\n<ol>\n<li>浏览器。firefox or chome or …</li>\n<li>浏览器窗口。一个窗口包含一堆标签页。</li>\n<li>浏览器标签页。<ul>\n<li>引申：标签页之间是否同源。</li>\n<li>引申：点击链接，进行跳转<ul>\n<li>跳转到新的标签页。</li>\n<li>在本标签页内跳转，不生成新页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内嵌iframe</li>\n</ol>\n<h2 id=\"1-localStorage\"><a href=\"#1-localStorage\" class=\"headerlink\" title=\"1. localStorage\"></a>1. localStorage</h2><p>HTML5新增。</p>\n<ul>\n<li>生命周期：用于将数据长久保存在网站中，保存的数据没有过期时间，直到手动删除。关闭浏览器呢？</li>\n<li>使用范围：同一个浏览器下的不同浏览器窗口的同源标签页之间，可以共享。</li>\n<li>大小：因浏览器而异，大致在2.5MB到10MB之间。</li>\n</ul>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p><code>localStorage</code>对象的对象原型为<code>Storage</code>。</p>\n<ul>\n<li>设置localStorage：<code>localStorage.setItem(&#39;test&#39;,&#39;设置localStorage&#39;)</code></li>\n<li>获取localStorage<ul>\n<li>获取指定记录：<code>localStorage.getItem(&#39;test&#39;)</code></li>\n<li>获取全部记录：<code>window.localStorage</code></li>\n</ul>\n</li>\n<li>移除localStorage<ul>\n<li>移除指定记录：<code>localStorage.removeItem(&#39;test&#39;)</code></li>\n<li>移除全部记录：<code>localStorage.clear()</code></li>\n</ul>\n</li>\n<li>获取localStorage的长度：<code>localStorage.length</code></li>\n<li>获取某条localStorage记录的名称：<code>localStorage.key(idx)</code></li>\n</ul>\n<h2 id=\"2-sessionStorage\"><a href=\"#2-sessionStorage\" class=\"headerlink\" title=\"2. sessionStorage\"></a>2. sessionStorage</h2><p>HTML5新增。</p>\n<ul>\n<li>生命周期：当前窗口/标签页，刷新时不会被清空。</li>\n<li>使用范围：当前标签页。当前标签页内跳转可以共享sessionStorage，但是通过打开新标签页跳转时不能共享。</li>\n</ul>\n<h3 id=\"基本操作-1\"><a href=\"#基本操作-1\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p><code>sessionStorage</code>的对象原型也为<code>Storage</code>。api和localStorage几乎可以说是一模一样。</p>\n<ul>\n<li>设置sessionStorage：<code>sessionStorage.setItem(&#39;test&#39;,&quot;设置sessionStorage)</code></li>\n<li>获取sessionStorage<ul>\n<li>获取指定记录：<code>sessionStorage.getItem(&#39;test&#39;)</code></li>\n<li>获取全部记录：<code>window.sessionStorage</code></li>\n</ul>\n</li>\n<li>移除sessionStorage<ul>\n<li>移除指定记录：<code>sessionStorage.removeItem(&#39;test&#39;)</code></li>\n<li>移除全部记录：<code>sessionStorage.clear()</code></li>\n</ul>\n</li>\n<li>获取sessionStorage的长度：<code>sessionStorage.length</code></li>\n<li>获取某条sessionStorage记录的名称：<code>sessionStorage.key(idx)</code></li>\n</ul>\n<h2 id=\"3-cookie\"><a href=\"#3-cookie\" class=\"headerlink\" title=\"3. cookie\"></a>3. cookie</h2><p>cookie经常与session搭配使用。由于http协议是无状态的，而服务器如果要识别当前通信的客户，此时需要一个“通行证”，由服务器颁发给客户端，客户端以后再与后台通信时，仅需要将通行证和要传递的内容一起发给后台，后台看到通行证就会明白自己在与谁通信，然后就可以将需要的数据返回给前端。cookie和session的作用，就是此处的通行证。</p>\n<p>生命周期：Cookie存储于电脑上的文本文件中，如果不进行清除或未打到过期时间，永远不会消失。<br>适用范围：同一个浏览器下可以共享。<br>使用场景：可以帮助我们实现记录用户个人信息的功能。Cookie经常被用于存储用户的信息，来实现记住用户名、记住密码等功能。</p>\n<h3 id=\"基本操作-2\"><a href=\"#基本操作-2\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li>设置cookie：<code>document.cookie=&quot;键值对;过期时间;cookie路径&quot;</code>，如：<code>document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</code></li>\n<li>获取cookie：获取字符串格式的cookie：<code>document.cookie</code></li>\n<li>删除cookie：为该记录设置一个已经过去的时间或者当前时间<code>document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;</code><br>由于cookie的相关api较少，操作不方便，故使用时最好能够封装一些cookie的基本操作。</li>\n</ul>\n<h2 id=\"4-indexedDB\"><a href=\"#4-indexedDB\" class=\"headerlink\" title=\"4. indexedDB\"></a>4. indexedDB</h2><p>浏览器内置的大量数据存储技术。</p>\n<p>相关教程：<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/07/indexeddb.html</a></p>\n<h2 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h2><p>时效性。localStorage会一直存储在浏览器中，除非手动删除。而sessionStorage会在关闭窗口或标签页后清除，仅仅用于临时保存。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>存储方式：</p>\n<ol>\n<li>localStorage</li>\n<li>sessionStorage</li>\n<li>cookie</li>\n</ol>\n<p>浏览器的存储根据上下文环境不同，涉及到几个层级关系。</p>\n<ol>\n<li>浏览器。firefox or chome or …</li>\n<li>浏览器窗口。一个窗口包含一堆标签页。</li>\n<li>浏览器标签页。<ul>\n<li>引申：标签页之间是否同源。</li>\n<li>引申：点击链接，进行跳转<ul>\n<li>跳转到新的标签页。</li>\n<li>在本标签页内跳转，不生成新页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内嵌iframe</li>\n</ol>\n<h2 id=\"1-localStorage\"><a href=\"#1-localStorage\" class=\"headerlink\" title=\"1. localStorage\"></a>1. localStorage</h2><p>HTML5新增。</p>\n<ul>\n<li>生命周期：用于将数据长久保存在网站中，保存的数据没有过期时间，直到手动删除。关闭浏览器呢？</li>\n<li>使用范围：同一个浏览器下的不同浏览器窗口的同源标签页之间，可以共享。</li>\n<li>大小：因浏览器而异，大致在2.5MB到10MB之间。</li>\n</ul>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p><code>localStorage</code>对象的对象原型为<code>Storage</code>。</p>\n<ul>\n<li>设置localStorage：<code>localStorage.setItem(&#39;test&#39;,&#39;设置localStorage&#39;)</code></li>\n<li>获取localStorage<ul>\n<li>获取指定记录：<code>localStorage.getItem(&#39;test&#39;)</code></li>\n<li>获取全部记录：<code>window.localStorage</code></li>\n</ul>\n</li>\n<li>移除localStorage<ul>\n<li>移除指定记录：<code>localStorage.removeItem(&#39;test&#39;)</code></li>\n<li>移除全部记录：<code>localStorage.clear()</code></li>\n</ul>\n</li>\n<li>获取localStorage的长度：<code>localStorage.length</code></li>\n<li>获取某条localStorage记录的名称：<code>localStorage.key(idx)</code></li>\n</ul>\n<h2 id=\"2-sessionStorage\"><a href=\"#2-sessionStorage\" class=\"headerlink\" title=\"2. sessionStorage\"></a>2. sessionStorage</h2><p>HTML5新增。</p>\n<ul>\n<li>生命周期：当前窗口/标签页，刷新时不会被清空。</li>\n<li>使用范围：当前标签页。当前标签页内跳转可以共享sessionStorage，但是通过打开新标签页跳转时不能共享。</li>\n</ul>\n<h3 id=\"基本操作-1\"><a href=\"#基本操作-1\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p><code>sessionStorage</code>的对象原型也为<code>Storage</code>。api和localStorage几乎可以说是一模一样。</p>\n<ul>\n<li>设置sessionStorage：<code>sessionStorage.setItem(&#39;test&#39;,&quot;设置sessionStorage)</code></li>\n<li>获取sessionStorage<ul>\n<li>获取指定记录：<code>sessionStorage.getItem(&#39;test&#39;)</code></li>\n<li>获取全部记录：<code>window.sessionStorage</code></li>\n</ul>\n</li>\n<li>移除sessionStorage<ul>\n<li>移除指定记录：<code>sessionStorage.removeItem(&#39;test&#39;)</code></li>\n<li>移除全部记录：<code>sessionStorage.clear()</code></li>\n</ul>\n</li>\n<li>获取sessionStorage的长度：<code>sessionStorage.length</code></li>\n<li>获取某条sessionStorage记录的名称：<code>sessionStorage.key(idx)</code></li>\n</ul>\n<h2 id=\"3-cookie\"><a href=\"#3-cookie\" class=\"headerlink\" title=\"3. cookie\"></a>3. cookie</h2><p>cookie经常与session搭配使用。由于http协议是无状态的，而服务器如果要识别当前通信的客户，此时需要一个“通行证”，由服务器颁发给客户端，客户端以后再与后台通信时，仅需要将通行证和要传递的内容一起发给后台，后台看到通行证就会明白自己在与谁通信，然后就可以将需要的数据返回给前端。cookie和session的作用，就是此处的通行证。</p>\n<p>生命周期：Cookie存储于电脑上的文本文件中，如果不进行清除或未打到过期时间，永远不会消失。<br>适用范围：同一个浏览器下可以共享。<br>使用场景：可以帮助我们实现记录用户个人信息的功能。Cookie经常被用于存储用户的信息，来实现记住用户名、记住密码等功能。</p>\n<h3 id=\"基本操作-2\"><a href=\"#基本操作-2\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li>设置cookie：<code>document.cookie=&quot;键值对;过期时间;cookie路径&quot;</code>，如：<code>document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</code></li>\n<li>获取cookie：获取字符串格式的cookie：<code>document.cookie</code></li>\n<li>删除cookie：为该记录设置一个已经过去的时间或者当前时间<code>document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;</code><br>由于cookie的相关api较少，操作不方便，故使用时最好能够封装一些cookie的基本操作。</li>\n</ul>\n<h2 id=\"4-indexedDB\"><a href=\"#4-indexedDB\" class=\"headerlink\" title=\"4. indexedDB\"></a>4. indexedDB</h2><p>浏览器内置的大量数据存储技术。</p>\n<p>相关教程：<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/07/indexeddb.html</a></p>\n<h2 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h2><p>时效性。localStorage会一直存储在浏览器中，除非手动删除。而sessionStorage会在关闭窗口或标签页后清除，仅仅用于临时保存。</p>\n"},{"title":"git常用命令小记","date":"2020-08-01T13:35:30.000Z","description":"git常用命令","_content":"\ngit的常用操作及相关问题的解决方案。\n\n<!-- more -->\n\n## 常用命令\n\n遇到git命令参数的问题，可通过查看文档解决：\n1. 输入`git`后回车可以显示常用的git命令。\n2. 输入`git 某个命令 -h` 可以查看该命令具体的参数信息。\n\n### 1. 分支操作\n1. 将当前内容全部复制到一个新分支：`git checkout -b 新分支名称`\n2. 删除分支：`git branch -d`\n\n## 具体问题的解决方案\n\n### 1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\n1. 配置原仓库的路径：`git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git`\n2. 查看远程仓库的路径，确保正确添加上游仓库：`git remote -v`\n3. 抓取原仓库的修改：`git fetch upstream`\n4. 其他内容：删除某个远程仓库`git remote remove <name>`\n\n### 2. 修改commit的注释\n`git commit --amend`amend为修正的意思。\n\n\n### 3. 撤销git add\n`git reset 文件名`\n\n","source":"_posts/版本管理工具/版本管理工具：git小记.md","raw":"---\ntitle:  git常用命令小记 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-8-1 21:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 工具 #分类\n\ntags: [git, 版本管理工具]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: git常用命令\n---\n\ngit的常用操作及相关问题的解决方案。\n\n<!-- more -->\n\n## 常用命令\n\n遇到git命令参数的问题，可通过查看文档解决：\n1. 输入`git`后回车可以显示常用的git命令。\n2. 输入`git 某个命令 -h` 可以查看该命令具体的参数信息。\n\n### 1. 分支操作\n1. 将当前内容全部复制到一个新分支：`git checkout -b 新分支名称`\n2. 删除分支：`git branch -d`\n\n## 具体问题的解决方案\n\n### 1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\n1. 配置原仓库的路径：`git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git`\n2. 查看远程仓库的路径，确保正确添加上游仓库：`git remote -v`\n3. 抓取原仓库的修改：`git fetch upstream`\n4. 其他内容：删除某个远程仓库`git remote remove <name>`\n\n### 2. 修改commit的注释\n`git commit --amend`amend为修正的意思。\n\n\n### 3. 撤销git add\n`git reset 文件名`\n\n","slug":"版本管理工具/版本管理工具：git小记","published":1,"updated":"2020-08-17T09:19:58.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0ki001nykrvafnc5zba","content":"<p>git的常用操作及相关问题的解决方案。</p>\n<a id=\"more\"></a>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>遇到git命令参数的问题，可通过查看文档解决：</p>\n<ol>\n<li>输入<code>git</code>后回车可以显示常用的git命令。</li>\n<li>输入<code>git 某个命令 -h</code> 可以查看该命令具体的参数信息。</li>\n</ol>\n<h3 id=\"1-分支操作\"><a href=\"#1-分支操作\" class=\"headerlink\" title=\"1. 分支操作\"></a>1. 分支操作</h3><ol>\n<li>将当前内容全部复制到一个新分支：<code>git checkout -b 新分支名称</code></li>\n<li>删除分支：<code>git branch -d</code></li>\n</ol>\n<h2 id=\"具体问题的解决方案\"><a href=\"#具体问题的解决方案\" class=\"headerlink\" title=\"具体问题的解决方案\"></a>具体问题的解决方案</h2><h3 id=\"1-fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\"><a href=\"#1-fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\" class=\"headerlink\" title=\"1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\"></a>1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。</h3><ol>\n<li>配置原仓库的路径：<code>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</code></li>\n<li>查看远程仓库的路径，确保正确添加上游仓库：<code>git remote -v</code></li>\n<li>抓取原仓库的修改：<code>git fetch upstream</code></li>\n<li>其他内容：删除某个远程仓库<code>git remote remove &lt;name&gt;</code></li>\n</ol>\n<h3 id=\"2-修改commit的注释\"><a href=\"#2-修改commit的注释\" class=\"headerlink\" title=\"2. 修改commit的注释\"></a>2. 修改commit的注释</h3><p><code>git commit --amend</code>amend为修正的意思。</p>\n<h3 id=\"3-撤销git-add\"><a href=\"#3-撤销git-add\" class=\"headerlink\" title=\"3. 撤销git add\"></a>3. 撤销git add</h3><p><code>git reset 文件名</code></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>git的常用操作及相关问题的解决方案。</p>","more":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>遇到git命令参数的问题，可通过查看文档解决：</p>\n<ol>\n<li>输入<code>git</code>后回车可以显示常用的git命令。</li>\n<li>输入<code>git 某个命令 -h</code> 可以查看该命令具体的参数信息。</li>\n</ol>\n<h3 id=\"1-分支操作\"><a href=\"#1-分支操作\" class=\"headerlink\" title=\"1. 分支操作\"></a>1. 分支操作</h3><ol>\n<li>将当前内容全部复制到一个新分支：<code>git checkout -b 新分支名称</code></li>\n<li>删除分支：<code>git branch -d</code></li>\n</ol>\n<h2 id=\"具体问题的解决方案\"><a href=\"#具体问题的解决方案\" class=\"headerlink\" title=\"具体问题的解决方案\"></a>具体问题的解决方案</h2><h3 id=\"1-fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\"><a href=\"#1-fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\" class=\"headerlink\" title=\"1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。\"></a>1. fork得到的仓库的代码如何更新使得其与原仓库的代码一致。</h3><ol>\n<li>配置原仓库的路径：<code>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</code></li>\n<li>查看远程仓库的路径，确保正确添加上游仓库：<code>git remote -v</code></li>\n<li>抓取原仓库的修改：<code>git fetch upstream</code></li>\n<li>其他内容：删除某个远程仓库<code>git remote remove &lt;name&gt;</code></li>\n</ol>\n<h3 id=\"2-修改commit的注释\"><a href=\"#2-修改commit的注释\" class=\"headerlink\" title=\"2. 修改commit的注释\"></a>2. 修改commit的注释</h3><p><code>git commit --amend</code>amend为修正的意思。</p>\n<h3 id=\"3-撤销git-add\"><a href=\"#3-撤销git-add\" class=\"headerlink\" title=\"3. 撤销git add\"></a>3. 撤销git add</h3><p><code>git reset 文件名</code></p>"},{"title":"版本管理工具：svn小记","date":"2020-08-03T13:35:30.000Z","description":"svn小记","_content":"\n## mac使用svn(Subvision)\nmac自带svn，在控制台可直接使用，无需下载。\n\n## 常用命令\n* 下载项目：`svn checkout url(svn项目全路径) project_dir(本地项目全路径) --username=用户名 --password=密码`\n* 查看最近5条svn log日志：`svn log -l 5`\n该项目已遗失 (被非 svn 命令所删除) 或是不完整\n* svn status：执行SVN up和svn merge等命令出现在首位置的各字母含义如下：\n    * “ ” 无修改\n    * “A” 新增\n    * “C” 冲突\n    * “D” 删除\n    * “G” 合并\n    * “I” 忽略\n    * “M” 改变\n    * “R” 替换\n    * “X” 未纳入版本控制，但被外部定义所用\n    * “?” 未纳入版本控制\n    * “!” 该项目已遗失 (被非 svn 命令所删除) 或是不完整\n    * “~” 版本控制下的项目与其它类型的项目重名\n    * L abc.c # svn已经在.svn目录锁定了abc.c\n\n### svn update\n* A  已添加\n* D  已删除\n* U  已更新\n* C  合并冲突\n* G  合并成功\n* E  已存在\n\n## 设置忽略文件\n### 全局设置忽略文件\n找到svn的全局配置文件：`~/.subversion/config`，将`[miscellany]`段中`global-ignores`前的注释符号去掉即可。还可增加一些自己想要忽略的文件类型。\n\n此处推荐添加的一些额外忽略文件：\n```\n# Editor directories and files\n.idea .vscode *.iml *.suo\n*.ntvs* *.njsproj *.sln *.sw?\n```\n\n### 工程目录下设置忽略文件和目录\n使用`svn propedit svn:ignore <dir>`命令。\n\n## 相关资料\n* 官网文档：https://subversion.apache.org/docs/\n* svnbook：http://svnbook.red-bean.com/","source":"_posts/版本管理工具/版本管理工具：svn小记.md","raw":"---\ntitle:  版本管理工具：svn小记 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-8-3 21:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 工具 #分类\n\ntags: [svn, 版本管理工具]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: svn小记\n---\n\n## mac使用svn(Subvision)\nmac自带svn，在控制台可直接使用，无需下载。\n\n## 常用命令\n* 下载项目：`svn checkout url(svn项目全路径) project_dir(本地项目全路径) --username=用户名 --password=密码`\n* 查看最近5条svn log日志：`svn log -l 5`\n该项目已遗失 (被非 svn 命令所删除) 或是不完整\n* svn status：执行SVN up和svn merge等命令出现在首位置的各字母含义如下：\n    * “ ” 无修改\n    * “A” 新增\n    * “C” 冲突\n    * “D” 删除\n    * “G” 合并\n    * “I” 忽略\n    * “M” 改变\n    * “R” 替换\n    * “X” 未纳入版本控制，但被外部定义所用\n    * “?” 未纳入版本控制\n    * “!” 该项目已遗失 (被非 svn 命令所删除) 或是不完整\n    * “~” 版本控制下的项目与其它类型的项目重名\n    * L abc.c # svn已经在.svn目录锁定了abc.c\n\n### svn update\n* A  已添加\n* D  已删除\n* U  已更新\n* C  合并冲突\n* G  合并成功\n* E  已存在\n\n## 设置忽略文件\n### 全局设置忽略文件\n找到svn的全局配置文件：`~/.subversion/config`，将`[miscellany]`段中`global-ignores`前的注释符号去掉即可。还可增加一些自己想要忽略的文件类型。\n\n此处推荐添加的一些额外忽略文件：\n```\n# Editor directories and files\n.idea .vscode *.iml *.suo\n*.ntvs* *.njsproj *.sln *.sw?\n```\n\n### 工程目录下设置忽略文件和目录\n使用`svn propedit svn:ignore <dir>`命令。\n\n## 相关资料\n* 官网文档：https://subversion.apache.org/docs/\n* svnbook：http://svnbook.red-bean.com/","slug":"版本管理工具/版本管理工具：svn小记","published":1,"updated":"2020-08-17T09:19:48.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kj001oykrvdto2yoe9","content":"<h2 id=\"mac使用svn-Subvision\"><a href=\"#mac使用svn-Subvision\" class=\"headerlink\" title=\"mac使用svn(Subvision)\"></a>mac使用svn(Subvision)</h2><p>mac自带svn，在控制台可直接使用，无需下载。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>下载项目：<code>svn checkout url(svn项目全路径) project_dir(本地项目全路径) --username=用户名 --password=密码</code></li>\n<li>查看最近5条svn log日志：<code>svn log -l 5</code><br>该项目已遗失 (被非 svn 命令所删除) 或是不完整</li>\n<li>svn status：执行SVN up和svn merge等命令出现在首位置的各字母含义如下：<ul>\n<li>“ ” 无修改</li>\n<li>“A” 新增</li>\n<li>“C” 冲突</li>\n<li>“D” 删除</li>\n<li>“G” 合并</li>\n<li>“I” 忽略</li>\n<li>“M” 改变</li>\n<li>“R” 替换</li>\n<li>“X” 未纳入版本控制，但被外部定义所用</li>\n<li>“?” 未纳入版本控制</li>\n<li>“!” 该项目已遗失 (被非 svn 命令所删除) 或是不完整</li>\n<li>“~” 版本控制下的项目与其它类型的项目重名</li>\n<li>L abc.c # svn已经在.svn目录锁定了abc.c</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"svn-update\"><a href=\"#svn-update\" class=\"headerlink\" title=\"svn update\"></a>svn update</h3><ul>\n<li>A  已添加</li>\n<li>D  已删除</li>\n<li>U  已更新</li>\n<li>C  合并冲突</li>\n<li>G  合并成功</li>\n<li>E  已存在</li>\n</ul>\n<h2 id=\"设置忽略文件\"><a href=\"#设置忽略文件\" class=\"headerlink\" title=\"设置忽略文件\"></a>设置忽略文件</h2><h3 id=\"全局设置忽略文件\"><a href=\"#全局设置忽略文件\" class=\"headerlink\" title=\"全局设置忽略文件\"></a>全局设置忽略文件</h3><p>找到svn的全局配置文件：<code>~/.subversion/config</code>，将<code>[miscellany]</code>段中<code>global-ignores</code>前的注释符号去掉即可。还可增加一些自己想要忽略的文件类型。</p>\n<p>此处推荐添加的一些额外忽略文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Editor directories and files</span><br><span class=\"line\">.idea .vscode *.iml *.suo</span><br><span class=\"line\">*.ntvs* *.njsproj *.sln *.sw?</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工程目录下设置忽略文件和目录\"><a href=\"#工程目录下设置忽略文件和目录\" class=\"headerlink\" title=\"工程目录下设置忽略文件和目录\"></a>工程目录下设置忽略文件和目录</h3><p>使用<code>svn propedit svn:ignore &lt;dir&gt;</code>命令。</p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li>官网文档：<a href=\"https://subversion.apache.org/docs/\" target=\"_blank\" rel=\"noopener\">https://subversion.apache.org/docs/</a></li>\n<li>svnbook：<a href=\"http://svnbook.red-bean.com/\" target=\"_blank\" rel=\"noopener\">http://svnbook.red-bean.com/</a></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"mac使用svn-Subvision\"><a href=\"#mac使用svn-Subvision\" class=\"headerlink\" title=\"mac使用svn(Subvision)\"></a>mac使用svn(Subvision)</h2><p>mac自带svn，在控制台可直接使用，无需下载。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>下载项目：<code>svn checkout url(svn项目全路径) project_dir(本地项目全路径) --username=用户名 --password=密码</code></li>\n<li>查看最近5条svn log日志：<code>svn log -l 5</code><br>该项目已遗失 (被非 svn 命令所删除) 或是不完整</li>\n<li>svn status：执行SVN up和svn merge等命令出现在首位置的各字母含义如下：<ul>\n<li>“ ” 无修改</li>\n<li>“A” 新增</li>\n<li>“C” 冲突</li>\n<li>“D” 删除</li>\n<li>“G” 合并</li>\n<li>“I” 忽略</li>\n<li>“M” 改变</li>\n<li>“R” 替换</li>\n<li>“X” 未纳入版本控制，但被外部定义所用</li>\n<li>“?” 未纳入版本控制</li>\n<li>“!” 该项目已遗失 (被非 svn 命令所删除) 或是不完整</li>\n<li>“~” 版本控制下的项目与其它类型的项目重名</li>\n<li>L abc.c # svn已经在.svn目录锁定了abc.c</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"svn-update\"><a href=\"#svn-update\" class=\"headerlink\" title=\"svn update\"></a>svn update</h3><ul>\n<li>A  已添加</li>\n<li>D  已删除</li>\n<li>U  已更新</li>\n<li>C  合并冲突</li>\n<li>G  合并成功</li>\n<li>E  已存在</li>\n</ul>\n<h2 id=\"设置忽略文件\"><a href=\"#设置忽略文件\" class=\"headerlink\" title=\"设置忽略文件\"></a>设置忽略文件</h2><h3 id=\"全局设置忽略文件\"><a href=\"#全局设置忽略文件\" class=\"headerlink\" title=\"全局设置忽略文件\"></a>全局设置忽略文件</h3><p>找到svn的全局配置文件：<code>~/.subversion/config</code>，将<code>[miscellany]</code>段中<code>global-ignores</code>前的注释符号去掉即可。还可增加一些自己想要忽略的文件类型。</p>\n<p>此处推荐添加的一些额外忽略文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Editor directories and files</span><br><span class=\"line\">.idea .vscode *.iml *.suo</span><br><span class=\"line\">*.ntvs* *.njsproj *.sln *.sw?</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工程目录下设置忽略文件和目录\"><a href=\"#工程目录下设置忽略文件和目录\" class=\"headerlink\" title=\"工程目录下设置忽略文件和目录\"></a>工程目录下设置忽略文件和目录</h3><p>使用<code>svn propedit svn:ignore &lt;dir&gt;</code>命令。</p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ul>\n<li>官网文档：<a href=\"https://subversion.apache.org/docs/\" target=\"_blank\" rel=\"noopener\">https://subversion.apache.org/docs/</a></li>\n<li>svnbook：<a href=\"http://svnbook.red-bean.com/\" target=\"_blank\" rel=\"noopener\">http://svnbook.red-bean.com/</a></li>\n</ul>\n"},{"title":"打造舒适的Mac工作环境：CLI配置","date":"2020-07-02T13:47:50.000Z","description":"mac工具","_content":"\nmac环境下的CLI终端工具及bash配置推荐。\n\n<!-- more -->\n\n## 目录\n1. CLI终端推荐：iTerm2\n2. bash推荐：oh-my-zsh\n3. bsah相关的命令\n\n## 1. CLI终端推荐：iTerm2\n1. 下载地址：https://www.iterm2.com/\n\n### 实用小技巧\n* 分屏：`command+d`。\n\n## 2. bash推荐：oh-my-zsh\noh-my-zsh是一款傻瓜化的zsh配置工具。优点：省心，功能强大。\n1. 安装oh-my-zsh：`sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`\n\n### 2.1 插件\n如何安装插件？\n1. 在`oh-my-zsh安装位置/.oh-my-zsh/custom/plugins`文件夹下，使用插件名创建文件夹`mkdir 插件名`\n2. 将下载好的插件放入该文件夹中。\n3. 打开oh-my-zsh配置文件：`vim ~/.zshrc`\n4. 在配置文件结束添加如下内容：`source $ZSH/custom/plugins/插件名文件夹/插件名`（vim中`shit+G`可以快速跳转到最后一行）\n5. 更新配置`source ~/.zshrc`\n\n#### 2.1.1 git plugin（自带插件）\n这款插件默认开启。该插件为大量的git的命令设置了别名，\n\n文档地址：https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/\n\n#### 2.1.2 extract plugin（自带插件）\n一款功能强大的解压软件。仅通过一个命令`extract`即可解压大部分的压缩文件，包括rar、zip、tar等。\n\n文档地址：https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract\n\n#### 2.1.3 自动补全插件\n这款插件可以在用户输入命令时，在光标下方提示可以使用的命令、文件等信息，再也不用为记不住linux命令名、不停地输入ls而苦恼。\n\n插件下载地址：http://mimosa-pudica.net/src/incr-0.2.zsh\n\n## 2. bash相关的命令\n* 查看当前终端使用的bash：`echo $SHELL`\n* 查看当前安装的所有bash：`cat /etc/shells`","source":"_posts/环境搭建/Mac bash配置.md","raw":"---\ntitle: 打造舒适的Mac工作环境：CLI配置 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-07-02 21:47:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: mac #分类\ntags: [mac, 工具] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: mac工具\n---\n\nmac环境下的CLI终端工具及bash配置推荐。\n\n<!-- more -->\n\n## 目录\n1. CLI终端推荐：iTerm2\n2. bash推荐：oh-my-zsh\n3. bsah相关的命令\n\n## 1. CLI终端推荐：iTerm2\n1. 下载地址：https://www.iterm2.com/\n\n### 实用小技巧\n* 分屏：`command+d`。\n\n## 2. bash推荐：oh-my-zsh\noh-my-zsh是一款傻瓜化的zsh配置工具。优点：省心，功能强大。\n1. 安装oh-my-zsh：`sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`\n\n### 2.1 插件\n如何安装插件？\n1. 在`oh-my-zsh安装位置/.oh-my-zsh/custom/plugins`文件夹下，使用插件名创建文件夹`mkdir 插件名`\n2. 将下载好的插件放入该文件夹中。\n3. 打开oh-my-zsh配置文件：`vim ~/.zshrc`\n4. 在配置文件结束添加如下内容：`source $ZSH/custom/plugins/插件名文件夹/插件名`（vim中`shit+G`可以快速跳转到最后一行）\n5. 更新配置`source ~/.zshrc`\n\n#### 2.1.1 git plugin（自带插件）\n这款插件默认开启。该插件为大量的git的命令设置了别名，\n\n文档地址：https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/\n\n#### 2.1.2 extract plugin（自带插件）\n一款功能强大的解压软件。仅通过一个命令`extract`即可解压大部分的压缩文件，包括rar、zip、tar等。\n\n文档地址：https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract\n\n#### 2.1.3 自动补全插件\n这款插件可以在用户输入命令时，在光标下方提示可以使用的命令、文件等信息，再也不用为记不住linux命令名、不停地输入ls而苦恼。\n\n插件下载地址：http://mimosa-pudica.net/src/incr-0.2.zsh\n\n## 2. bash相关的命令\n* 查看当前终端使用的bash：`echo $SHELL`\n* 查看当前安装的所有bash：`cat /etc/shells`","slug":"环境搭建/Mac bash配置","published":1,"updated":"2020-08-17T09:18:12.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kj001pykrv1yptmpcv","content":"<p>mac环境下的CLI终端工具及bash配置推荐。</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li>CLI终端推荐：iTerm2</li>\n<li>bash推荐：oh-my-zsh</li>\n<li>bsah相关的命令</li>\n</ol>\n<h2 id=\"1-CLI终端推荐：iTerm2\"><a href=\"#1-CLI终端推荐：iTerm2\" class=\"headerlink\" title=\"1. CLI终端推荐：iTerm2\"></a>1. CLI终端推荐：iTerm2</h2><ol>\n<li>下载地址：<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/</a></li>\n</ol>\n<h3 id=\"实用小技巧\"><a href=\"#实用小技巧\" class=\"headerlink\" title=\"实用小技巧\"></a>实用小技巧</h3><ul>\n<li>分屏：<code>command+d</code>。</li>\n</ul>\n<h2 id=\"2-bash推荐：oh-my-zsh\"><a href=\"#2-bash推荐：oh-my-zsh\" class=\"headerlink\" title=\"2. bash推荐：oh-my-zsh\"></a>2. bash推荐：oh-my-zsh</h2><p>oh-my-zsh是一款傻瓜化的zsh配置工具。优点：省心，功能强大。</p>\n<ol>\n<li>安装oh-my-zsh：<code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li>\n</ol>\n<h3 id=\"2-1-插件\"><a href=\"#2-1-插件\" class=\"headerlink\" title=\"2.1 插件\"></a>2.1 插件</h3><p>如何安装插件？</p>\n<ol>\n<li>在<code>oh-my-zsh安装位置/.oh-my-zsh/custom/plugins</code>文件夹下，使用插件名创建文件夹<code>mkdir 插件名</code></li>\n<li>将下载好的插件放入该文件夹中。</li>\n<li>打开oh-my-zsh配置文件：<code>vim ~/.zshrc</code></li>\n<li>在配置文件结束添加如下内容：<code>source $ZSH/custom/plugins/插件名文件夹/插件名</code>（vim中<code>shit+G</code>可以快速跳转到最后一行）</li>\n<li>更新配置<code>source ~/.zshrc</code></li>\n</ol>\n<h4 id=\"2-1-1-git-plugin（自带插件）\"><a href=\"#2-1-1-git-plugin（自带插件）\" class=\"headerlink\" title=\"2.1.1 git plugin（自带插件）\"></a>2.1.1 git plugin（自带插件）</h4><p>这款插件默认开启。该插件为大量的git的命令设置了别名，</p>\n<p>文档地址：<a href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/\" target=\"_blank\" rel=\"noopener\">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/</a></p>\n<h4 id=\"2-1-2-extract-plugin（自带插件）\"><a href=\"#2-1-2-extract-plugin（自带插件）\" class=\"headerlink\" title=\"2.1.2 extract plugin（自带插件）\"></a>2.1.2 extract plugin（自带插件）</h4><p>一款功能强大的解压软件。仅通过一个命令<code>extract</code>即可解压大部分的压缩文件，包括rar、zip、tar等。</p>\n<p>文档地址：<a href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract\" target=\"_blank\" rel=\"noopener\">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract</a></p>\n<h4 id=\"2-1-3-自动补全插件\"><a href=\"#2-1-3-自动补全插件\" class=\"headerlink\" title=\"2.1.3 自动补全插件\"></a>2.1.3 自动补全插件</h4><p>这款插件可以在用户输入命令时，在光标下方提示可以使用的命令、文件等信息，再也不用为记不住linux命令名、不停地输入ls而苦恼。</p>\n<p>插件下载地址：<a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a></p>\n<h2 id=\"2-bash相关的命令\"><a href=\"#2-bash相关的命令\" class=\"headerlink\" title=\"2. bash相关的命令\"></a>2. bash相关的命令</h2><ul>\n<li>查看当前终端使用的bash：<code>echo $SHELL</code></li>\n<li>查看当前安装的所有bash：<code>cat /etc/shells</code></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>mac环境下的CLI终端工具及bash配置推荐。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li>CLI终端推荐：iTerm2</li>\n<li>bash推荐：oh-my-zsh</li>\n<li>bsah相关的命令</li>\n</ol>\n<h2 id=\"1-CLI终端推荐：iTerm2\"><a href=\"#1-CLI终端推荐：iTerm2\" class=\"headerlink\" title=\"1. CLI终端推荐：iTerm2\"></a>1. CLI终端推荐：iTerm2</h2><ol>\n<li>下载地址：<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">https://www.iterm2.com/</a></li>\n</ol>\n<h3 id=\"实用小技巧\"><a href=\"#实用小技巧\" class=\"headerlink\" title=\"实用小技巧\"></a>实用小技巧</h3><ul>\n<li>分屏：<code>command+d</code>。</li>\n</ul>\n<h2 id=\"2-bash推荐：oh-my-zsh\"><a href=\"#2-bash推荐：oh-my-zsh\" class=\"headerlink\" title=\"2. bash推荐：oh-my-zsh\"></a>2. bash推荐：oh-my-zsh</h2><p>oh-my-zsh是一款傻瓜化的zsh配置工具。优点：省心，功能强大。</p>\n<ol>\n<li>安装oh-my-zsh：<code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li>\n</ol>\n<h3 id=\"2-1-插件\"><a href=\"#2-1-插件\" class=\"headerlink\" title=\"2.1 插件\"></a>2.1 插件</h3><p>如何安装插件？</p>\n<ol>\n<li>在<code>oh-my-zsh安装位置/.oh-my-zsh/custom/plugins</code>文件夹下，使用插件名创建文件夹<code>mkdir 插件名</code></li>\n<li>将下载好的插件放入该文件夹中。</li>\n<li>打开oh-my-zsh配置文件：<code>vim ~/.zshrc</code></li>\n<li>在配置文件结束添加如下内容：<code>source $ZSH/custom/plugins/插件名文件夹/插件名</code>（vim中<code>shit+G</code>可以快速跳转到最后一行）</li>\n<li>更新配置<code>source ~/.zshrc</code></li>\n</ol>\n<h4 id=\"2-1-1-git-plugin（自带插件）\"><a href=\"#2-1-1-git-plugin（自带插件）\" class=\"headerlink\" title=\"2.1.1 git plugin（自带插件）\"></a>2.1.1 git plugin（自带插件）</h4><p>这款插件默认开启。该插件为大量的git的命令设置了别名，</p>\n<p>文档地址：<a href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/\" target=\"_blank\" rel=\"noopener\">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/</a></p>\n<h4 id=\"2-1-2-extract-plugin（自带插件）\"><a href=\"#2-1-2-extract-plugin（自带插件）\" class=\"headerlink\" title=\"2.1.2 extract plugin（自带插件）\"></a>2.1.2 extract plugin（自带插件）</h4><p>一款功能强大的解压软件。仅通过一个命令<code>extract</code>即可解压大部分的压缩文件，包括rar、zip、tar等。</p>\n<p>文档地址：<a href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract\" target=\"_blank\" rel=\"noopener\">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract</a></p>\n<h4 id=\"2-1-3-自动补全插件\"><a href=\"#2-1-3-自动补全插件\" class=\"headerlink\" title=\"2.1.3 自动补全插件\"></a>2.1.3 自动补全插件</h4><p>这款插件可以在用户输入命令时，在光标下方提示可以使用的命令、文件等信息，再也不用为记不住linux命令名、不停地输入ls而苦恼。</p>\n<p>插件下载地址：<a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a></p>\n<h2 id=\"2-bash相关的命令\"><a href=\"#2-bash相关的命令\" class=\"headerlink\" title=\"2. bash相关的命令\"></a>2. bash相关的命令</h2><ul>\n<li>查看当前终端使用的bash：<code>echo $SHELL</code></li>\n<li>查看当前安装的所有bash：<code>cat /etc/shells</code></li>\n</ul>"},{"title":"GitHub Page + Hexo 搭建博客（win10）","date":"2017-05-10T13:12:50.000Z","description":"简要介绍了一下搭建博客的过程、遇到的问题及解决方案。","_content":"\n简要介绍一下搭建博客的过程、遇到的问题及解决方案。\n\n<!-- more -->\n\n\n### 搭建hexo博客\n\n\n[参考](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/ )这篇博客写的相当详细。\n\n\n### 创建GithubPages\n\n[官方教程](https://pages.github.com/)\n\n简单来说：\n1. 登录你的github，在repositories里点击“new”新建一个仓库。ok,我们该给仓库起名了。\n2. 仓库名称必须为：你的用户名.github.io,例如我的github名称为Michael-Zhang-Xian-Sen,所以仓库名必须为：Michael-Zhang-Xian-Sen.github.io\n\n\n### 发表文章\n\n1. 新建文章\nhexo n 命令，会在项目\\source_posts中生成my new post.md文件，用编辑器打开即可进行编写。\n或者写好.md文件后，在\\source_posts中新建md文件。\n2. 推送文章\n执行：\n> hexo g #生成文章\n> hexo d #部署，可与hexo g合并为hexo d -g\n3. md文章标头格式\n> title： 文章页面上的显示名称，可以任意修改，不会出现在URL中。\n> date：文章生成时间。格式为xxxx-xx-xx xx:xx:xx\n> categories：文章所属分类\n> tags：文章标签。\n\n### 更改主题配置\n在hexo下的/themes/(你的主题名称)/_config.yml文件，对其进行更改。\n最后通过hexo d -g提交更改。\n\n### 常用命令：\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n\n### 部分简写：\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n","source":"_posts/环境搭建/build-blog.md","raw":"---\ntitle: GitHub Page + Hexo 搭建博客（win10） #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-05-10 21:12:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 环境搭建 #分类\ntags: [win10,博客] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 简要介绍了一下搭建博客的过程、遇到的问题及解决方案。\n---\n\n简要介绍一下搭建博客的过程、遇到的问题及解决方案。\n\n<!-- more -->\n\n\n### 搭建hexo博客\n\n\n[参考](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/ )这篇博客写的相当详细。\n\n\n### 创建GithubPages\n\n[官方教程](https://pages.github.com/)\n\n简单来说：\n1. 登录你的github，在repositories里点击“new”新建一个仓库。ok,我们该给仓库起名了。\n2. 仓库名称必须为：你的用户名.github.io,例如我的github名称为Michael-Zhang-Xian-Sen,所以仓库名必须为：Michael-Zhang-Xian-Sen.github.io\n\n\n### 发表文章\n\n1. 新建文章\nhexo n 命令，会在项目\\source_posts中生成my new post.md文件，用编辑器打开即可进行编写。\n或者写好.md文件后，在\\source_posts中新建md文件。\n2. 推送文章\n执行：\n> hexo g #生成文章\n> hexo d #部署，可与hexo g合并为hexo d -g\n3. md文章标头格式\n> title： 文章页面上的显示名称，可以任意修改，不会出现在URL中。\n> date：文章生成时间。格式为xxxx-xx-xx xx:xx:xx\n> categories：文章所属分类\n> tags：文章标签。\n\n### 更改主题配置\n在hexo下的/themes/(你的主题名称)/_config.yml文件，对其进行更改。\n最后通过hexo d -g提交更改。\n\n### 常用命令：\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n\n### 部分简写：\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n","slug":"环境搭建/build-blog","published":1,"updated":"2020-08-17T08:02:38.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kk001qykrvyyevb7p7","content":"<p>简要介绍一下搭建博客的过程、遇到的问题及解决方案。</p>\n<a id=\"more\"></a>\n<h3 id=\"搭建hexo博客\"><a href=\"#搭建hexo博客\" class=\"headerlink\" title=\"搭建hexo博客\"></a>搭建hexo博客</h3><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">参考</a>这篇博客写的相当详细。</p>\n<h3 id=\"创建GithubPages\"><a href=\"#创建GithubPages\" class=\"headerlink\" title=\"创建GithubPages\"></a>创建GithubPages</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<p>简单来说：</p>\n<ol>\n<li>登录你的github，在repositories里点击“new”新建一个仓库。ok,我们该给仓库起名了。</li>\n<li>仓库名称必须为：你的用户名.github.io,例如我的github名称为Michael-Zhang-Xian-Sen,所以仓库名必须为：Michael-Zhang-Xian-Sen.github.io</li>\n</ol>\n<h3 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h3><ol>\n<li>新建文章<br>hexo n 命令，会在项目\\source_posts中生成my new post.md文件，用编辑器打开即可进行编写。<br>或者写好.md文件后，在\\source_posts中新建md文件。</li>\n<li>推送文章<br>执行：<blockquote>\n<p>hexo g #生成文章<br>hexo d #部署，可与hexo g合并为hexo d -g</p>\n</blockquote>\n</li>\n<li>md文章标头格式<blockquote>\n<p>title： 文章页面上的显示名称，可以任意修改，不会出现在URL中。<br>date：文章生成时间。格式为xxxx-xx-xx xx:xx:xx<br>categories：文章所属分类<br>tags：文章标签。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"更改主题配置\"><a href=\"#更改主题配置\" class=\"headerlink\" title=\"更改主题配置\"></a>更改主题配置</h3><p>在hexo下的/themes/(你的主题名称)/_config.yml文件，对其进行更改。<br>最后通过hexo d -g提交更改。</p>\n<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p>\n<h3 id=\"部分简写：\"><a href=\"#部分简写：\" class=\"headerlink\" title=\"部分简写：\"></a>部分简写：</h3><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>简要介绍一下搭建博客的过程、遇到的问题及解决方案。</p>","more":"<h3 id=\"搭建hexo博客\"><a href=\"#搭建hexo博客\" class=\"headerlink\" title=\"搭建hexo博客\"></a>搭建hexo博客</h3><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">参考</a>这篇博客写的相当详细。</p>\n<h3 id=\"创建GithubPages\"><a href=\"#创建GithubPages\" class=\"headerlink\" title=\"创建GithubPages\"></a>创建GithubPages</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<p>简单来说：</p>\n<ol>\n<li>登录你的github，在repositories里点击“new”新建一个仓库。ok,我们该给仓库起名了。</li>\n<li>仓库名称必须为：你的用户名.github.io,例如我的github名称为Michael-Zhang-Xian-Sen,所以仓库名必须为：Michael-Zhang-Xian-Sen.github.io</li>\n</ol>\n<h3 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h3><ol>\n<li>新建文章<br>hexo n 命令，会在项目\\source_posts中生成my new post.md文件，用编辑器打开即可进行编写。<br>或者写好.md文件后，在\\source_posts中新建md文件。</li>\n<li>推送文章<br>执行：<blockquote>\n<p>hexo g #生成文章<br>hexo d #部署，可与hexo g合并为hexo d -g</p>\n</blockquote>\n</li>\n<li>md文章标头格式<blockquote>\n<p>title： 文章页面上的显示名称，可以任意修改，不会出现在URL中。<br>date：文章生成时间。格式为xxxx-xx-xx xx:xx:xx<br>categories：文章所属分类<br>tags：文章标签。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"更改主题配置\"><a href=\"#更改主题配置\" class=\"headerlink\" title=\"更改主题配置\"></a>更改主题配置</h3><p>在hexo下的/themes/(你的主题名称)/_config.yml文件，对其进行更改。<br>最后通过hexo d -g提交更改。</p>\n<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p>\n<h3 id=\"部分简写：\"><a href=\"#部分简写：\" class=\"headerlink\" title=\"部分简写：\"></a>部分简写：</h3><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>"},{"title":"搭建mysql环境（mac版本）","date":"2020-03-15T01:24:30.000Z","description":"搭建mysql环境（mac版本）","_content":"\n简要地记录了mac系统搭建mysql数据库的过程。\n\n<!-- more -->\n\n## 从官网下载安装包并进行安装\n1. [官网](https://dev.mysql.com/downloads/mysql/)根据期望安装的版本号下载mysql。建议下载dmg包。\n2. 下载完成后，根据提示步骤安装。\n    * 注意：mysql可能会生成默认密码，生成时有相应提示，请把默认密码记录下来。\n3. 安装完毕，重启mac，可以发现系统偏好设置中添加了mysql的图标。\n4. 启动mysql服务后，在控制台输入`ps aux | grep mysql`，查找到mysql的运行路径。\n5. 根据运行路径找到mysql文件夹，并找到mysql程序的`bin`目录（即可运行的二进制文件目录）。笔者的路径为：`/usr/local/mysql/bin`。\n7. 添加mysql的路径至环境变量：`vim ~/.bash_profile`，添加如下内容：\n    ```\n        export MYSQL_HOME=/usr/local/mysql\n        export PATH=$PATH:$MAVEN_HOME/bin:$MYSQL_HOME/bin\n    ```\n    其中 `export MYSQL_HOME=/usr/local/mysql`和`export PATH=$PATH:$MYSQL_HOME/bin`是重点。`$MAVEN_HOME/bin:`可以忽略，这个仅仅是笔者电脑中又添加了MAVEN的环境变量。\n8. 运行`mysql -u root -p`，输入密码，登陆mysql，大功告成。\n\n## 推荐工具\n\n### 图形化客户端\n\nNavicat Premium for Mac","source":"_posts/环境搭建/mac搭建mysql环境.md","raw":"---\ntitle: 搭建mysql环境（mac版本） #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-03-15 09:24:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: mysql #分类\n\ntags: [环境搭建, mysql] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 搭建mysql环境（mac版本）\n\n---\n\n简要地记录了mac系统搭建mysql数据库的过程。\n\n<!-- more -->\n\n## 从官网下载安装包并进行安装\n1. [官网](https://dev.mysql.com/downloads/mysql/)根据期望安装的版本号下载mysql。建议下载dmg包。\n2. 下载完成后，根据提示步骤安装。\n    * 注意：mysql可能会生成默认密码，生成时有相应提示，请把默认密码记录下来。\n3. 安装完毕，重启mac，可以发现系统偏好设置中添加了mysql的图标。\n4. 启动mysql服务后，在控制台输入`ps aux | grep mysql`，查找到mysql的运行路径。\n5. 根据运行路径找到mysql文件夹，并找到mysql程序的`bin`目录（即可运行的二进制文件目录）。笔者的路径为：`/usr/local/mysql/bin`。\n7. 添加mysql的路径至环境变量：`vim ~/.bash_profile`，添加如下内容：\n    ```\n        export MYSQL_HOME=/usr/local/mysql\n        export PATH=$PATH:$MAVEN_HOME/bin:$MYSQL_HOME/bin\n    ```\n    其中 `export MYSQL_HOME=/usr/local/mysql`和`export PATH=$PATH:$MYSQL_HOME/bin`是重点。`$MAVEN_HOME/bin:`可以忽略，这个仅仅是笔者电脑中又添加了MAVEN的环境变量。\n8. 运行`mysql -u root -p`，输入密码，登陆mysql，大功告成。\n\n## 推荐工具\n\n### 图形化客户端\n\nNavicat Premium for Mac","slug":"环境搭建/mac搭建mysql环境","published":1,"updated":"2020-08-17T07:55:51.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kk001rykrvy6zesm8f","content":"<p>简要地记录了mac系统搭建mysql数据库的过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"从官网下载安装包并进行安装\"><a href=\"#从官网下载安装包并进行安装\" class=\"headerlink\" title=\"从官网下载安装包并进行安装\"></a>从官网下载安装包并进行安装</h2><ol>\n<li><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">官网</a>根据期望安装的版本号下载mysql。建议下载dmg包。</li>\n<li>下载完成后，根据提示步骤安装。<ul>\n<li>注意：mysql可能会生成默认密码，生成时有相应提示，请把默认密码记录下来。</li>\n</ul>\n</li>\n<li>安装完毕，重启mac，可以发现系统偏好设置中添加了mysql的图标。</li>\n<li>启动mysql服务后，在控制台输入<code>ps aux | grep mysql</code>，查找到mysql的运行路径。</li>\n<li>根据运行路径找到mysql文件夹，并找到mysql程序的<code>bin</code>目录（即可运行的二进制文件目录）。笔者的路径为：<code>/usr/local/mysql/bin</code>。</li>\n<li><p>添加mysql的路径至环境变量：<code>vim ~/.bash_profile</code>，添加如下内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MYSQL_HOME=/usr/local/mysql</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin:$MYSQL_HOME/bin</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>export MYSQL_HOME=/usr/local/mysql</code>和<code>export PATH=$PATH:$MYSQL_HOME/bin</code>是重点。<code>$MAVEN_HOME/bin:</code>可以忽略，这个仅仅是笔者电脑中又添加了MAVEN的环境变量。</p>\n</li>\n<li>运行<code>mysql -u root -p</code>，输入密码，登陆mysql，大功告成。</li>\n</ol>\n<h2 id=\"推荐工具\"><a href=\"#推荐工具\" class=\"headerlink\" title=\"推荐工具\"></a>推荐工具</h2><h3 id=\"图形化客户端\"><a href=\"#图形化客户端\" class=\"headerlink\" title=\"图形化客户端\"></a>图形化客户端</h3><p>Navicat Premium for Mac</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>简要地记录了mac系统搭建mysql数据库的过程。</p>","more":"<h2 id=\"从官网下载安装包并进行安装\"><a href=\"#从官网下载安装包并进行安装\" class=\"headerlink\" title=\"从官网下载安装包并进行安装\"></a>从官网下载安装包并进行安装</h2><ol>\n<li><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">官网</a>根据期望安装的版本号下载mysql。建议下载dmg包。</li>\n<li>下载完成后，根据提示步骤安装。<ul>\n<li>注意：mysql可能会生成默认密码，生成时有相应提示，请把默认密码记录下来。</li>\n</ul>\n</li>\n<li>安装完毕，重启mac，可以发现系统偏好设置中添加了mysql的图标。</li>\n<li>启动mysql服务后，在控制台输入<code>ps aux | grep mysql</code>，查找到mysql的运行路径。</li>\n<li>根据运行路径找到mysql文件夹，并找到mysql程序的<code>bin</code>目录（即可运行的二进制文件目录）。笔者的路径为：<code>/usr/local/mysql/bin</code>。</li>\n<li><p>添加mysql的路径至环境变量：<code>vim ~/.bash_profile</code>，添加如下内容：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MYSQL_HOME=/usr/local/mysql</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin:$MYSQL_HOME/bin</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>export MYSQL_HOME=/usr/local/mysql</code>和<code>export PATH=$PATH:$MYSQL_HOME/bin</code>是重点。<code>$MAVEN_HOME/bin:</code>可以忽略，这个仅仅是笔者电脑中又添加了MAVEN的环境变量。</p>\n</li>\n<li>运行<code>mysql -u root -p</code>，输入密码，登陆mysql，大功告成。</li>\n</ol>\n<h2 id=\"推荐工具\"><a href=\"#推荐工具\" class=\"headerlink\" title=\"推荐工具\"></a>推荐工具</h2><h3 id=\"图形化客户端\"><a href=\"#图形化客户端\" class=\"headerlink\" title=\"图形化客户端\"></a>图形化客户端</h3><p>Navicat Premium for Mac</p>"},{"title":"科学上网","date":"2020-01-26T14:52:50.000Z","description":"科学上网","thumbnail":"http://cdn.ewinds.pw/ss%20plane.jpg","_content":"\n记录博主科学上网的方法。「封面图来自：《飞行家》，2004，莱昂纳多主演」\n\n<!-- more -->\n\n1. [服务器](#server)\n2. [客户端](#client)\n3. [其他工具](#other)\n\n### <div id=\"server\">1.服务器</div>\n* [服务器提供商](https://www.vultr.com/?ref=8556744)。\n* [服务器运行的程序](https://github.com/233boy/v2ray)。\n\n### <div id=\"client\">2.客户端</div>\n* 小灰机\n    * windows：[点我](https://github.com/shadowsocks/shadowsocks-windows)（打开页面后，点击\"中文说明\"->下载\"最新版\"->assets里的链接。）\n    * 安卓：[下载链接点我](https://www.apkturbo.com/apps/shadowsocks/com.github.shadowsocks/4.8.7/)（如果安装失败可以尝试下载其他版本。也可通过https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）\n    * mac：SsrConnectPro（需要花几块钱购买）\n    * ios：SsrConnectPro\n* v2ray\n    * windows：[GitHub仓库点我](https://github.com/2dust/v2rayN/releases)\n    * 安卓：[GitHub仓库点我](https://github.com/2dust/v2rayNG)，[下载链接点我](https://www.apkturbo.com/apps/v2rayng/com.v2ray.ang/1.0.0/)\n    * mac：[GitHub仓库点我](https://github.com/Cenmrev/V2RayX)\n    * ios：暂未找到...\n\n### <div id=\"other\">3.其他工具</div>\n\n#### 上网不科学，也能谷歌play\n* https://apps.evozi.com/apk-downloader/\n* https://www.apkturbo.com/\n\n#### Google BBR算法 优化tcp链接速度\n* 转自Mr_Bluyee,[原文链接](https://www.jianshu.com/p/98c21990ed23)\n* Linux kernel 4.9 及以上已支持 tcp_bbr\n1. 查看系统内核版本`uname -r`看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。\n2. 开启BBR：\n    1. `echo \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf`\n    2. `echo \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf`\n3. 保存生效：```sysctl -p```\n4. 检查BBR是否启用：\n    * `sysctl net.ipv4.tcp_available_congestion_control`返回值一般为：net.ipv4.tcp_available_congestion_control = reno cubic bbr\n    * `sysctl net.ipv4.tcp_congestion_control`返回值一般为：net.ipv4.tcp_congestion_control = bbr\n    * `sysctl net.core.default_qdisc`返回值一般为：net.core.default_qdisc = fq\n    * `lsmod | grep bbr`返回值有 tcp_bbr 模块则BBR已启动：`tcp_bbr 20480 10`","source":"_posts/环境搭建/科学上网.md","raw":"---\ntitle: 科学上网\ndate: 2020-01-26 22:52:50 \ncategories: 计算机网络 \ntags: [vps] \ndescription: 科学上网\nthumbnail: http://cdn.ewinds.pw/ss%20plane.jpg\n---\n\n记录博主科学上网的方法。「封面图来自：《飞行家》，2004，莱昂纳多主演」\n\n<!-- more -->\n\n1. [服务器](#server)\n2. [客户端](#client)\n3. [其他工具](#other)\n\n### <div id=\"server\">1.服务器</div>\n* [服务器提供商](https://www.vultr.com/?ref=8556744)。\n* [服务器运行的程序](https://github.com/233boy/v2ray)。\n\n### <div id=\"client\">2.客户端</div>\n* 小灰机\n    * windows：[点我](https://github.com/shadowsocks/shadowsocks-windows)（打开页面后，点击\"中文说明\"->下载\"最新版\"->assets里的链接。）\n    * 安卓：[下载链接点我](https://www.apkturbo.com/apps/shadowsocks/com.github.shadowsocks/4.8.7/)（如果安装失败可以尝试下载其他版本。也可通过https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）\n    * mac：SsrConnectPro（需要花几块钱购买）\n    * ios：SsrConnectPro\n* v2ray\n    * windows：[GitHub仓库点我](https://github.com/2dust/v2rayN/releases)\n    * 安卓：[GitHub仓库点我](https://github.com/2dust/v2rayNG)，[下载链接点我](https://www.apkturbo.com/apps/v2rayng/com.v2ray.ang/1.0.0/)\n    * mac：[GitHub仓库点我](https://github.com/Cenmrev/V2RayX)\n    * ios：暂未找到...\n\n### <div id=\"other\">3.其他工具</div>\n\n#### 上网不科学，也能谷歌play\n* https://apps.evozi.com/apk-downloader/\n* https://www.apkturbo.com/\n\n#### Google BBR算法 优化tcp链接速度\n* 转自Mr_Bluyee,[原文链接](https://www.jianshu.com/p/98c21990ed23)\n* Linux kernel 4.9 及以上已支持 tcp_bbr\n1. 查看系统内核版本`uname -r`看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。\n2. 开启BBR：\n    1. `echo \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf`\n    2. `echo \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf`\n3. 保存生效：```sysctl -p```\n4. 检查BBR是否启用：\n    * `sysctl net.ipv4.tcp_available_congestion_control`返回值一般为：net.ipv4.tcp_available_congestion_control = reno cubic bbr\n    * `sysctl net.ipv4.tcp_congestion_control`返回值一般为：net.ipv4.tcp_congestion_control = bbr\n    * `sysctl net.core.default_qdisc`返回值一般为：net.core.default_qdisc = fq\n    * `lsmod | grep bbr`返回值有 tcp_bbr 模块则BBR已启动：`tcp_bbr 20480 10`","slug":"环境搭建/科学上网","published":1,"updated":"2020-08-17T08:01:12.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kk001sykrvh6ngpqf1","content":"<p>记录博主科学上网的方法。「封面图来自：《飞行家》，2004，莱昂纳多主演」</p>\n<a id=\"more\"></a>\n<ol>\n<li><a href=\"#server\">服务器</a></li>\n<li><a href=\"#client\">客户端</a></li>\n<li><a href=\"#other\">其他工具</a></li>\n</ol>\n<h3 id=\"1-服务器\"><a href=\"#1-服务器\" class=\"headerlink\" title=\"1.服务器\"></a><div id=\"server\">1.服务器</div></h3><ul>\n<li><a href=\"https://www.vultr.com/?ref=8556744\" target=\"_blank\" rel=\"noopener\">服务器提供商</a>。</li>\n<li><a href=\"https://github.com/233boy/v2ray\" target=\"_blank\" rel=\"noopener\">服务器运行的程序</a>。</li>\n</ul>\n<h3 id=\"2-客户端\"><a href=\"#2-客户端\" class=\"headerlink\" title=\"2.客户端\"></a><div id=\"client\">2.客户端</div></h3><ul>\n<li>小灰机<ul>\n<li>windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows\" target=\"_blank\" rel=\"noopener\">点我</a>（打开页面后，点击”中文说明”-&gt;下载”最新版”-&gt;assets里的链接。）</li>\n<li>安卓：<a href=\"https://www.apkturbo.com/apps/shadowsocks/com.github.shadowsocks/4.8.7/\" target=\"_blank\" rel=\"noopener\">下载链接点我</a>（如果安装失败可以尝试下载其他版本。也可通过<a href=\"https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）\" target=\"_blank\" rel=\"noopener\">https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）</a></li>\n<li>mac：SsrConnectPro（需要花几块钱购买）</li>\n<li>ios：SsrConnectPro</li>\n</ul>\n</li>\n<li>v2ray<ul>\n<li>windows：<a href=\"https://github.com/2dust/v2rayN/releases\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a></li>\n<li>安卓：<a href=\"https://github.com/2dust/v2rayNG\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a>，<a href=\"https://www.apkturbo.com/apps/v2rayng/com.v2ray.ang/1.0.0/\" target=\"_blank\" rel=\"noopener\">下载链接点我</a></li>\n<li>mac：<a href=\"https://github.com/Cenmrev/V2RayX\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a></li>\n<li>ios：暂未找到…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a><div id=\"other\">3.其他工具</div></h3><h4 id=\"上网不科学，也能谷歌play\"><a href=\"#上网不科学，也能谷歌play\" class=\"headerlink\" title=\"上网不科学，也能谷歌play\"></a>上网不科学，也能谷歌play</h4><ul>\n<li><a href=\"https://apps.evozi.com/apk-downloader/\" target=\"_blank\" rel=\"noopener\">https://apps.evozi.com/apk-downloader/</a></li>\n<li><a href=\"https://www.apkturbo.com/\" target=\"_blank\" rel=\"noopener\">https://www.apkturbo.com/</a></li>\n</ul>\n<h4 id=\"Google-BBR算法-优化tcp链接速度\"><a href=\"#Google-BBR算法-优化tcp链接速度\" class=\"headerlink\" title=\"Google BBR算法 优化tcp链接速度\"></a>Google BBR算法 优化tcp链接速度</h4><ul>\n<li>转自Mr_Bluyee,<a href=\"https://www.jianshu.com/p/98c21990ed23\" target=\"_blank\" rel=\"noopener\">原文链接</a></li>\n<li>Linux kernel 4.9 及以上已支持 tcp_bbr</li>\n</ul>\n<ol>\n<li>查看系统内核版本<code>uname -r</code>看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。</li>\n<li>开启BBR：<ol>\n<li><code>echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</code></li>\n<li><code>echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</code></li>\n</ol>\n</li>\n<li>保存生效：<code>sysctl -p</code></li>\n<li>检查BBR是否启用：<ul>\n<li><code>sysctl net.ipv4.tcp_available_congestion_control</code>返回值一般为：net.ipv4.tcp_available_congestion_control = reno cubic bbr</li>\n<li><code>sysctl net.ipv4.tcp_congestion_control</code>返回值一般为：net.ipv4.tcp_congestion_control = bbr</li>\n<li><code>sysctl net.core.default_qdisc</code>返回值一般为：net.core.default_qdisc = fq</li>\n<li><code>lsmod | grep bbr</code>返回值有 tcp_bbr 模块则BBR已启动：<code>tcp_bbr 20480 10</code></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>记录博主科学上网的方法。「封面图来自：《飞行家》，2004，莱昂纳多主演」</p>","more":"<ol>\n<li><a href=\"#server\">服务器</a></li>\n<li><a href=\"#client\">客户端</a></li>\n<li><a href=\"#other\">其他工具</a></li>\n</ol>\n<h3 id=\"1-服务器\"><a href=\"#1-服务器\" class=\"headerlink\" title=\"1.服务器\"></a><div id=\"server\">1.服务器</div></h3><ul>\n<li><a href=\"https://www.vultr.com/?ref=8556744\" target=\"_blank\" rel=\"noopener\">服务器提供商</a>。</li>\n<li><a href=\"https://github.com/233boy/v2ray\" target=\"_blank\" rel=\"noopener\">服务器运行的程序</a>。</li>\n</ul>\n<h3 id=\"2-客户端\"><a href=\"#2-客户端\" class=\"headerlink\" title=\"2.客户端\"></a><div id=\"client\">2.客户端</div></h3><ul>\n<li>小灰机<ul>\n<li>windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows\" target=\"_blank\" rel=\"noopener\">点我</a>（打开页面后，点击”中文说明”-&gt;下载”最新版”-&gt;assets里的链接。）</li>\n<li>安卓：<a href=\"https://www.apkturbo.com/apps/shadowsocks/com.github.shadowsocks/4.8.7/\" target=\"_blank\" rel=\"noopener\">下载链接点我</a>（如果安装失败可以尝试下载其他版本。也可通过<a href=\"https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）\" target=\"_blank\" rel=\"noopener\">https://www.apkturbo.com/搜索com.github.shadowsocks下载其他类似软件。）</a></li>\n<li>mac：SsrConnectPro（需要花几块钱购买）</li>\n<li>ios：SsrConnectPro</li>\n</ul>\n</li>\n<li>v2ray<ul>\n<li>windows：<a href=\"https://github.com/2dust/v2rayN/releases\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a></li>\n<li>安卓：<a href=\"https://github.com/2dust/v2rayNG\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a>，<a href=\"https://www.apkturbo.com/apps/v2rayng/com.v2ray.ang/1.0.0/\" target=\"_blank\" rel=\"noopener\">下载链接点我</a></li>\n<li>mac：<a href=\"https://github.com/Cenmrev/V2RayX\" target=\"_blank\" rel=\"noopener\">GitHub仓库点我</a></li>\n<li>ios：暂未找到…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a><div id=\"other\">3.其他工具</div></h3><h4 id=\"上网不科学，也能谷歌play\"><a href=\"#上网不科学，也能谷歌play\" class=\"headerlink\" title=\"上网不科学，也能谷歌play\"></a>上网不科学，也能谷歌play</h4><ul>\n<li><a href=\"https://apps.evozi.com/apk-downloader/\" target=\"_blank\" rel=\"noopener\">https://apps.evozi.com/apk-downloader/</a></li>\n<li><a href=\"https://www.apkturbo.com/\" target=\"_blank\" rel=\"noopener\">https://www.apkturbo.com/</a></li>\n</ul>\n<h4 id=\"Google-BBR算法-优化tcp链接速度\"><a href=\"#Google-BBR算法-优化tcp链接速度\" class=\"headerlink\" title=\"Google BBR算法 优化tcp链接速度\"></a>Google BBR算法 优化tcp链接速度</h4><ul>\n<li>转自Mr_Bluyee,<a href=\"https://www.jianshu.com/p/98c21990ed23\" target=\"_blank\" rel=\"noopener\">原文链接</a></li>\n<li>Linux kernel 4.9 及以上已支持 tcp_bbr</li>\n</ul>\n<ol>\n<li>查看系统内核版本<code>uname -r</code>看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。</li>\n<li>开启BBR：<ol>\n<li><code>echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</code></li>\n<li><code>echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</code></li>\n</ol>\n</li>\n<li>保存生效：<code>sysctl -p</code></li>\n<li>检查BBR是否启用：<ul>\n<li><code>sysctl net.ipv4.tcp_available_congestion_control</code>返回值一般为：net.ipv4.tcp_available_congestion_control = reno cubic bbr</li>\n<li><code>sysctl net.ipv4.tcp_congestion_control</code>返回值一般为：net.ipv4.tcp_congestion_control = bbr</li>\n<li><code>sysctl net.core.default_qdisc</code>返回值一般为：net.core.default_qdisc = fq</li>\n<li><code>lsmod | grep bbr</code>返回值有 tcp_bbr 模块则BBR已启动：<code>tcp_bbr 20480 10</code></li>\n</ul>\n</li>\n</ol>"},{"title":"标签页动态图标的实现","date":"2017-05-24T13:12:50.000Z","description":"标签页动态图标","_content":"\n\n很久之前在一个人的博客上，看到了一个很有意思的效果——当我在他的页面浏览时，选项卡图标和title是一个模样，当我离开他的页面以后，他的博客所在选项卡图标又变成了另一幅模样。当时感觉非常有趣，但没有花时间去考虑如何实现。\n\n<!-- more -->\n\n最近读《JavaScript高级程序设计》第十三章事件时，看到了unload事件。在书中对其的介绍如下：\n     与load事件对应的是unload事件，这个事件在文档完全被卸载后触发。只要用户从一个页面转换到另一个页面，就会发生onunload事件。\n\n首先映入脑海的是使用onunload来实现切换选项卡时，选项卡的图标和title进行变换的效果。首先要学习一下onunload事件。\n\n---\n\n#### 第一次尝试：\n\n测试onunload方法：\ntest2.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">     \n<head>\n    <meta charset=\"UTF-8\">\n    <title>onunload事件</title>\n</head>\n<body onunload=\"alert('Unloaded！')\">\n</body>\n</html>\n```\n\n在chrome浏览器中，关闭test2.html文档或者切换该选项卡，onunload未起作用。\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/chromef123.png)\n\n首先，高程上的意思有点磨棱两可。在网上一通谷歌后才明白，“文档完全被卸载”，“用户从一个页面转换到另一个页面”实际是关掉选项卡再进行的切换。实在是坑啊，看来我们方向找错了。\n其次，我们来探究一下onunload为何未起作用。在onunload位置打上断点。并将右侧的pause on exceptions打开。如上图所示。这里有一个小知识点。\n\n\n\n通过调试，在第五次调试时推出该页面，并提示错误信息“Blocked alert('Unloaded！') during unload.”前四次中，前两步为渲染过程，后两步为网页卸载过程，但是仍不知为何会抛出这个错误，还请大神指点迷津。\n\n---\n\n#### 第二次尝试\n\n搜索一番，更正思路，以下是实现代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>被发现啦(*´∇｀*)</title>\n    <link href=\"../img/1.ico\"  rel=\"icon\" type=\"image/vnd.microsoft.icon\"/>\n</head>\n<body>\n<script>\n    //浏览器选项卡变换\n    //判断hidden属性是否存在于document属性中。\n    var hiddenProperty = 'hidden' in document ? 'hidden' :\n        'webkitHidden' in document ? 'webkitHidden' :\n            'mozHidden' in document ? 'mozHidden' :\n                null;\n    //用于在字符串中用字符串替代指定字符。第一个参数为原字符串中被替换字符串的正则表达式，第二个参数为用于替换的文本或字符串。\n    var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, 'visibilitychange');\n    //构造匿名函数，为更换标签页状态事件所要执行的函数。\n    var onVisibilityChange = function(){\n        //获取link元素\n        var links = document.head.getElementsByTagName(\"link\");\n        if (!document[hiddenProperty]) {\n            document.title='被发现啦(*´∇｀*)';\n            links[0].href = \"../img/1.ico\";\n        }else{\n            document.title='藏好啦(つд⊂)';\n            links[0].href=\"../img/2.ico\";\n        }\n    };\n    //用于向指定元素添加事件句柄，第一个参数为事件名，第二个参数为指定要事件触发时执行的函数。\n    document.addEventListener(visibilityChangeEvent, onVisibilityChange);\n</script>\n</body>\n</html>\n```\n有几点需要注意。\n变量hiddenProperty获取的是当前浏览器的hidden属性，使用了三个三元运算符来保证其兼容性。通过replace替换成为visibilitychange+属性名中除hidden外字符串。在这里要着重注意一下visibilitychange这个事件，在我们的这个效果中起到了关键的作用。\n通过dom获取link标签。更改title和href。\n为元素添加事件句柄使用addEventListener()函数。\n最后我们可以发现，实现这个效果，真的是，相当，相当简单。\n\n---\n\n#### 小知识点1：关于chrome的调试\n\n在界面下方能看到按钮，它是设置程序运行时遇到异常时是否中断的开关。点击该按钮会在3种状态间切换：\n![all_catch](http://opqksc9nz.bkt.clouddn.com/all_catch.png) 遇到所有异常都会中断，包括已捕获的情况。（两条白色竖杠包含在蓝色八边形中\n![some_catch](http://opqksc9nz.bkt.clouddn.com/some_catch.png) 仅在出现未捕获的异常时才中断。（两条白色竖杠包含在紫色八边形中 ）\n![no_catch](http://opqksc9nz.bkt.clouddn.com/no_catch.png) 默认遇到异常不中断。（两条白色竖杠包含在黑色八边形中）\n\n#### 小知识点2：visibilitychange事件\n\n浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.\n示例程序：\n\n```\ndocument.addEventListener(\"visibilitychange\", function() {\n  console.log( document.visibilityState );});\n```\n\n该事件具有四个属性：\n* target属性：事件的目标。\n* type属性：被触发的事件的类型。\n* bubbles：表明事件是否冒泡。\n* cancelable：表明是否可以取消事件的默认行为。\n\n#### 另外附上一对选项卡图标\n![1](http://opqksc9nz.bkt.clouddn.com/1.ico)\n![2](http://opqksc9nz.bkt.clouddn.com/2.ico)","source":"_posts/编程实践/title-icon.md","raw":"---\ntitle: 标签页动态图标的实现\ndate: 2017-05-24 21:12:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 标签页动态图标\n---\n\n\n很久之前在一个人的博客上，看到了一个很有意思的效果——当我在他的页面浏览时，选项卡图标和title是一个模样，当我离开他的页面以后，他的博客所在选项卡图标又变成了另一幅模样。当时感觉非常有趣，但没有花时间去考虑如何实现。\n\n<!-- more -->\n\n最近读《JavaScript高级程序设计》第十三章事件时，看到了unload事件。在书中对其的介绍如下：\n     与load事件对应的是unload事件，这个事件在文档完全被卸载后触发。只要用户从一个页面转换到另一个页面，就会发生onunload事件。\n\n首先映入脑海的是使用onunload来实现切换选项卡时，选项卡的图标和title进行变换的效果。首先要学习一下onunload事件。\n\n---\n\n#### 第一次尝试：\n\n测试onunload方法：\ntest2.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">     \n<head>\n    <meta charset=\"UTF-8\">\n    <title>onunload事件</title>\n</head>\n<body onunload=\"alert('Unloaded！')\">\n</body>\n</html>\n```\n\n在chrome浏览器中，关闭test2.html文档或者切换该选项卡，onunload未起作用。\n\n![啊图片](http://opqksc9nz.bkt.clouddn.com/chromef123.png)\n\n首先，高程上的意思有点磨棱两可。在网上一通谷歌后才明白，“文档完全被卸载”，“用户从一个页面转换到另一个页面”实际是关掉选项卡再进行的切换。实在是坑啊，看来我们方向找错了。\n其次，我们来探究一下onunload为何未起作用。在onunload位置打上断点。并将右侧的pause on exceptions打开。如上图所示。这里有一个小知识点。\n\n\n\n通过调试，在第五次调试时推出该页面，并提示错误信息“Blocked alert('Unloaded！') during unload.”前四次中，前两步为渲染过程，后两步为网页卸载过程，但是仍不知为何会抛出这个错误，还请大神指点迷津。\n\n---\n\n#### 第二次尝试\n\n搜索一番，更正思路，以下是实现代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>被发现啦(*´∇｀*)</title>\n    <link href=\"../img/1.ico\"  rel=\"icon\" type=\"image/vnd.microsoft.icon\"/>\n</head>\n<body>\n<script>\n    //浏览器选项卡变换\n    //判断hidden属性是否存在于document属性中。\n    var hiddenProperty = 'hidden' in document ? 'hidden' :\n        'webkitHidden' in document ? 'webkitHidden' :\n            'mozHidden' in document ? 'mozHidden' :\n                null;\n    //用于在字符串中用字符串替代指定字符。第一个参数为原字符串中被替换字符串的正则表达式，第二个参数为用于替换的文本或字符串。\n    var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, 'visibilitychange');\n    //构造匿名函数，为更换标签页状态事件所要执行的函数。\n    var onVisibilityChange = function(){\n        //获取link元素\n        var links = document.head.getElementsByTagName(\"link\");\n        if (!document[hiddenProperty]) {\n            document.title='被发现啦(*´∇｀*)';\n            links[0].href = \"../img/1.ico\";\n        }else{\n            document.title='藏好啦(つд⊂)';\n            links[0].href=\"../img/2.ico\";\n        }\n    };\n    //用于向指定元素添加事件句柄，第一个参数为事件名，第二个参数为指定要事件触发时执行的函数。\n    document.addEventListener(visibilityChangeEvent, onVisibilityChange);\n</script>\n</body>\n</html>\n```\n有几点需要注意。\n变量hiddenProperty获取的是当前浏览器的hidden属性，使用了三个三元运算符来保证其兼容性。通过replace替换成为visibilitychange+属性名中除hidden外字符串。在这里要着重注意一下visibilitychange这个事件，在我们的这个效果中起到了关键的作用。\n通过dom获取link标签。更改title和href。\n为元素添加事件句柄使用addEventListener()函数。\n最后我们可以发现，实现这个效果，真的是，相当，相当简单。\n\n---\n\n#### 小知识点1：关于chrome的调试\n\n在界面下方能看到按钮，它是设置程序运行时遇到异常时是否中断的开关。点击该按钮会在3种状态间切换：\n![all_catch](http://opqksc9nz.bkt.clouddn.com/all_catch.png) 遇到所有异常都会中断，包括已捕获的情况。（两条白色竖杠包含在蓝色八边形中\n![some_catch](http://opqksc9nz.bkt.clouddn.com/some_catch.png) 仅在出现未捕获的异常时才中断。（两条白色竖杠包含在紫色八边形中 ）\n![no_catch](http://opqksc9nz.bkt.clouddn.com/no_catch.png) 默认遇到异常不中断。（两条白色竖杠包含在黑色八边形中）\n\n#### 小知识点2：visibilitychange事件\n\n浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.\n示例程序：\n\n```\ndocument.addEventListener(\"visibilitychange\", function() {\n  console.log( document.visibilityState );});\n```\n\n该事件具有四个属性：\n* target属性：事件的目标。\n* type属性：被触发的事件的类型。\n* bubbles：表明事件是否冒泡。\n* cancelable：表明是否可以取消事件的默认行为。\n\n#### 另外附上一对选项卡图标\n![1](http://opqksc9nz.bkt.clouddn.com/1.ico)\n![2](http://opqksc9nz.bkt.clouddn.com/2.ico)","slug":"编程实践/title-icon","published":1,"updated":"2020-08-17T08:15:03.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kl001tykrvtzkdvf7o","content":"<p>很久之前在一个人的博客上，看到了一个很有意思的效果——当我在他的页面浏览时，选项卡图标和title是一个模样，当我离开他的页面以后，他的博客所在选项卡图标又变成了另一幅模样。当时感觉非常有趣，但没有花时间去考虑如何实现。</p>\n<a id=\"more\"></a>\n<p>最近读《JavaScript高级程序设计》第十三章事件时，看到了unload事件。在书中对其的介绍如下：<br>     与load事件对应的是unload事件，这个事件在文档完全被卸载后触发。只要用户从一个页面转换到另一个页面，就会发生onunload事件。</p>\n<p>首先映入脑海的是使用onunload来实现切换选项卡时，选项卡的图标和title进行变换的效果。首先要学习一下onunload事件。</p>\n<hr>\n<h4 id=\"第一次尝试：\"><a href=\"#第一次尝试：\" class=\"headerlink\" title=\"第一次尝试：\"></a>第一次尝试：</h4><p>测试onunload方法：<br>test2.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;     </span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;onunload事件&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body onunload=&quot;alert(&apos;Unloaded！&apos;)&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在chrome浏览器中，关闭test2.html文档或者切换该选项卡，onunload未起作用。</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/chromef123.png\" alt=\"啊图片\"></p>\n<p>首先，高程上的意思有点磨棱两可。在网上一通谷歌后才明白，“文档完全被卸载”，“用户从一个页面转换到另一个页面”实际是关掉选项卡再进行的切换。实在是坑啊，看来我们方向找错了。<br>其次，我们来探究一下onunload为何未起作用。在onunload位置打上断点。并将右侧的pause on exceptions打开。如上图所示。这里有一个小知识点。</p>\n<p>通过调试，在第五次调试时推出该页面，并提示错误信息“Blocked alert(‘Unloaded！’) during unload.”前四次中，前两步为渲染过程，后两步为网页卸载过程，但是仍不知为何会抛出这个错误，还请大神指点迷津。</p>\n<hr>\n<h4 id=\"第二次尝试\"><a href=\"#第二次尝试\" class=\"headerlink\" title=\"第二次尝试\"></a>第二次尝试</h4><p>搜索一番，更正思路，以下是实现代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;被发现啦(*´∇｀*)&lt;/title&gt;</span><br><span class=\"line\">    &lt;link href=&quot;../img/1.ico&quot;  rel=&quot;icon&quot; type=&quot;image/vnd.microsoft.icon&quot;/&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //浏览器选项卡变换</span><br><span class=\"line\">    //判断hidden属性是否存在于document属性中。</span><br><span class=\"line\">    var hiddenProperty = &apos;hidden&apos; in document ? &apos;hidden&apos; :</span><br><span class=\"line\">        &apos;webkitHidden&apos; in document ? &apos;webkitHidden&apos; :</span><br><span class=\"line\">            &apos;mozHidden&apos; in document ? &apos;mozHidden&apos; :</span><br><span class=\"line\">                null;</span><br><span class=\"line\">    //用于在字符串中用字符串替代指定字符。第一个参数为原字符串中被替换字符串的正则表达式，第二个参数为用于替换的文本或字符串。</span><br><span class=\"line\">    var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, &apos;visibilitychange&apos;);</span><br><span class=\"line\">    //构造匿名函数，为更换标签页状态事件所要执行的函数。</span><br><span class=\"line\">    var onVisibilityChange = function()&#123;</span><br><span class=\"line\">        //获取link元素</span><br><span class=\"line\">        var links = document.head.getElementsByTagName(&quot;link&quot;);</span><br><span class=\"line\">        if (!document[hiddenProperty]) &#123;</span><br><span class=\"line\">            document.title=&apos;被发现啦(*´∇｀*)&apos;;</span><br><span class=\"line\">            links[0].href = &quot;../img/1.ico&quot;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            document.title=&apos;藏好啦(つд⊂)&apos;;</span><br><span class=\"line\">            links[0].href=&quot;../img/2.ico&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //用于向指定元素添加事件句柄，第一个参数为事件名，第二个参数为指定要事件触发时执行的函数。</span><br><span class=\"line\">    document.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>有几点需要注意。<br>变量hiddenProperty获取的是当前浏览器的hidden属性，使用了三个三元运算符来保证其兼容性。通过replace替换成为visibilitychange+属性名中除hidden外字符串。在这里要着重注意一下visibilitychange这个事件，在我们的这个效果中起到了关键的作用。<br>通过dom获取link标签。更改title和href。<br>为元素添加事件句柄使用addEventListener()函数。<br>最后我们可以发现，实现这个效果，真的是，相当，相当简单。</p>\n<hr>\n<h4 id=\"小知识点1：关于chrome的调试\"><a href=\"#小知识点1：关于chrome的调试\" class=\"headerlink\" title=\"小知识点1：关于chrome的调试\"></a>小知识点1：关于chrome的调试</h4><p>在界面下方能看到按钮，它是设置程序运行时遇到异常时是否中断的开关。点击该按钮会在3种状态间切换：<br><img src=\"http://opqksc9nz.bkt.clouddn.com/all_catch.png\" alt=\"all_catch\"> 遇到所有异常都会中断，包括已捕获的情况。（两条白色竖杠包含在蓝色八边形中<br><img src=\"http://opqksc9nz.bkt.clouddn.com/some_catch.png\" alt=\"some_catch\"> 仅在出现未捕获的异常时才中断。（两条白色竖杠包含在紫色八边形中 ）<br><img src=\"http://opqksc9nz.bkt.clouddn.com/no_catch.png\" alt=\"no_catch\"> 默认遇到异常不中断。（两条白色竖杠包含在黑色八边形中）</p>\n<h4 id=\"小知识点2：visibilitychange事件\"><a href=\"#小知识点2：visibilitychange事件\" class=\"headerlink\" title=\"小知识点2：visibilitychange事件\"></a>小知识点2：visibilitychange事件</h4><p>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.<br>示例程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&quot;visibilitychange&quot;, function() &#123;</span><br><span class=\"line\">  console.log( document.visibilityState );&#125;);</span><br></pre></td></tr></table></figure>\n<p>该事件具有四个属性：</p>\n<ul>\n<li>target属性：事件的目标。</li>\n<li>type属性：被触发的事件的类型。</li>\n<li>bubbles：表明事件是否冒泡。</li>\n<li>cancelable：表明是否可以取消事件的默认行为。</li>\n</ul>\n<h4 id=\"另外附上一对选项卡图标\"><a href=\"#另外附上一对选项卡图标\" class=\"headerlink\" title=\"另外附上一对选项卡图标\"></a>另外附上一对选项卡图标</h4><p><img src=\"http://opqksc9nz.bkt.clouddn.com/1.ico\" alt=\"1\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/2.ico\" alt=\"2\"></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>很久之前在一个人的博客上，看到了一个很有意思的效果——当我在他的页面浏览时，选项卡图标和title是一个模样，当我离开他的页面以后，他的博客所在选项卡图标又变成了另一幅模样。当时感觉非常有趣，但没有花时间去考虑如何实现。</p>","more":"<p>最近读《JavaScript高级程序设计》第十三章事件时，看到了unload事件。在书中对其的介绍如下：<br>     与load事件对应的是unload事件，这个事件在文档完全被卸载后触发。只要用户从一个页面转换到另一个页面，就会发生onunload事件。</p>\n<p>首先映入脑海的是使用onunload来实现切换选项卡时，选项卡的图标和title进行变换的效果。首先要学习一下onunload事件。</p>\n<hr>\n<h4 id=\"第一次尝试：\"><a href=\"#第一次尝试：\" class=\"headerlink\" title=\"第一次尝试：\"></a>第一次尝试：</h4><p>测试onunload方法：<br>test2.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;     </span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;onunload事件&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body onunload=&quot;alert(&apos;Unloaded！&apos;)&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在chrome浏览器中，关闭test2.html文档或者切换该选项卡，onunload未起作用。</p>\n<p><img src=\"http://opqksc9nz.bkt.clouddn.com/chromef123.png\" alt=\"啊图片\"></p>\n<p>首先，高程上的意思有点磨棱两可。在网上一通谷歌后才明白，“文档完全被卸载”，“用户从一个页面转换到另一个页面”实际是关掉选项卡再进行的切换。实在是坑啊，看来我们方向找错了。<br>其次，我们来探究一下onunload为何未起作用。在onunload位置打上断点。并将右侧的pause on exceptions打开。如上图所示。这里有一个小知识点。</p>\n<p>通过调试，在第五次调试时推出该页面，并提示错误信息“Blocked alert(‘Unloaded！’) during unload.”前四次中，前两步为渲染过程，后两步为网页卸载过程，但是仍不知为何会抛出这个错误，还请大神指点迷津。</p>\n<hr>\n<h4 id=\"第二次尝试\"><a href=\"#第二次尝试\" class=\"headerlink\" title=\"第二次尝试\"></a>第二次尝试</h4><p>搜索一番，更正思路，以下是实现代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;被发现啦(*´∇｀*)&lt;/title&gt;</span><br><span class=\"line\">    &lt;link href=&quot;../img/1.ico&quot;  rel=&quot;icon&quot; type=&quot;image/vnd.microsoft.icon&quot;/&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //浏览器选项卡变换</span><br><span class=\"line\">    //判断hidden属性是否存在于document属性中。</span><br><span class=\"line\">    var hiddenProperty = &apos;hidden&apos; in document ? &apos;hidden&apos; :</span><br><span class=\"line\">        &apos;webkitHidden&apos; in document ? &apos;webkitHidden&apos; :</span><br><span class=\"line\">            &apos;mozHidden&apos; in document ? &apos;mozHidden&apos; :</span><br><span class=\"line\">                null;</span><br><span class=\"line\">    //用于在字符串中用字符串替代指定字符。第一个参数为原字符串中被替换字符串的正则表达式，第二个参数为用于替换的文本或字符串。</span><br><span class=\"line\">    var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, &apos;visibilitychange&apos;);</span><br><span class=\"line\">    //构造匿名函数，为更换标签页状态事件所要执行的函数。</span><br><span class=\"line\">    var onVisibilityChange = function()&#123;</span><br><span class=\"line\">        //获取link元素</span><br><span class=\"line\">        var links = document.head.getElementsByTagName(&quot;link&quot;);</span><br><span class=\"line\">        if (!document[hiddenProperty]) &#123;</span><br><span class=\"line\">            document.title=&apos;被发现啦(*´∇｀*)&apos;;</span><br><span class=\"line\">            links[0].href = &quot;../img/1.ico&quot;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            document.title=&apos;藏好啦(つд⊂)&apos;;</span><br><span class=\"line\">            links[0].href=&quot;../img/2.ico&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //用于向指定元素添加事件句柄，第一个参数为事件名，第二个参数为指定要事件触发时执行的函数。</span><br><span class=\"line\">    document.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>有几点需要注意。<br>变量hiddenProperty获取的是当前浏览器的hidden属性，使用了三个三元运算符来保证其兼容性。通过replace替换成为visibilitychange+属性名中除hidden外字符串。在这里要着重注意一下visibilitychange这个事件，在我们的这个效果中起到了关键的作用。<br>通过dom获取link标签。更改title和href。<br>为元素添加事件句柄使用addEventListener()函数。<br>最后我们可以发现，实现这个效果，真的是，相当，相当简单。</p>\n<hr>\n<h4 id=\"小知识点1：关于chrome的调试\"><a href=\"#小知识点1：关于chrome的调试\" class=\"headerlink\" title=\"小知识点1：关于chrome的调试\"></a>小知识点1：关于chrome的调试</h4><p>在界面下方能看到按钮，它是设置程序运行时遇到异常时是否中断的开关。点击该按钮会在3种状态间切换：<br><img src=\"http://opqksc9nz.bkt.clouddn.com/all_catch.png\" alt=\"all_catch\"> 遇到所有异常都会中断，包括已捕获的情况。（两条白色竖杠包含在蓝色八边形中<br><img src=\"http://opqksc9nz.bkt.clouddn.com/some_catch.png\" alt=\"some_catch\"> 仅在出现未捕获的异常时才中断。（两条白色竖杠包含在紫色八边形中 ）<br><img src=\"http://opqksc9nz.bkt.clouddn.com/no_catch.png\" alt=\"no_catch\"> 默认遇到异常不中断。（两条白色竖杠包含在黑色八边形中）</p>\n<h4 id=\"小知识点2：visibilitychange事件\"><a href=\"#小知识点2：visibilitychange事件\" class=\"headerlink\" title=\"小知识点2：visibilitychange事件\"></a>小知识点2：visibilitychange事件</h4><p>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.<br>示例程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&quot;visibilitychange&quot;, function() &#123;</span><br><span class=\"line\">  console.log( document.visibilityState );&#125;);</span><br></pre></td></tr></table></figure>\n<p>该事件具有四个属性：</p>\n<ul>\n<li>target属性：事件的目标。</li>\n<li>type属性：被触发的事件的类型。</li>\n<li>bubbles：表明事件是否冒泡。</li>\n<li>cancelable：表明是否可以取消事件的默认行为。</li>\n</ul>\n<h4 id=\"另外附上一对选项卡图标\"><a href=\"#另外附上一对选项卡图标\" class=\"headerlink\" title=\"另外附上一对选项卡图标\"></a>另外附上一对选项卡图标</h4><p><img src=\"http://opqksc9nz.bkt.clouddn.com/1.ico\" alt=\"1\"><br><img src=\"http://opqksc9nz.bkt.clouddn.com/2.ico\" alt=\"2\"></p>"},{"title":"「写给大家看的设计书」","date":"2017-08-07T08:05:50.000Z","description":"本文是读书笔记兼读后感。","_content":"\n不懂设计的前端不是一个好前端 =。=！\n\n<!-- more -->\n\n## 笔记部分\n\n### PART1：「设计原则」\n\n#### 第一章：「引言」\n\n通过**约书亚树**作为引言。\n\n作者试图用关于这棵树的小故事说明一个道理：如果能说出一个物品的名称，那么在日常生活中你就会经常注意到它。**掌握它，拥有它，让它受你所控**。\n\n类比于学习，差不多的道理。可能效果没那么明显，因为对于一些名词，你没有理解它原理性内容，见到次数再多也不会拥有它。但知道它的名称，总归是揭下它神秘面纱的第一步。\n\n* 4大基本原则\n    1. 对比\n    2. 重复\n    3. 对齐\n    4. 亲密性\n\n#### 第二章：「亲密性」\n\n* 物理位置的接近就意味着存在关联。\n* 把相关的元素分在一组，使他们建立更近的亲密性。\n* 亲密性的根本目的是实现组织性。\n\n#### 第三章：「对齐」\n\n* 任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。\n* 采用同一种对齐方式的元素会产生一种「边界强度」，其为布局提供力度。\n* 勇敢一些，不要畏缩！\n* 一个页面只使用一种对齐方式。\n* 可以有意为之打破边界，如将插图斜着插入边界，只要效果比原来更好。不必过于拘束。勇敢一些，不要畏缩！\n* 在打破规则前必须清楚规则是什么。\n* 对齐也会使元素之间产生视觉联系。\n* 对齐的根本目的是使页面统一而且由条理。\n\n#### 第四章：「重复」\n\n* 设计的某些方面需要在整个作品中重复。\n* 在一系列作品中尤其需要注意重复。\n* 重复的目的就是统一， 并增强视觉效果。\n\n#### 第五章：「对比」\n\n* 页面的元素之间要有对比效果，达到吸引读者的对比效果。\n* 对比的根本目的有两个。一个目的是增强页面的效果，如果一个页面看起来很有意思，往往更有可读性。另一个目的是有助于信息的组织。\n\n#### 第六章：「4大基本原则复习」\n\n* **不要畏畏缩缩！**\n\n#### 第七章：「颜色运用」\n\n* 色轮\n    * 三原色(tricolor):红黄蓝，色轮的基础。这三种颜色无法创建。\n    * ![三原色](http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E5%8E%9F%E8%89%B2.jpg)\n    * 三间色(secondary color):将三原色色轮上相邻颜色**等量**混合，形成三间色。分别为橙、绿、紫色。\n    * ![三间色](http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E9%97%B4%E8%89%B2.jpg)\n    * 第三色(tertiary colour):再将空白两边的颜色按**等量**混合，形成第三色。\n    * ![第三色](http://opqksc9nz.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%89%B2.jpg)\n    * 「互补色」:色轮上相对(完全对立)的颜色。通常一种作为主色，另一种用来强调。\n    * 「三色组」:色轮上彼此等距的三种颜色形成的让人愉悦的三色组。\n        * 「基色三色组」:红黄蓝。\n        * 「间色三色组」：绿橙紫\n        * 还有两组，作者没有细分，不作累述。\n    * 「分裂互补三色组」:从色轮的一遍选择一种颜色，再从色轮上找到其对面的互补色两侧的颜色。具有更细致的颜色边界。\n    * 「类似色」:由色轮上彼此相邻的颜色构成。\n* 暗色和亮色\n    * 基本色轮只涉及纯「色调」，即纯色。还可向其添加黑色或者白色，对色轮进行扩展。\n    * 纯色就是色调。\n    * 向色调增加黑色就构成一个暗色。\n    * 向色调增加一个白色构成一个亮色。\n    * 「单色组合」:由一种色调及其相应的多种亮色和暗色组成。\n    * 「暗色组合」:由暗色和亮色进行组合，不使用色调。\n* 注意色质\n    * 「色质」:某种颜色的特定明暗度、深浅度或色调。\n    * 颜色组合导致视觉抖动:色质过于接近。\n    * **避免让类似色质的色调挨在一起！**\n* 暖色与冷色\n    * 「暖色」:其中包含红色或黄色。通过对颜色加此种颜色可以对颜色\"加热\"。\n    * 「冷色」:其中包含蓝色。通过对颜色加此种颜色可以对颜色\"降温\"\n    * 冷色趋于做背景色，为后退型。\n    * 暖色为趋进型。\n    * 在冷色和暖色的搭配中，少用暖色。\n* 两种颜色模型\n    * 「CMYK」:Cyan(一种蓝色)、Magenta(一种红、粉红色)、Yellow(黄色)、Key(黑色)。\n        * 「四色处理」:这四种颜色可以打印出成千上万种颜色。\n    * 「RGB」:Red(红色)、Green(绿色)、Blue(蓝色)\n        * 红色混合绿色可以产生黄色。\n        * red、yellow、blue为颜料三原色。rgb为光学三原色。\n    * **需要印刷的项目应当使用CMYK**\n    * **需要在屏幕上看到的内容则应使用RGB**\n\n#### 第八章：「创建包装或品牌」\n\n* 创建包装或品牌\n    * 必须有某个标识性图像或某种标识性风格。\n* 企业名片\n* 信笺和信封\n* 传单\n* 新闻简报\n* 宣传册\n* 明信片\n* 报纸广告\n* 简历\n\n### PART2：「字体设计」\n\n#### 第九章：「字体的基本规则」\n\n* 关于英语:标点后面加一个空格。作者是以英文做的示例， 不知道对中文是否适用。 好像不是很适用。 看上去总觉得怪怪的。\n* 引号\n    * 印刷引号:“66和99”\n    * 打字机引号:\"竖杠引号\"\n    * 问号和感叹号如果属于引用的一部分就出现在引号内。\n    * 问号和感叹号如果不属于引用的一部分就出现在引号外。\n* 撇号\n    * 使用印刷撇号！！！’’’\n    * 省略字母：除了所属性词语之外，撇号意味着省略一个字母如：isn’t Rock’n’Roll，注意是99不是69！\n    * 撇号是9！\n* 连接号\n    * 连字符\n        * odd-looking-critters\n        * 在转行时放在单词的前半部之后，用于断词。\n    * 一字线\n        * 「如何输入」:中文的破折号由两个一字线组成，所以其为破折号的一半，在中文打字法，输入中文的模式下，按下shift+0旁边的键(即连字符)，再删除一次横线，剩下的即为一字线。\n        * 一字线意味着一个持续事件，也可用to代替，前后无空格。例如：7:30—9:30pm\n        * 「宽度」:类似大写字母N的宽度\n    * 破折号\n        * 表示思想的突然变化。\n        * 「宽度」:即中文的破折号，一字线的两倍。\n        * 表意强度:句号>破折号>逗号\n        * 两侧无空格。\n* 特殊符号\n    * PC上的特殊符号\n        * ANSI编码:alt+数字键\n        * 重音符号:alt+数字键\n    * MAC上的特殊符号\n        * shift/option+字符\n* 大写字母\n    * 全部大写比全部小写难以阅读，因为大写字母没有轮廓形状变化。\n* 下划线\n    * 永远不要使用。\n    * 代替：**粗体字**、大号字、不同的字体、颜色。\n* 字距调整\n    * 「字距调整」:挪动字符间距.\n    * 通常值针对与英语，因为字符键可能存在较大缝隙。\n* 寡妇和孤儿\n    * 「寡妇」:一段文字的最后一行字符数少于7个。\n    * 「孤儿」:一段的最后一行由于太长而和其他文字分开，在下一栏或下一页的最上面结束。\n* 其他\n    * 跟随在有样式的文字后的标点与文字样式一样。\n    * 括号中的标点\n        * 如果括号中的文字是整个句子的一部分，标点在闭括号外。\n        * 括号内的文字是一个完整的句子，标点在括号内。\n    * 段落缩进或段落进空行：二者只可选其一。因为都代表“下文为新的一段”的意思。\n    * 首段:不一定需要缩进。\n    * 方框内的文字:尽量在放扩四周留够空间，不要太挤。\n    * 在列表中使用项目符号或装饰符号，而不是连字符。\n\n#### 第十章：「字体（与人生）」\n\n* 协调与冲突\n    * 「协调」:只使用一个字体系列，样式、大小、字体粗细无变化。\n    * 「冲突」:结合使用多个字体系列，很类似但并不相同。\n    * 「对比」:结合的多种字体和元素彼此之间并不相同。\n    * 协调是一个稳妥有用的概念，但冲突务必要避免。\n    * 字体对比存在6种明确的不同方式:大小、粗细、结构、形状、方向和颜色。\n\n#### 第十一章：「字体类别」\n\n* 「OldStyle」 旧式体\n    * 都有衬线，且小写字母衬线存在角度。\n    * 「粗细过渡」:曲线笔画存在一种从粗到细的变化。\n    * 「适合阅读」\n    * 「对角强调线」:曲线最细部分的一条线。 \n* 「Modern」 现代体\n    *  都有衬线，衬线水平。\n    * 「剧烈粗细过渡」:曲线笔画存在一种剧烈的从粗到细的变化。\n    * 强调线完全垂直。\n    * 「不适合大量显示正文」\n* 「Slab serif」 粗衬线体\n    * 都有衬线。\n    * 「几乎不存在粗细过渡」\n    * 适合阅读。尤其是小孩。\n* 「Sans serif」 无衬线体\n    * 「Sans」:法语“没有”。\n    * 没有衬线。\n    * 「几乎不存在粗细过渡」\n    * 页面中使用或许有奇效。\n* 「Script」 手写体\n    * 很漂亮。\n    * 花里胡哨。\n    * 但是要少用。\n* 「Decorative」 花体\n    * 各种奇效。\n\n#### 第十二章：「字体对比」\n\n* 对比6要素：\n    1. 大小\n    2. 粗细\n    3. 结构\n    4. 形状\n    5. 方向\n    6. 颜色\n* 「必须选取两个不同字体类别中的字体」不要把同一个类别中的两个自体放在同一个页面上。\n\n## 最后说说\n\n花了近四个小时的时间整理，要把内容回顾了一遍。\n\n多少还是有点收获吧，虽然方法笨。\n\n贵有恒，何必担心收获不够多。","source":"_posts/设计/「写给大家看的设计书」.md","raw":"---\ntitle: 「写给大家看的设计书」 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2017-08-07 16:05:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 读书笔记 #分类\ntags: [读书笔记, 设计] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 本文是读书笔记兼读后感。\n---\n\n不懂设计的前端不是一个好前端 =。=！\n\n<!-- more -->\n\n## 笔记部分\n\n### PART1：「设计原则」\n\n#### 第一章：「引言」\n\n通过**约书亚树**作为引言。\n\n作者试图用关于这棵树的小故事说明一个道理：如果能说出一个物品的名称，那么在日常生活中你就会经常注意到它。**掌握它，拥有它，让它受你所控**。\n\n类比于学习，差不多的道理。可能效果没那么明显，因为对于一些名词，你没有理解它原理性内容，见到次数再多也不会拥有它。但知道它的名称，总归是揭下它神秘面纱的第一步。\n\n* 4大基本原则\n    1. 对比\n    2. 重复\n    3. 对齐\n    4. 亲密性\n\n#### 第二章：「亲密性」\n\n* 物理位置的接近就意味着存在关联。\n* 把相关的元素分在一组，使他们建立更近的亲密性。\n* 亲密性的根本目的是实现组织性。\n\n#### 第三章：「对齐」\n\n* 任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。\n* 采用同一种对齐方式的元素会产生一种「边界强度」，其为布局提供力度。\n* 勇敢一些，不要畏缩！\n* 一个页面只使用一种对齐方式。\n* 可以有意为之打破边界，如将插图斜着插入边界，只要效果比原来更好。不必过于拘束。勇敢一些，不要畏缩！\n* 在打破规则前必须清楚规则是什么。\n* 对齐也会使元素之间产生视觉联系。\n* 对齐的根本目的是使页面统一而且由条理。\n\n#### 第四章：「重复」\n\n* 设计的某些方面需要在整个作品中重复。\n* 在一系列作品中尤其需要注意重复。\n* 重复的目的就是统一， 并增强视觉效果。\n\n#### 第五章：「对比」\n\n* 页面的元素之间要有对比效果，达到吸引读者的对比效果。\n* 对比的根本目的有两个。一个目的是增强页面的效果，如果一个页面看起来很有意思，往往更有可读性。另一个目的是有助于信息的组织。\n\n#### 第六章：「4大基本原则复习」\n\n* **不要畏畏缩缩！**\n\n#### 第七章：「颜色运用」\n\n* 色轮\n    * 三原色(tricolor):红黄蓝，色轮的基础。这三种颜色无法创建。\n    * ![三原色](http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E5%8E%9F%E8%89%B2.jpg)\n    * 三间色(secondary color):将三原色色轮上相邻颜色**等量**混合，形成三间色。分别为橙、绿、紫色。\n    * ![三间色](http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E9%97%B4%E8%89%B2.jpg)\n    * 第三色(tertiary colour):再将空白两边的颜色按**等量**混合，形成第三色。\n    * ![第三色](http://opqksc9nz.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%89%B2.jpg)\n    * 「互补色」:色轮上相对(完全对立)的颜色。通常一种作为主色，另一种用来强调。\n    * 「三色组」:色轮上彼此等距的三种颜色形成的让人愉悦的三色组。\n        * 「基色三色组」:红黄蓝。\n        * 「间色三色组」：绿橙紫\n        * 还有两组，作者没有细分，不作累述。\n    * 「分裂互补三色组」:从色轮的一遍选择一种颜色，再从色轮上找到其对面的互补色两侧的颜色。具有更细致的颜色边界。\n    * 「类似色」:由色轮上彼此相邻的颜色构成。\n* 暗色和亮色\n    * 基本色轮只涉及纯「色调」，即纯色。还可向其添加黑色或者白色，对色轮进行扩展。\n    * 纯色就是色调。\n    * 向色调增加黑色就构成一个暗色。\n    * 向色调增加一个白色构成一个亮色。\n    * 「单色组合」:由一种色调及其相应的多种亮色和暗色组成。\n    * 「暗色组合」:由暗色和亮色进行组合，不使用色调。\n* 注意色质\n    * 「色质」:某种颜色的特定明暗度、深浅度或色调。\n    * 颜色组合导致视觉抖动:色质过于接近。\n    * **避免让类似色质的色调挨在一起！**\n* 暖色与冷色\n    * 「暖色」:其中包含红色或黄色。通过对颜色加此种颜色可以对颜色\"加热\"。\n    * 「冷色」:其中包含蓝色。通过对颜色加此种颜色可以对颜色\"降温\"\n    * 冷色趋于做背景色，为后退型。\n    * 暖色为趋进型。\n    * 在冷色和暖色的搭配中，少用暖色。\n* 两种颜色模型\n    * 「CMYK」:Cyan(一种蓝色)、Magenta(一种红、粉红色)、Yellow(黄色)、Key(黑色)。\n        * 「四色处理」:这四种颜色可以打印出成千上万种颜色。\n    * 「RGB」:Red(红色)、Green(绿色)、Blue(蓝色)\n        * 红色混合绿色可以产生黄色。\n        * red、yellow、blue为颜料三原色。rgb为光学三原色。\n    * **需要印刷的项目应当使用CMYK**\n    * **需要在屏幕上看到的内容则应使用RGB**\n\n#### 第八章：「创建包装或品牌」\n\n* 创建包装或品牌\n    * 必须有某个标识性图像或某种标识性风格。\n* 企业名片\n* 信笺和信封\n* 传单\n* 新闻简报\n* 宣传册\n* 明信片\n* 报纸广告\n* 简历\n\n### PART2：「字体设计」\n\n#### 第九章：「字体的基本规则」\n\n* 关于英语:标点后面加一个空格。作者是以英文做的示例， 不知道对中文是否适用。 好像不是很适用。 看上去总觉得怪怪的。\n* 引号\n    * 印刷引号:“66和99”\n    * 打字机引号:\"竖杠引号\"\n    * 问号和感叹号如果属于引用的一部分就出现在引号内。\n    * 问号和感叹号如果不属于引用的一部分就出现在引号外。\n* 撇号\n    * 使用印刷撇号！！！’’’\n    * 省略字母：除了所属性词语之外，撇号意味着省略一个字母如：isn’t Rock’n’Roll，注意是99不是69！\n    * 撇号是9！\n* 连接号\n    * 连字符\n        * odd-looking-critters\n        * 在转行时放在单词的前半部之后，用于断词。\n    * 一字线\n        * 「如何输入」:中文的破折号由两个一字线组成，所以其为破折号的一半，在中文打字法，输入中文的模式下，按下shift+0旁边的键(即连字符)，再删除一次横线，剩下的即为一字线。\n        * 一字线意味着一个持续事件，也可用to代替，前后无空格。例如：7:30—9:30pm\n        * 「宽度」:类似大写字母N的宽度\n    * 破折号\n        * 表示思想的突然变化。\n        * 「宽度」:即中文的破折号，一字线的两倍。\n        * 表意强度:句号>破折号>逗号\n        * 两侧无空格。\n* 特殊符号\n    * PC上的特殊符号\n        * ANSI编码:alt+数字键\n        * 重音符号:alt+数字键\n    * MAC上的特殊符号\n        * shift/option+字符\n* 大写字母\n    * 全部大写比全部小写难以阅读，因为大写字母没有轮廓形状变化。\n* 下划线\n    * 永远不要使用。\n    * 代替：**粗体字**、大号字、不同的字体、颜色。\n* 字距调整\n    * 「字距调整」:挪动字符间距.\n    * 通常值针对与英语，因为字符键可能存在较大缝隙。\n* 寡妇和孤儿\n    * 「寡妇」:一段文字的最后一行字符数少于7个。\n    * 「孤儿」:一段的最后一行由于太长而和其他文字分开，在下一栏或下一页的最上面结束。\n* 其他\n    * 跟随在有样式的文字后的标点与文字样式一样。\n    * 括号中的标点\n        * 如果括号中的文字是整个句子的一部分，标点在闭括号外。\n        * 括号内的文字是一个完整的句子，标点在括号内。\n    * 段落缩进或段落进空行：二者只可选其一。因为都代表“下文为新的一段”的意思。\n    * 首段:不一定需要缩进。\n    * 方框内的文字:尽量在放扩四周留够空间，不要太挤。\n    * 在列表中使用项目符号或装饰符号，而不是连字符。\n\n#### 第十章：「字体（与人生）」\n\n* 协调与冲突\n    * 「协调」:只使用一个字体系列，样式、大小、字体粗细无变化。\n    * 「冲突」:结合使用多个字体系列，很类似但并不相同。\n    * 「对比」:结合的多种字体和元素彼此之间并不相同。\n    * 协调是一个稳妥有用的概念，但冲突务必要避免。\n    * 字体对比存在6种明确的不同方式:大小、粗细、结构、形状、方向和颜色。\n\n#### 第十一章：「字体类别」\n\n* 「OldStyle」 旧式体\n    * 都有衬线，且小写字母衬线存在角度。\n    * 「粗细过渡」:曲线笔画存在一种从粗到细的变化。\n    * 「适合阅读」\n    * 「对角强调线」:曲线最细部分的一条线。 \n* 「Modern」 现代体\n    *  都有衬线，衬线水平。\n    * 「剧烈粗细过渡」:曲线笔画存在一种剧烈的从粗到细的变化。\n    * 强调线完全垂直。\n    * 「不适合大量显示正文」\n* 「Slab serif」 粗衬线体\n    * 都有衬线。\n    * 「几乎不存在粗细过渡」\n    * 适合阅读。尤其是小孩。\n* 「Sans serif」 无衬线体\n    * 「Sans」:法语“没有”。\n    * 没有衬线。\n    * 「几乎不存在粗细过渡」\n    * 页面中使用或许有奇效。\n* 「Script」 手写体\n    * 很漂亮。\n    * 花里胡哨。\n    * 但是要少用。\n* 「Decorative」 花体\n    * 各种奇效。\n\n#### 第十二章：「字体对比」\n\n* 对比6要素：\n    1. 大小\n    2. 粗细\n    3. 结构\n    4. 形状\n    5. 方向\n    6. 颜色\n* 「必须选取两个不同字体类别中的字体」不要把同一个类别中的两个自体放在同一个页面上。\n\n## 最后说说\n\n花了近四个小时的时间整理，要把内容回顾了一遍。\n\n多少还是有点收获吧，虽然方法笨。\n\n贵有恒，何必担心收获不够多。","slug":"设计/「写给大家看的设计书」","published":1,"updated":"2020-08-17T09:19:20.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0kl001uykrv1yqg8yxz","content":"<p>不懂设计的前端不是一个好前端 =。=！</p>\n<a id=\"more\"></a>\n<h2 id=\"笔记部分\"><a href=\"#笔记部分\" class=\"headerlink\" title=\"笔记部分\"></a>笔记部分</h2><h3 id=\"PART1：「设计原则」\"><a href=\"#PART1：「设计原则」\" class=\"headerlink\" title=\"PART1：「设计原则」\"></a>PART1：「设计原则」</h3><h4 id=\"第一章：「引言」\"><a href=\"#第一章：「引言」\" class=\"headerlink\" title=\"第一章：「引言」\"></a>第一章：「引言」</h4><p>通过<strong>约书亚树</strong>作为引言。</p>\n<p>作者试图用关于这棵树的小故事说明一个道理：如果能说出一个物品的名称，那么在日常生活中你就会经常注意到它。<strong>掌握它，拥有它，让它受你所控</strong>。</p>\n<p>类比于学习，差不多的道理。可能效果没那么明显，因为对于一些名词，你没有理解它原理性内容，见到次数再多也不会拥有它。但知道它的名称，总归是揭下它神秘面纱的第一步。</p>\n<ul>\n<li>4大基本原则<ol>\n<li>对比</li>\n<li>重复</li>\n<li>对齐</li>\n<li>亲密性</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"第二章：「亲密性」\"><a href=\"#第二章：「亲密性」\" class=\"headerlink\" title=\"第二章：「亲密性」\"></a>第二章：「亲密性」</h4><ul>\n<li>物理位置的接近就意味着存在关联。</li>\n<li>把相关的元素分在一组，使他们建立更近的亲密性。</li>\n<li>亲密性的根本目的是实现组织性。</li>\n</ul>\n<h4 id=\"第三章：「对齐」\"><a href=\"#第三章：「对齐」\" class=\"headerlink\" title=\"第三章：「对齐」\"></a>第三章：「对齐」</h4><ul>\n<li>任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</li>\n<li>采用同一种对齐方式的元素会产生一种「边界强度」，其为布局提供力度。</li>\n<li>勇敢一些，不要畏缩！</li>\n<li>一个页面只使用一种对齐方式。</li>\n<li>可以有意为之打破边界，如将插图斜着插入边界，只要效果比原来更好。不必过于拘束。勇敢一些，不要畏缩！</li>\n<li>在打破规则前必须清楚规则是什么。</li>\n<li>对齐也会使元素之间产生视觉联系。</li>\n<li>对齐的根本目的是使页面统一而且由条理。</li>\n</ul>\n<h4 id=\"第四章：「重复」\"><a href=\"#第四章：「重复」\" class=\"headerlink\" title=\"第四章：「重复」\"></a>第四章：「重复」</h4><ul>\n<li>设计的某些方面需要在整个作品中重复。</li>\n<li>在一系列作品中尤其需要注意重复。</li>\n<li>重复的目的就是统一， 并增强视觉效果。</li>\n</ul>\n<h4 id=\"第五章：「对比」\"><a href=\"#第五章：「对比」\" class=\"headerlink\" title=\"第五章：「对比」\"></a>第五章：「对比」</h4><ul>\n<li>页面的元素之间要有对比效果，达到吸引读者的对比效果。</li>\n<li>对比的根本目的有两个。一个目的是增强页面的效果，如果一个页面看起来很有意思，往往更有可读性。另一个目的是有助于信息的组织。</li>\n</ul>\n<h4 id=\"第六章：「4大基本原则复习」\"><a href=\"#第六章：「4大基本原则复习」\" class=\"headerlink\" title=\"第六章：「4大基本原则复习」\"></a>第六章：「4大基本原则复习」</h4><ul>\n<li><strong>不要畏畏缩缩！</strong></li>\n</ul>\n<h4 id=\"第七章：「颜色运用」\"><a href=\"#第七章：「颜色运用」\" class=\"headerlink\" title=\"第七章：「颜色运用」\"></a>第七章：「颜色运用」</h4><ul>\n<li>色轮<ul>\n<li>三原色(tricolor):红黄蓝，色轮的基础。这三种颜色无法创建。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E5%8E%9F%E8%89%B2.jpg\" alt=\"三原色\"></li>\n<li>三间色(secondary color):将三原色色轮上相邻颜色<strong>等量</strong>混合，形成三间色。分别为橙、绿、紫色。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E9%97%B4%E8%89%B2.jpg\" alt=\"三间色\"></li>\n<li>第三色(tertiary colour):再将空白两边的颜色按<strong>等量</strong>混合，形成第三色。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%89%B2.jpg\" alt=\"第三色\"></li>\n<li>「互补色」:色轮上相对(完全对立)的颜色。通常一种作为主色，另一种用来强调。</li>\n<li>「三色组」:色轮上彼此等距的三种颜色形成的让人愉悦的三色组。<ul>\n<li>「基色三色组」:红黄蓝。</li>\n<li>「间色三色组」：绿橙紫</li>\n<li>还有两组，作者没有细分，不作累述。</li>\n</ul>\n</li>\n<li>「分裂互补三色组」:从色轮的一遍选择一种颜色，再从色轮上找到其对面的互补色两侧的颜色。具有更细致的颜色边界。</li>\n<li>「类似色」:由色轮上彼此相邻的颜色构成。</li>\n</ul>\n</li>\n<li>暗色和亮色<ul>\n<li>基本色轮只涉及纯「色调」，即纯色。还可向其添加黑色或者白色，对色轮进行扩展。</li>\n<li>纯色就是色调。</li>\n<li>向色调增加黑色就构成一个暗色。</li>\n<li>向色调增加一个白色构成一个亮色。</li>\n<li>「单色组合」:由一种色调及其相应的多种亮色和暗色组成。</li>\n<li>「暗色组合」:由暗色和亮色进行组合，不使用色调。</li>\n</ul>\n</li>\n<li>注意色质<ul>\n<li>「色质」:某种颜色的特定明暗度、深浅度或色调。</li>\n<li>颜色组合导致视觉抖动:色质过于接近。</li>\n<li><strong>避免让类似色质的色调挨在一起！</strong></li>\n</ul>\n</li>\n<li>暖色与冷色<ul>\n<li>「暖色」:其中包含红色或黄色。通过对颜色加此种颜色可以对颜色”加热”。</li>\n<li>「冷色」:其中包含蓝色。通过对颜色加此种颜色可以对颜色”降温”</li>\n<li>冷色趋于做背景色，为后退型。</li>\n<li>暖色为趋进型。</li>\n<li>在冷色和暖色的搭配中，少用暖色。</li>\n</ul>\n</li>\n<li>两种颜色模型<ul>\n<li>「CMYK」:Cyan(一种蓝色)、Magenta(一种红、粉红色)、Yellow(黄色)、Key(黑色)。<ul>\n<li>「四色处理」:这四种颜色可以打印出成千上万种颜色。</li>\n</ul>\n</li>\n<li>「RGB」:Red(红色)、Green(绿色)、Blue(蓝色)<ul>\n<li>红色混合绿色可以产生黄色。</li>\n<li>red、yellow、blue为颜料三原色。rgb为光学三原色。</li>\n</ul>\n</li>\n<li><strong>需要印刷的项目应当使用CMYK</strong></li>\n<li><strong>需要在屏幕上看到的内容则应使用RGB</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第八章：「创建包装或品牌」\"><a href=\"#第八章：「创建包装或品牌」\" class=\"headerlink\" title=\"第八章：「创建包装或品牌」\"></a>第八章：「创建包装或品牌」</h4><ul>\n<li>创建包装或品牌<ul>\n<li>必须有某个标识性图像或某种标识性风格。</li>\n</ul>\n</li>\n<li>企业名片</li>\n<li>信笺和信封</li>\n<li>传单</li>\n<li>新闻简报</li>\n<li>宣传册</li>\n<li>明信片</li>\n<li>报纸广告</li>\n<li>简历</li>\n</ul>\n<h3 id=\"PART2：「字体设计」\"><a href=\"#PART2：「字体设计」\" class=\"headerlink\" title=\"PART2：「字体设计」\"></a>PART2：「字体设计」</h3><h4 id=\"第九章：「字体的基本规则」\"><a href=\"#第九章：「字体的基本规则」\" class=\"headerlink\" title=\"第九章：「字体的基本规则」\"></a>第九章：「字体的基本规则」</h4><ul>\n<li>关于英语:标点后面加一个空格。作者是以英文做的示例， 不知道对中文是否适用。 好像不是很适用。 看上去总觉得怪怪的。</li>\n<li>引号<ul>\n<li>印刷引号:“66和99”</li>\n<li>打字机引号:”竖杠引号”</li>\n<li>问号和感叹号如果属于引用的一部分就出现在引号内。</li>\n<li>问号和感叹号如果不属于引用的一部分就出现在引号外。</li>\n</ul>\n</li>\n<li>撇号<ul>\n<li>使用印刷撇号！！！’’’</li>\n<li>省略字母：除了所属性词语之外，撇号意味着省略一个字母如：isn’t Rock’n’Roll，注意是99不是69！</li>\n<li>撇号是9！</li>\n</ul>\n</li>\n<li>连接号<ul>\n<li>连字符<ul>\n<li>odd-looking-critters</li>\n<li>在转行时放在单词的前半部之后，用于断词。</li>\n</ul>\n</li>\n<li>一字线<ul>\n<li>「如何输入」:中文的破折号由两个一字线组成，所以其为破折号的一半，在中文打字法，输入中文的模式下，按下shift+0旁边的键(即连字符)，再删除一次横线，剩下的即为一字线。</li>\n<li>一字线意味着一个持续事件，也可用to代替，前后无空格。例如：7:30—9:30pm</li>\n<li>「宽度」:类似大写字母N的宽度</li>\n</ul>\n</li>\n<li>破折号<ul>\n<li>表示思想的突然变化。</li>\n<li>「宽度」:即中文的破折号，一字线的两倍。</li>\n<li>表意强度:句号&gt;破折号&gt;逗号</li>\n<li>两侧无空格。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊符号<ul>\n<li>PC上的特殊符号<ul>\n<li>ANSI编码:alt+数字键</li>\n<li>重音符号:alt+数字键</li>\n</ul>\n</li>\n<li>MAC上的特殊符号<ul>\n<li>shift/option+字符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>大写字母<ul>\n<li>全部大写比全部小写难以阅读，因为大写字母没有轮廓形状变化。</li>\n</ul>\n</li>\n<li>下划线<ul>\n<li>永远不要使用。</li>\n<li>代替：<strong>粗体字</strong>、大号字、不同的字体、颜色。</li>\n</ul>\n</li>\n<li>字距调整<ul>\n<li>「字距调整」:挪动字符间距.</li>\n<li>通常值针对与英语，因为字符键可能存在较大缝隙。</li>\n</ul>\n</li>\n<li>寡妇和孤儿<ul>\n<li>「寡妇」:一段文字的最后一行字符数少于7个。</li>\n<li>「孤儿」:一段的最后一行由于太长而和其他文字分开，在下一栏或下一页的最上面结束。</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>跟随在有样式的文字后的标点与文字样式一样。</li>\n<li>括号中的标点<ul>\n<li>如果括号中的文字是整个句子的一部分，标点在闭括号外。</li>\n<li>括号内的文字是一个完整的句子，标点在括号内。</li>\n</ul>\n</li>\n<li>段落缩进或段落进空行：二者只可选其一。因为都代表“下文为新的一段”的意思。</li>\n<li>首段:不一定需要缩进。</li>\n<li>方框内的文字:尽量在放扩四周留够空间，不要太挤。</li>\n<li>在列表中使用项目符号或装饰符号，而不是连字符。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十章：「字体（与人生）」\"><a href=\"#第十章：「字体（与人生）」\" class=\"headerlink\" title=\"第十章：「字体（与人生）」\"></a>第十章：「字体（与人生）」</h4><ul>\n<li>协调与冲突<ul>\n<li>「协调」:只使用一个字体系列，样式、大小、字体粗细无变化。</li>\n<li>「冲突」:结合使用多个字体系列，很类似但并不相同。</li>\n<li>「对比」:结合的多种字体和元素彼此之间并不相同。</li>\n<li>协调是一个稳妥有用的概念，但冲突务必要避免。</li>\n<li>字体对比存在6种明确的不同方式:大小、粗细、结构、形状、方向和颜色。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十一章：「字体类别」\"><a href=\"#第十一章：「字体类别」\" class=\"headerlink\" title=\"第十一章：「字体类别」\"></a>第十一章：「字体类别」</h4><ul>\n<li>「OldStyle」 旧式体<ul>\n<li>都有衬线，且小写字母衬线存在角度。</li>\n<li>「粗细过渡」:曲线笔画存在一种从粗到细的变化。</li>\n<li>「适合阅读」</li>\n<li>「对角强调线」:曲线最细部分的一条线。 </li>\n</ul>\n</li>\n<li>「Modern」 现代体<ul>\n<li>都有衬线，衬线水平。</li>\n<li>「剧烈粗细过渡」:曲线笔画存在一种剧烈的从粗到细的变化。</li>\n<li>强调线完全垂直。</li>\n<li>「不适合大量显示正文」</li>\n</ul>\n</li>\n<li>「Slab serif」 粗衬线体<ul>\n<li>都有衬线。</li>\n<li>「几乎不存在粗细过渡」</li>\n<li>适合阅读。尤其是小孩。</li>\n</ul>\n</li>\n<li>「Sans serif」 无衬线体<ul>\n<li>「Sans」:法语“没有”。</li>\n<li>没有衬线。</li>\n<li>「几乎不存在粗细过渡」</li>\n<li>页面中使用或许有奇效。</li>\n</ul>\n</li>\n<li>「Script」 手写体<ul>\n<li>很漂亮。</li>\n<li>花里胡哨。</li>\n<li>但是要少用。</li>\n</ul>\n</li>\n<li>「Decorative」 花体<ul>\n<li>各种奇效。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十二章：「字体对比」\"><a href=\"#第十二章：「字体对比」\" class=\"headerlink\" title=\"第十二章：「字体对比」\"></a>第十二章：「字体对比」</h4><ul>\n<li>对比6要素：<ol>\n<li>大小</li>\n<li>粗细</li>\n<li>结构</li>\n<li>形状</li>\n<li>方向</li>\n<li>颜色</li>\n</ol>\n</li>\n<li>「必须选取两个不同字体类别中的字体」不要把同一个类别中的两个自体放在同一个页面上。</li>\n</ul>\n<h2 id=\"最后说说\"><a href=\"#最后说说\" class=\"headerlink\" title=\"最后说说\"></a>最后说说</h2><p>花了近四个小时的时间整理，要把内容回顾了一遍。</p>\n<p>多少还是有点收获吧，虽然方法笨。</p>\n<p>贵有恒，何必担心收获不够多。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>不懂设计的前端不是一个好前端 =。=！</p>","more":"<h2 id=\"笔记部分\"><a href=\"#笔记部分\" class=\"headerlink\" title=\"笔记部分\"></a>笔记部分</h2><h3 id=\"PART1：「设计原则」\"><a href=\"#PART1：「设计原则」\" class=\"headerlink\" title=\"PART1：「设计原则」\"></a>PART1：「设计原则」</h3><h4 id=\"第一章：「引言」\"><a href=\"#第一章：「引言」\" class=\"headerlink\" title=\"第一章：「引言」\"></a>第一章：「引言」</h4><p>通过<strong>约书亚树</strong>作为引言。</p>\n<p>作者试图用关于这棵树的小故事说明一个道理：如果能说出一个物品的名称，那么在日常生活中你就会经常注意到它。<strong>掌握它，拥有它，让它受你所控</strong>。</p>\n<p>类比于学习，差不多的道理。可能效果没那么明显，因为对于一些名词，你没有理解它原理性内容，见到次数再多也不会拥有它。但知道它的名称，总归是揭下它神秘面纱的第一步。</p>\n<ul>\n<li>4大基本原则<ol>\n<li>对比</li>\n<li>重复</li>\n<li>对齐</li>\n<li>亲密性</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"第二章：「亲密性」\"><a href=\"#第二章：「亲密性」\" class=\"headerlink\" title=\"第二章：「亲密性」\"></a>第二章：「亲密性」</h4><ul>\n<li>物理位置的接近就意味着存在关联。</li>\n<li>把相关的元素分在一组，使他们建立更近的亲密性。</li>\n<li>亲密性的根本目的是实现组织性。</li>\n</ul>\n<h4 id=\"第三章：「对齐」\"><a href=\"#第三章：「对齐」\" class=\"headerlink\" title=\"第三章：「对齐」\"></a>第三章：「对齐」</h4><ul>\n<li>任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</li>\n<li>采用同一种对齐方式的元素会产生一种「边界强度」，其为布局提供力度。</li>\n<li>勇敢一些，不要畏缩！</li>\n<li>一个页面只使用一种对齐方式。</li>\n<li>可以有意为之打破边界，如将插图斜着插入边界，只要效果比原来更好。不必过于拘束。勇敢一些，不要畏缩！</li>\n<li>在打破规则前必须清楚规则是什么。</li>\n<li>对齐也会使元素之间产生视觉联系。</li>\n<li>对齐的根本目的是使页面统一而且由条理。</li>\n</ul>\n<h4 id=\"第四章：「重复」\"><a href=\"#第四章：「重复」\" class=\"headerlink\" title=\"第四章：「重复」\"></a>第四章：「重复」</h4><ul>\n<li>设计的某些方面需要在整个作品中重复。</li>\n<li>在一系列作品中尤其需要注意重复。</li>\n<li>重复的目的就是统一， 并增强视觉效果。</li>\n</ul>\n<h4 id=\"第五章：「对比」\"><a href=\"#第五章：「对比」\" class=\"headerlink\" title=\"第五章：「对比」\"></a>第五章：「对比」</h4><ul>\n<li>页面的元素之间要有对比效果，达到吸引读者的对比效果。</li>\n<li>对比的根本目的有两个。一个目的是增强页面的效果，如果一个页面看起来很有意思，往往更有可读性。另一个目的是有助于信息的组织。</li>\n</ul>\n<h4 id=\"第六章：「4大基本原则复习」\"><a href=\"#第六章：「4大基本原则复习」\" class=\"headerlink\" title=\"第六章：「4大基本原则复习」\"></a>第六章：「4大基本原则复习」</h4><ul>\n<li><strong>不要畏畏缩缩！</strong></li>\n</ul>\n<h4 id=\"第七章：「颜色运用」\"><a href=\"#第七章：「颜色运用」\" class=\"headerlink\" title=\"第七章：「颜色运用」\"></a>第七章：「颜色运用」</h4><ul>\n<li>色轮<ul>\n<li>三原色(tricolor):红黄蓝，色轮的基础。这三种颜色无法创建。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E5%8E%9F%E8%89%B2.jpg\" alt=\"三原色\"></li>\n<li>三间色(secondary color):将三原色色轮上相邻颜色<strong>等量</strong>混合，形成三间色。分别为橙、绿、紫色。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E4%B8%89%E9%97%B4%E8%89%B2.jpg\" alt=\"三间色\"></li>\n<li>第三色(tertiary colour):再将空白两边的颜色按<strong>等量</strong>混合，形成第三色。</li>\n<li><img src=\"http://opqksc9nz.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%89%B2.jpg\" alt=\"第三色\"></li>\n<li>「互补色」:色轮上相对(完全对立)的颜色。通常一种作为主色，另一种用来强调。</li>\n<li>「三色组」:色轮上彼此等距的三种颜色形成的让人愉悦的三色组。<ul>\n<li>「基色三色组」:红黄蓝。</li>\n<li>「间色三色组」：绿橙紫</li>\n<li>还有两组，作者没有细分，不作累述。</li>\n</ul>\n</li>\n<li>「分裂互补三色组」:从色轮的一遍选择一种颜色，再从色轮上找到其对面的互补色两侧的颜色。具有更细致的颜色边界。</li>\n<li>「类似色」:由色轮上彼此相邻的颜色构成。</li>\n</ul>\n</li>\n<li>暗色和亮色<ul>\n<li>基本色轮只涉及纯「色调」，即纯色。还可向其添加黑色或者白色，对色轮进行扩展。</li>\n<li>纯色就是色调。</li>\n<li>向色调增加黑色就构成一个暗色。</li>\n<li>向色调增加一个白色构成一个亮色。</li>\n<li>「单色组合」:由一种色调及其相应的多种亮色和暗色组成。</li>\n<li>「暗色组合」:由暗色和亮色进行组合，不使用色调。</li>\n</ul>\n</li>\n<li>注意色质<ul>\n<li>「色质」:某种颜色的特定明暗度、深浅度或色调。</li>\n<li>颜色组合导致视觉抖动:色质过于接近。</li>\n<li><strong>避免让类似色质的色调挨在一起！</strong></li>\n</ul>\n</li>\n<li>暖色与冷色<ul>\n<li>「暖色」:其中包含红色或黄色。通过对颜色加此种颜色可以对颜色”加热”。</li>\n<li>「冷色」:其中包含蓝色。通过对颜色加此种颜色可以对颜色”降温”</li>\n<li>冷色趋于做背景色，为后退型。</li>\n<li>暖色为趋进型。</li>\n<li>在冷色和暖色的搭配中，少用暖色。</li>\n</ul>\n</li>\n<li>两种颜色模型<ul>\n<li>「CMYK」:Cyan(一种蓝色)、Magenta(一种红、粉红色)、Yellow(黄色)、Key(黑色)。<ul>\n<li>「四色处理」:这四种颜色可以打印出成千上万种颜色。</li>\n</ul>\n</li>\n<li>「RGB」:Red(红色)、Green(绿色)、Blue(蓝色)<ul>\n<li>红色混合绿色可以产生黄色。</li>\n<li>red、yellow、blue为颜料三原色。rgb为光学三原色。</li>\n</ul>\n</li>\n<li><strong>需要印刷的项目应当使用CMYK</strong></li>\n<li><strong>需要在屏幕上看到的内容则应使用RGB</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第八章：「创建包装或品牌」\"><a href=\"#第八章：「创建包装或品牌」\" class=\"headerlink\" title=\"第八章：「创建包装或品牌」\"></a>第八章：「创建包装或品牌」</h4><ul>\n<li>创建包装或品牌<ul>\n<li>必须有某个标识性图像或某种标识性风格。</li>\n</ul>\n</li>\n<li>企业名片</li>\n<li>信笺和信封</li>\n<li>传单</li>\n<li>新闻简报</li>\n<li>宣传册</li>\n<li>明信片</li>\n<li>报纸广告</li>\n<li>简历</li>\n</ul>\n<h3 id=\"PART2：「字体设计」\"><a href=\"#PART2：「字体设计」\" class=\"headerlink\" title=\"PART2：「字体设计」\"></a>PART2：「字体设计」</h3><h4 id=\"第九章：「字体的基本规则」\"><a href=\"#第九章：「字体的基本规则」\" class=\"headerlink\" title=\"第九章：「字体的基本规则」\"></a>第九章：「字体的基本规则」</h4><ul>\n<li>关于英语:标点后面加一个空格。作者是以英文做的示例， 不知道对中文是否适用。 好像不是很适用。 看上去总觉得怪怪的。</li>\n<li>引号<ul>\n<li>印刷引号:“66和99”</li>\n<li>打字机引号:”竖杠引号”</li>\n<li>问号和感叹号如果属于引用的一部分就出现在引号内。</li>\n<li>问号和感叹号如果不属于引用的一部分就出现在引号外。</li>\n</ul>\n</li>\n<li>撇号<ul>\n<li>使用印刷撇号！！！’’’</li>\n<li>省略字母：除了所属性词语之外，撇号意味着省略一个字母如：isn’t Rock’n’Roll，注意是99不是69！</li>\n<li>撇号是9！</li>\n</ul>\n</li>\n<li>连接号<ul>\n<li>连字符<ul>\n<li>odd-looking-critters</li>\n<li>在转行时放在单词的前半部之后，用于断词。</li>\n</ul>\n</li>\n<li>一字线<ul>\n<li>「如何输入」:中文的破折号由两个一字线组成，所以其为破折号的一半，在中文打字法，输入中文的模式下，按下shift+0旁边的键(即连字符)，再删除一次横线，剩下的即为一字线。</li>\n<li>一字线意味着一个持续事件，也可用to代替，前后无空格。例如：7:30—9:30pm</li>\n<li>「宽度」:类似大写字母N的宽度</li>\n</ul>\n</li>\n<li>破折号<ul>\n<li>表示思想的突然变化。</li>\n<li>「宽度」:即中文的破折号，一字线的两倍。</li>\n<li>表意强度:句号&gt;破折号&gt;逗号</li>\n<li>两侧无空格。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊符号<ul>\n<li>PC上的特殊符号<ul>\n<li>ANSI编码:alt+数字键</li>\n<li>重音符号:alt+数字键</li>\n</ul>\n</li>\n<li>MAC上的特殊符号<ul>\n<li>shift/option+字符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>大写字母<ul>\n<li>全部大写比全部小写难以阅读，因为大写字母没有轮廓形状变化。</li>\n</ul>\n</li>\n<li>下划线<ul>\n<li>永远不要使用。</li>\n<li>代替：<strong>粗体字</strong>、大号字、不同的字体、颜色。</li>\n</ul>\n</li>\n<li>字距调整<ul>\n<li>「字距调整」:挪动字符间距.</li>\n<li>通常值针对与英语，因为字符键可能存在较大缝隙。</li>\n</ul>\n</li>\n<li>寡妇和孤儿<ul>\n<li>「寡妇」:一段文字的最后一行字符数少于7个。</li>\n<li>「孤儿」:一段的最后一行由于太长而和其他文字分开，在下一栏或下一页的最上面结束。</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>跟随在有样式的文字后的标点与文字样式一样。</li>\n<li>括号中的标点<ul>\n<li>如果括号中的文字是整个句子的一部分，标点在闭括号外。</li>\n<li>括号内的文字是一个完整的句子，标点在括号内。</li>\n</ul>\n</li>\n<li>段落缩进或段落进空行：二者只可选其一。因为都代表“下文为新的一段”的意思。</li>\n<li>首段:不一定需要缩进。</li>\n<li>方框内的文字:尽量在放扩四周留够空间，不要太挤。</li>\n<li>在列表中使用项目符号或装饰符号，而不是连字符。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十章：「字体（与人生）」\"><a href=\"#第十章：「字体（与人生）」\" class=\"headerlink\" title=\"第十章：「字体（与人生）」\"></a>第十章：「字体（与人生）」</h4><ul>\n<li>协调与冲突<ul>\n<li>「协调」:只使用一个字体系列，样式、大小、字体粗细无变化。</li>\n<li>「冲突」:结合使用多个字体系列，很类似但并不相同。</li>\n<li>「对比」:结合的多种字体和元素彼此之间并不相同。</li>\n<li>协调是一个稳妥有用的概念，但冲突务必要避免。</li>\n<li>字体对比存在6种明确的不同方式:大小、粗细、结构、形状、方向和颜色。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十一章：「字体类别」\"><a href=\"#第十一章：「字体类别」\" class=\"headerlink\" title=\"第十一章：「字体类别」\"></a>第十一章：「字体类别」</h4><ul>\n<li>「OldStyle」 旧式体<ul>\n<li>都有衬线，且小写字母衬线存在角度。</li>\n<li>「粗细过渡」:曲线笔画存在一种从粗到细的变化。</li>\n<li>「适合阅读」</li>\n<li>「对角强调线」:曲线最细部分的一条线。 </li>\n</ul>\n</li>\n<li>「Modern」 现代体<ul>\n<li>都有衬线，衬线水平。</li>\n<li>「剧烈粗细过渡」:曲线笔画存在一种剧烈的从粗到细的变化。</li>\n<li>强调线完全垂直。</li>\n<li>「不适合大量显示正文」</li>\n</ul>\n</li>\n<li>「Slab serif」 粗衬线体<ul>\n<li>都有衬线。</li>\n<li>「几乎不存在粗细过渡」</li>\n<li>适合阅读。尤其是小孩。</li>\n</ul>\n</li>\n<li>「Sans serif」 无衬线体<ul>\n<li>「Sans」:法语“没有”。</li>\n<li>没有衬线。</li>\n<li>「几乎不存在粗细过渡」</li>\n<li>页面中使用或许有奇效。</li>\n</ul>\n</li>\n<li>「Script」 手写体<ul>\n<li>很漂亮。</li>\n<li>花里胡哨。</li>\n<li>但是要少用。</li>\n</ul>\n</li>\n<li>「Decorative」 花体<ul>\n<li>各种奇效。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十二章：「字体对比」\"><a href=\"#第十二章：「字体对比」\" class=\"headerlink\" title=\"第十二章：「字体对比」\"></a>第十二章：「字体对比」</h4><ul>\n<li>对比6要素：<ol>\n<li>大小</li>\n<li>粗细</li>\n<li>结构</li>\n<li>形状</li>\n<li>方向</li>\n<li>颜色</li>\n</ol>\n</li>\n<li>「必须选取两个不同字体类别中的字体」不要把同一个类别中的两个自体放在同一个页面上。</li>\n</ul>\n<h2 id=\"最后说说\"><a href=\"#最后说说\" class=\"headerlink\" title=\"最后说说\"></a>最后说说</h2><p>花了近四个小时的时间整理，要把内容回顾了一遍。</p>\n<p>多少还是有点收获吧，虽然方法笨。</p>\n<p>贵有恒，何必担心收获不够多。</p>"},{"title":"js设计模式：发布订阅模式","date":"2020-04-08T13:35:30.000Z","description":"js设计模式","_content":"\n通用实现：\n```\n// 发布者。\nvar publisherModel = {\n    subscriber:{},\n    listen:function(key,fn){\n        if(!this.subscriber[key]){\n            this.subscriber[key] = [];\n        }\n        this.subscriber[key].push(fn);\n    },\n    publish:function(){\n        let key = Array.prototype.shift.call(arguments),\n            fns = this.subscriber[key];\n        if(!fns || fns.length === 0){\n            return false;\n        }\n        for(var i=0,fn;fn = fns[i++];){\n            fn.apply(this,arguments);\n        }\n    }\n}\n// 生成发布者\nvar installPublisher = function(obj){\n    for(var i in publisherModel){\n        obj[i] = publisherModel[i];\n    }\n}\n```","source":"_posts/设计模式/js设计模式：发布订阅模式.md","raw":"---\ntitle: js设计模式：发布订阅模式 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-4-8 21:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 设计模式 #分类\n\ntags: [js, 设计模式]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: js设计模式\n---\n\n通用实现：\n```\n// 发布者。\nvar publisherModel = {\n    subscriber:{},\n    listen:function(key,fn){\n        if(!this.subscriber[key]){\n            this.subscriber[key] = [];\n        }\n        this.subscriber[key].push(fn);\n    },\n    publish:function(){\n        let key = Array.prototype.shift.call(arguments),\n            fns = this.subscriber[key];\n        if(!fns || fns.length === 0){\n            return false;\n        }\n        for(var i=0,fn;fn = fns[i++];){\n            fn.apply(this,arguments);\n        }\n    }\n}\n// 生成发布者\nvar installPublisher = function(obj){\n    for(var i in publisherModel){\n        obj[i] = publisherModel[i];\n    }\n}\n```","slug":"设计模式/js设计模式：发布订阅模式","published":1,"updated":"2020-08-17T07:51:15.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0km001vykrv7fwqfejr","content":"<p>通用实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 发布者。</span><br><span class=\"line\">var publisherModel = &#123;</span><br><span class=\"line\">    subscriber:&#123;&#125;,</span><br><span class=\"line\">    listen:function(key,fn)&#123;</span><br><span class=\"line\">        if(!this.subscriber[key])&#123;</span><br><span class=\"line\">            this.subscriber[key] = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.subscriber[key].push(fn);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    publish:function()&#123;</span><br><span class=\"line\">        let key = Array.prototype.shift.call(arguments),</span><br><span class=\"line\">            fns = this.subscriber[key];</span><br><span class=\"line\">        if(!fns || fns.length === 0)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(var i=0,fn;fn = fns[i++];)&#123;</span><br><span class=\"line\">            fn.apply(this,arguments);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 生成发布者</span><br><span class=\"line\">var installPublisher = function(obj)&#123;</span><br><span class=\"line\">    for(var i in publisherModel)&#123;</span><br><span class=\"line\">        obj[i] = publisherModel[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>通用实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 发布者。</span><br><span class=\"line\">var publisherModel = &#123;</span><br><span class=\"line\">    subscriber:&#123;&#125;,</span><br><span class=\"line\">    listen:function(key,fn)&#123;</span><br><span class=\"line\">        if(!this.subscriber[key])&#123;</span><br><span class=\"line\">            this.subscriber[key] = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.subscriber[key].push(fn);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    publish:function()&#123;</span><br><span class=\"line\">        let key = Array.prototype.shift.call(arguments),</span><br><span class=\"line\">            fns = this.subscriber[key];</span><br><span class=\"line\">        if(!fns || fns.length === 0)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(var i=0,fn;fn = fns[i++];)&#123;</span><br><span class=\"line\">            fn.apply(this,arguments);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 生成发布者</span><br><span class=\"line\">var installPublisher = function(obj)&#123;</span><br><span class=\"line\">    for(var i in publisherModel)&#123;</span><br><span class=\"line\">        obj[i] = publisherModel[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"23种设计模式概览","date":"2019-12-02T03:35:30.000Z","description":"23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现","thumbnail":"http://cdn.ewinds.pw/kungfu.jpeg","_content":"\n23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现。\n\n代码详见github：https://github.com/Michael-Zhang-Xian-Sen/design-pattern\n\n<!-- more -->\n\n# 目录\n1. 创建型模式\n    1. 抽象工厂模式（Abstract Factory Pattern）\n    2. 工厂方法模式（Factory Method Pattern）\n    3. 简单工厂（Simple Factory Pattern）（注：不属于设计模式。）\n    4. 原型模式（Prototype Pattern）\n    5. 单例模式（Singleton Pattern）\n    6. 建造者模式（Builder Pattern）（又名：生成器模式）\n2. 行为型模式\n    1. 观察者模式（Observer Pattern）\n    2. 模版方法模式（Template Pattern）\n    3. 命令模式（Command Pattern）\n    4. 状态模式（State Pattern）\n    5. 职责链模式（Chain of Responsibility）\n    6. 解释器模式（Interpreter Pattern）\n    7. 中介者模式（Mediator Pattern）（又名：调停者模式）\n    8. 访问者模式（Visitor Pattern）\n    9. 策略模式（Strategy Pattern）\n    10. 备忘录模式（Memento Pattern）\n    11. 迭代器模式（Iterator Pattern）\n3. 结构型模式\n    1. 适配器模式（Adapter Pattern）\n    2. 桥接模式（Bridge Pattern）\n    3. 组合模式（Composite Pattern）\n    4. 装饰模式（Decorator Pattern）\n    5. 外观模式（Facade Pattern）\n    6. 享元模式（Flyweight Pattern）\n    7. 代理模式（Proxy Pattern）\n\n## 1. 创建型模式\n\n### 1.1. 抽象工厂模式\n#### UML图：\n![image](http://cdn.ewinds.pw/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.jpg)\n\n#### 定义\n抽象工厂模式（AbstractFactory）提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n#### 优点\n1. 抽象工厂的工厂最为强大。\n2. 易于交换产品系列。由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，只需改变具体工厂的内容便可改变不同的产品配置。符合里氏替换原则。\n3. 抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中。\n4. 该模式帮助我们针对抽象编程，而不是针对具体编程。\n5. 通过减少程序和具体类之间的依赖，促进松耦合。\n\n#### 缺点\n添加产品族很简单，只需要对每个接口添加一个类，符合开闭原则；但是添加产品比较麻烦，如果新添加了产品C，那么所有工厂都要添加产品C，违反了开闭原则。\n\n### 1.2. 工厂方法模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.jpg)\n\n#### 定义\n定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。（即：工厂方法把简单工厂的逻辑判断移动到了客户端）\n\n#### 优点\n符合开闭原则。\n\n#### 缺点\n增加新的产品时，需要增加新的工厂类和产品类，会带来更大的开销。\n抽象层的加入使得理解难度增大。\n\n\n### 1.3 简单工厂\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.jpg)\n\n#### 定义\n将创建对象的代码进行封装。\n\n#### 优点\n* 根据客户端的条件，动态实例化相关的类。对于客户端来说，去除了与具体产品的依赖。\n\n#### 缺点\n* 由于若要添加逻辑，需要修改工厂类，违背了开闭原则\n\n### 1.4 原型模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n用原型实例制定创建对象的种类，并且通过拷贝原型这些原型创建新的对象。\n感觉重点就在于实现了clone方法。\n\n#### 浅拷贝\n\n被复制的对象的所有变量都含有与原来对象相同的值。故所有的对其他对象的引用都仍然指向原来的对象。\n\n#### 深拷贝\n\n在浅拷贝的基础上，将引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。\n\n#### 优点\n1. 向客户隐藏制造新实例的复杂性。\n2. 提供让客户能够产生未知类型对象的选项。\n3. 在某些环境下，复制对象比创建新对象更有效。\n\n#### 缺点\n1. 对象的复制有时相当复杂。\n\n#### 用途\n1. 在一个复杂的类层次中，当系统必须从其中的许多类型创建新对象时，可以考虑原型。\n\n### 1.5 单例模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n#### 补充\n* 通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。\n\n#### 饿汉式单例类\n在类被加载时便将自己实例化。\n\n#### 懒汉式单例类\n在第一次被引用时将自己实例化。\n\n#### 注意\n* 多线程的单例，需要加锁，避免同时创建多个实例。\n\n#### 优点\n* 可以使用单例模式替换全局变量。\n\n#### 缺点\n* 单例模式引入了许多的其他问题，比如在创建单例对象的时候需要加锁。\n\n### 1.6 建造者模式（生成器模式）\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 优点\n1. 将一个复杂对象的创建过程封装起来\n2. 允许对象通过多个步骤来创建，并且可以改变过程。（这和只有一个步骤的工厂模式不同）\n3. 向客户隐藏产品内部的表现。\n4. 产品的实现可以被替换，因为客户只看到一个抽象的接口。\n\n#### 缺点\n1. 与工厂模式相比，采用生成器模式创建对象需要具备更多的领域知识。\n\n#### 用途\n1. 经常被用来创建组合结构。\n\n\n## 2. 行为型模式\n### 2.1. 观察者模式（发布-订阅模式）\n#### UML图：\n![image](http://cdn.ewinds.pw/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\n#### 优点\n1. 让主题和观察者之间松耦合。它们之间依然可以交互，但是不太清楚彼此的细节，使互相的依赖降到了最低。\n\n#### 缺点\n\n\n### 2.2 模版方法模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg)\n\n（注：父类是抽象类）\n#### 定义\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n\n#### 优点\n模板方法模式通过把不变的行为搬移到超类，去除子类中的重复代码来体现它的优势。即当不变的行为和可变的行为在子类中混杂在一起的时候，不变的行为会在子类中重复出现，通过模板方法模式把这些行为搬移到父类或其他的地方，可以帮助子类摆脱重复的不变行为的纠缠。\n\n### 2.3 命令模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。\n\n#### 优点\n1. 能够容易地设计一个命令队列。\n2. 在需要的情况下，可以容易地将命令记入日志。\n3. 允许接受请求的一方决定是否要否决请求。\n4. 可以容易地实现对请求的撤销和重做。\n5. 由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。\n6. 把请求一个操作的对象与知道怎么执行一个操作的对象分割开。\n\n### 2.4 状态模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了这个类。\n主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一些列类当中，可以把复杂的判断逻辑简化。\n\n#### 优点\n将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。\n\n### 2.5 职责链模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象可以处理它为止。\n\n#### 用途\n\n经常被用在窗口系统中，处理鼠标和键盘之类的事件。\n\n#### 优点\n\n1. 可以随时添加或修改处理一个请求的结构。增强了给对象指派职责的灵活性。\n2. 将请求的发送者和接收者解耦。（状态模式两个请求之间仍然存在耦合）\n3. 可以简化Client对象，因为Client对象不需要知道链的结构。\n4. 通过改变指责链内的成员或调动他们的次序，允许使用者动态地新增或删除责任。\n\n#### 缺点\n并不能保证请求一定被执行。\n不容易观察运行时的特征，有碍于debug。\n\n### 2.6 解释器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n#### 应用场景\n如果一种特定类型的问题发生频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。\n\n### 2.7 中介者模式（调停者模式）\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n用一个中介对象来封装一系列的对象交互。中介者使各个对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\n### 2.8 访问者模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n### 2.9 策略模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。\n\n### 2.10 备忘录模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。\n\n### 2.11 迭代器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。\n\n该模式已经被多种语言所实现为\n\n## 3. 结构型模式\n### 3.1 适配器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n#### 优点\n\n### 3.2 桥接模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\nBridge，将抽象部分与它的实现部分分离，使他们都可以独立地变化。\n* 补充理解1：实现的方式有多种。桥接模式的核心意图就是把这些实现独立出来，让它们各自地变化。这就使得每种实现的变化不会影响其他实现，从而达到应对变化的目的。\n* 补充理解2：实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。\n\n### 3.3 组合模式\n\n#### UML图\n\n##### 透明模式\n![image](http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E9%80%8F%E6%98%8E%E6%A8%A1%E5%BC%8F%29.jpg)\n\n##### 安全模式\n![image](http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%29.jpg)\n\n#### 定义\n将对象组合成树形结构，以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n* 透明方式：Componet中声明所有用来管理子对象的方法。\n* 安全方式：Componet接口中不声明管理子对象的方法，而是在Composite中声明所有用来管理子对象的方法。\n\n\n### 3.4 装饰模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。\n\n### 3.5 外观模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n* 外观模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n#### 优点\n* 符合迪米特法则\n* 符合依赖倒置原则\n\n### 3.6 享元模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n* Flyweight，运用共享技术有效地支持大量细粒度的对象。\n* 享元对象的内部状态：不会随环境改变而改变的共享部分。\n* 享元对象的外部状态：随环境改变而改变的、不可以共享的状态。 \n\n#### 优点\n节约存储空间。\n\n#### 缺点\n需要将部分状态外部化，使得逻辑更为复杂，\n\n### 3.7 代理模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n为其他对象提供一种代理以控制这个对象的访问。\n\n#### 优点\n\n#### 应用场景\n* 远程代理\n* 虚拟代理\n* 安全代理\n","source":"_posts/设计模式/设计模式.md","raw":"---\ntitle: 23种设计模式概览 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2019-12-02 11:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 软件设计 #分类\n\ntags: 软件设计 #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现\n\nthumbnail: http://cdn.ewinds.pw/kungfu.jpeg\n---\n\n23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现。\n\n代码详见github：https://github.com/Michael-Zhang-Xian-Sen/design-pattern\n\n<!-- more -->\n\n# 目录\n1. 创建型模式\n    1. 抽象工厂模式（Abstract Factory Pattern）\n    2. 工厂方法模式（Factory Method Pattern）\n    3. 简单工厂（Simple Factory Pattern）（注：不属于设计模式。）\n    4. 原型模式（Prototype Pattern）\n    5. 单例模式（Singleton Pattern）\n    6. 建造者模式（Builder Pattern）（又名：生成器模式）\n2. 行为型模式\n    1. 观察者模式（Observer Pattern）\n    2. 模版方法模式（Template Pattern）\n    3. 命令模式（Command Pattern）\n    4. 状态模式（State Pattern）\n    5. 职责链模式（Chain of Responsibility）\n    6. 解释器模式（Interpreter Pattern）\n    7. 中介者模式（Mediator Pattern）（又名：调停者模式）\n    8. 访问者模式（Visitor Pattern）\n    9. 策略模式（Strategy Pattern）\n    10. 备忘录模式（Memento Pattern）\n    11. 迭代器模式（Iterator Pattern）\n3. 结构型模式\n    1. 适配器模式（Adapter Pattern）\n    2. 桥接模式（Bridge Pattern）\n    3. 组合模式（Composite Pattern）\n    4. 装饰模式（Decorator Pattern）\n    5. 外观模式（Facade Pattern）\n    6. 享元模式（Flyweight Pattern）\n    7. 代理模式（Proxy Pattern）\n\n## 1. 创建型模式\n\n### 1.1. 抽象工厂模式\n#### UML图：\n![image](http://cdn.ewinds.pw/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.jpg)\n\n#### 定义\n抽象工厂模式（AbstractFactory）提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n#### 优点\n1. 抽象工厂的工厂最为强大。\n2. 易于交换产品系列。由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，只需改变具体工厂的内容便可改变不同的产品配置。符合里氏替换原则。\n3. 抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中。\n4. 该模式帮助我们针对抽象编程，而不是针对具体编程。\n5. 通过减少程序和具体类之间的依赖，促进松耦合。\n\n#### 缺点\n添加产品族很简单，只需要对每个接口添加一个类，符合开闭原则；但是添加产品比较麻烦，如果新添加了产品C，那么所有工厂都要添加产品C，违反了开闭原则。\n\n### 1.2. 工厂方法模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.jpg)\n\n#### 定义\n定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。（即：工厂方法把简单工厂的逻辑判断移动到了客户端）\n\n#### 优点\n符合开闭原则。\n\n#### 缺点\n增加新的产品时，需要增加新的工厂类和产品类，会带来更大的开销。\n抽象层的加入使得理解难度增大。\n\n\n### 1.3 简单工厂\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.jpg)\n\n#### 定义\n将创建对象的代码进行封装。\n\n#### 优点\n* 根据客户端的条件，动态实例化相关的类。对于客户端来说，去除了与具体产品的依赖。\n\n#### 缺点\n* 由于若要添加逻辑，需要修改工厂类，违背了开闭原则\n\n### 1.4 原型模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n用原型实例制定创建对象的种类，并且通过拷贝原型这些原型创建新的对象。\n感觉重点就在于实现了clone方法。\n\n#### 浅拷贝\n\n被复制的对象的所有变量都含有与原来对象相同的值。故所有的对其他对象的引用都仍然指向原来的对象。\n\n#### 深拷贝\n\n在浅拷贝的基础上，将引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。\n\n#### 优点\n1. 向客户隐藏制造新实例的复杂性。\n2. 提供让客户能够产生未知类型对象的选项。\n3. 在某些环境下，复制对象比创建新对象更有效。\n\n#### 缺点\n1. 对象的复制有时相当复杂。\n\n#### 用途\n1. 在一个复杂的类层次中，当系统必须从其中的许多类型创建新对象时，可以考虑原型。\n\n### 1.5 单例模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n#### 补充\n* 通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。\n\n#### 饿汉式单例类\n在类被加载时便将自己实例化。\n\n#### 懒汉式单例类\n在第一次被引用时将自己实例化。\n\n#### 注意\n* 多线程的单例，需要加锁，避免同时创建多个实例。\n\n#### 优点\n* 可以使用单例模式替换全局变量。\n\n#### 缺点\n* 单例模式引入了许多的其他问题，比如在创建单例对象的时候需要加锁。\n\n### 1.6 建造者模式（生成器模式）\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 优点\n1. 将一个复杂对象的创建过程封装起来\n2. 允许对象通过多个步骤来创建，并且可以改变过程。（这和只有一个步骤的工厂模式不同）\n3. 向客户隐藏产品内部的表现。\n4. 产品的实现可以被替换，因为客户只看到一个抽象的接口。\n\n#### 缺点\n1. 与工厂模式相比，采用生成器模式创建对象需要具备更多的领域知识。\n\n#### 用途\n1. 经常被用来创建组合结构。\n\n\n## 2. 行为型模式\n### 2.1. 观察者模式（发布-订阅模式）\n#### UML图：\n![image](http://cdn.ewinds.pw/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\n#### 优点\n1. 让主题和观察者之间松耦合。它们之间依然可以交互，但是不太清楚彼此的细节，使互相的依赖降到了最低。\n\n#### 缺点\n\n\n### 2.2 模版方法模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg)\n\n（注：父类是抽象类）\n#### 定义\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n\n#### 优点\n模板方法模式通过把不变的行为搬移到超类，去除子类中的重复代码来体现它的优势。即当不变的行为和可变的行为在子类中混杂在一起的时候，不变的行为会在子类中重复出现，通过模板方法模式把这些行为搬移到父类或其他的地方，可以帮助子类摆脱重复的不变行为的纠缠。\n\n### 2.3 命令模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。\n\n#### 优点\n1. 能够容易地设计一个命令队列。\n2. 在需要的情况下，可以容易地将命令记入日志。\n3. 允许接受请求的一方决定是否要否决请求。\n4. 可以容易地实现对请求的撤销和重做。\n5. 由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。\n6. 把请求一个操作的对象与知道怎么执行一个操作的对象分割开。\n\n### 2.4 状态模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了这个类。\n主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一些列类当中，可以把复杂的判断逻辑简化。\n\n#### 优点\n将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。\n\n### 2.5 职责链模式\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象可以处理它为止。\n\n#### 用途\n\n经常被用在窗口系统中，处理鼠标和键盘之类的事件。\n\n#### 优点\n\n1. 可以随时添加或修改处理一个请求的结构。增强了给对象指派职责的灵活性。\n2. 将请求的发送者和接收者解耦。（状态模式两个请求之间仍然存在耦合）\n3. 可以简化Client对象，因为Client对象不需要知道链的结构。\n4. 通过改变指责链内的成员或调动他们的次序，允许使用者动态地新增或删除责任。\n\n#### 缺点\n并不能保证请求一定被执行。\n不容易观察运行时的特征，有碍于debug。\n\n### 2.6 解释器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n#### 应用场景\n如果一种特定类型的问题发生频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。\n\n### 2.7 中介者模式（调停者模式）\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n用一个中介对象来封装一系列的对象交互。中介者使各个对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\n### 2.8 访问者模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n### 2.9 策略模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。\n\n### 2.10 备忘录模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。\n\n### 2.11 迭代器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。\n\n该模式已经被多种语言所实现为\n\n## 3. 结构型模式\n### 3.1 适配器模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n#### 优点\n\n### 3.2 桥接模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\nBridge，将抽象部分与它的实现部分分离，使他们都可以独立地变化。\n* 补充理解1：实现的方式有多种。桥接模式的核心意图就是把这些实现独立出来，让它们各自地变化。这就使得每种实现的变化不会影响其他实现，从而达到应对变化的目的。\n* 补充理解2：实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。\n\n### 3.3 组合模式\n\n#### UML图\n\n##### 透明模式\n![image](http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E9%80%8F%E6%98%8E%E6%A8%A1%E5%BC%8F%29.jpg)\n\n##### 安全模式\n![image](http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%29.jpg)\n\n#### 定义\n将对象组合成树形结构，以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n* 透明方式：Componet中声明所有用来管理子对象的方法。\n* 安全方式：Componet接口中不声明管理子对象的方法，而是在Composite中声明所有用来管理子对象的方法。\n\n\n### 3.4 装饰模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。\n\n### 3.5 外观模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n* 外观模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n#### 优点\n* 符合迪米特法则\n* 符合依赖倒置原则\n\n### 3.6 享元模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n* Flyweight，运用共享技术有效地支持大量细粒度的对象。\n* 享元对象的内部状态：不会随环境改变而改变的共享部分。\n* 享元对象的外部状态：随环境改变而改变的、不可以共享的状态。 \n\n#### 优点\n节约存储空间。\n\n#### 缺点\n需要将部分状态外部化，使得逻辑更为复杂，\n\n### 3.7 代理模式\n\n#### UML图\n![image](http://cdn.ewinds.pw/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpg)\n\n#### 定义\n为其他对象提供一种代理以控制这个对象的访问。\n\n#### 优点\n\n#### 应用场景\n* 远程代理\n* 虚拟代理\n* 安全代理\n","slug":"设计模式/设计模式","published":1,"updated":"2020-08-17T08:02:29.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0km001wykrvsjg2wgso","content":"<p>23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现。</p>\n<p>代码详见github：<a href=\"https://github.com/Michael-Zhang-Xian-Sen/design-pattern\" target=\"_blank\" rel=\"noopener\">https://github.com/Michael-Zhang-Xian-Sen/design-pattern</a></p>\n<a id=\"more\"></a>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ol>\n<li>创建型模式<ol>\n<li>抽象工厂模式（Abstract Factory Pattern）</li>\n<li>工厂方法模式（Factory Method Pattern）</li>\n<li>简单工厂（Simple Factory Pattern）（注：不属于设计模式。）</li>\n<li>原型模式（Prototype Pattern）</li>\n<li>单例模式（Singleton Pattern）</li>\n<li>建造者模式（Builder Pattern）（又名：生成器模式）</li>\n</ol>\n</li>\n<li>行为型模式<ol>\n<li>观察者模式（Observer Pattern）</li>\n<li>模版方法模式（Template Pattern）</li>\n<li>命令模式（Command Pattern）</li>\n<li>状态模式（State Pattern）</li>\n<li>职责链模式（Chain of Responsibility）</li>\n<li>解释器模式（Interpreter Pattern）</li>\n<li>中介者模式（Mediator Pattern）（又名：调停者模式）</li>\n<li>访问者模式（Visitor Pattern）</li>\n<li>策略模式（Strategy Pattern）</li>\n<li>备忘录模式（Memento Pattern）</li>\n<li>迭代器模式（Iterator Pattern）</li>\n</ol>\n</li>\n<li>结构型模式<ol>\n<li>适配器模式（Adapter Pattern）</li>\n<li>桥接模式（Bridge Pattern）</li>\n<li>组合模式（Composite Pattern）</li>\n<li>装饰模式（Decorator Pattern）</li>\n<li>外观模式（Facade Pattern）</li>\n<li>享元模式（Flyweight Pattern）</li>\n<li>代理模式（Proxy Pattern）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-创建型模式\"><a href=\"#1-创建型模式\" class=\"headerlink\" title=\"1. 创建型模式\"></a>1. 创建型模式</h2><h3 id=\"1-1-抽象工厂模式\"><a href=\"#1-1-抽象工厂模式\" class=\"headerlink\" title=\"1.1. 抽象工厂模式\"></a>1.1. 抽象工厂模式</h3><h4 id=\"UML图：\"><a href=\"#UML图：\" class=\"headerlink\" title=\"UML图：\"></a>UML图：</h4><p><img src=\"http://cdn.ewinds.pw/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.jpg\" alt=\"image\"></p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>抽象工厂模式（AbstractFactory）提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>抽象工厂的工厂最为强大。</li>\n<li>易于交换产品系列。由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，只需改变具体工厂的内容便可改变不同的产品配置。符合里氏替换原则。</li>\n<li>抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中。</li>\n<li>该模式帮助我们针对抽象编程，而不是针对具体编程。</li>\n<li>通过减少程序和具体类之间的依赖，促进松耦合。</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>添加产品族很简单，只需要对每个接口添加一个类，符合开闭原则；但是添加产品比较麻烦，如果新添加了产品C，那么所有工厂都要添加产品C，违反了开闭原则。</p>\n<h3 id=\"1-2-工厂方法模式\"><a href=\"#1-2-工厂方法模式\" class=\"headerlink\" title=\"1.2. 工厂方法模式\"></a>1.2. 工厂方法模式</h3><h4 id=\"UML图\"><a href=\"#UML图\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。（即：工厂方法把简单工厂的逻辑判断移动到了客户端）</p>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>符合开闭原则。</p>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>增加新的产品时，需要增加新的工厂类和产品类，会带来更大的开销。<br>抽象层的加入使得理解难度增大。</p>\n<h3 id=\"1-3-简单工厂\"><a href=\"#1-3-简单工厂\" class=\"headerlink\" title=\"1.3 简单工厂\"></a>1.3 简单工厂</h3><h4 id=\"UML图-1\"><a href=\"#UML图-1\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将创建对象的代码进行封装。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>根据客户端的条件，动态实例化相关的类。对于客户端来说，去除了与具体产品的依赖。</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>由于若要添加逻辑，需要修改工厂类，违背了开闭原则</li>\n</ul>\n<h3 id=\"1-4-原型模式\"><a href=\"#1-4-原型模式\" class=\"headerlink\" title=\"1.4 原型模式\"></a>1.4 原型模式</h3><h4 id=\"UML图-2\"><a href=\"#UML图-2\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>用原型实例制定创建对象的种类，并且通过拷贝原型这些原型创建新的对象。<br>感觉重点就在于实现了clone方法。</p>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>被复制的对象的所有变量都含有与原来对象相同的值。故所有的对其他对象的引用都仍然指向原来的对象。</p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>在浅拷贝的基础上，将引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p>\n<h4 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>向客户隐藏制造新实例的复杂性。</li>\n<li>提供让客户能够产生未知类型对象的选项。</li>\n<li>在某些环境下，复制对象比创建新对象更有效。</li>\n</ol>\n<h4 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>对象的复制有时相当复杂。</li>\n</ol>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><ol>\n<li>在一个复杂的类层次中，当系统必须从其中的许多类型创建新对象时，可以考虑原型。</li>\n</ol>\n<h3 id=\"1-5-单例模式\"><a href=\"#1-5-单例模式\" class=\"headerlink\" title=\"1.5 单例模式\"></a>1.5 单例模式</h3><h4 id=\"UML图-3\"><a href=\"#UML图-3\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><ul>\n<li>通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。</li>\n</ul>\n<h4 id=\"饿汉式单例类\"><a href=\"#饿汉式单例类\" class=\"headerlink\" title=\"饿汉式单例类\"></a>饿汉式单例类</h4><p>在类被加载时便将自己实例化。</p>\n<h4 id=\"懒汉式单例类\"><a href=\"#懒汉式单例类\" class=\"headerlink\" title=\"懒汉式单例类\"></a>懒汉式单例类</h4><p>在第一次被引用时将自己实例化。</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>多线程的单例，需要加锁，避免同时创建多个实例。</li>\n</ul>\n<h4 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>可以使用单例模式替换全局变量。</li>\n</ul>\n<h4 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>单例模式引入了许多的其他问题，比如在创建单例对象的时候需要加锁。</li>\n</ul>\n<h3 id=\"1-6-建造者模式（生成器模式）\"><a href=\"#1-6-建造者模式（生成器模式）\" class=\"headerlink\" title=\"1.6 建造者模式（生成器模式）\"></a>1.6 建造者模式（生成器模式）</h3><h4 id=\"UML图-4\"><a href=\"#UML图-4\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h4 id=\"优点-5\"><a href=\"#优点-5\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>将一个复杂对象的创建过程封装起来</li>\n<li>允许对象通过多个步骤来创建，并且可以改变过程。（这和只有一个步骤的工厂模式不同）</li>\n<li>向客户隐藏产品内部的表现。</li>\n<li>产品的实现可以被替换，因为客户只看到一个抽象的接口。</li>\n</ol>\n<h4 id=\"缺点-5\"><a href=\"#缺点-5\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>与工厂模式相比，采用生成器模式创建对象需要具备更多的领域知识。</li>\n</ol>\n<h4 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h4><ol>\n<li>经常被用来创建组合结构。</li>\n</ol>\n<h2 id=\"2-行为型模式\"><a href=\"#2-行为型模式\" class=\"headerlink\" title=\"2. 行为型模式\"></a>2. 行为型模式</h2><h3 id=\"2-1-观察者模式（发布-订阅模式）\"><a href=\"#2-1-观察者模式（发布-订阅模式）\" class=\"headerlink\" title=\"2.1. 观察者模式（发布-订阅模式）\"></a>2.1. 观察者模式（发布-订阅模式）</h3><h4 id=\"UML图：-1\"><a href=\"#UML图：-1\" class=\"headerlink\" title=\"UML图：\"></a>UML图：</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<h4 id=\"优点-6\"><a href=\"#优点-6\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>让主题和观察者之间松耦合。它们之间依然可以交互，但是不太清楚彼此的细节，使互相的依赖降到了最低。</li>\n</ol>\n<h4 id=\"缺点-6\"><a href=\"#缺点-6\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><h3 id=\"2-2-模版方法模式\"><a href=\"#2-2-模版方法模式\" class=\"headerlink\" title=\"2.2 模版方法模式\"></a>2.2 模版方法模式</h3><h4 id=\"UML图-5\"><a href=\"#UML图-5\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<p>（注：父类是抽象类）</p>\n<h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<h4 id=\"优点-7\"><a href=\"#优点-7\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>模板方法模式通过把不变的行为搬移到超类，去除子类中的重复代码来体现它的优势。即当不变的行为和可变的行为在子类中混杂在一起的时候，不变的行为会在子类中重复出现，通过模板方法模式把这些行为搬移到父类或其他的地方，可以帮助子类摆脱重复的不变行为的纠缠。</p>\n<h3 id=\"2-3-命令模式\"><a href=\"#2-3-命令模式\" class=\"headerlink\" title=\"2.3 命令模式\"></a>2.3 命令模式</h3><h4 id=\"UML图-6\"><a href=\"#UML图-6\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>\n<h4 id=\"优点-8\"><a href=\"#优点-8\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>能够容易地设计一个命令队列。</li>\n<li>在需要的情况下，可以容易地将命令记入日志。</li>\n<li>允许接受请求的一方决定是否要否决请求。</li>\n<li>可以容易地实现对请求的撤销和重做。</li>\n<li>由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。</li>\n<li>把请求一个操作的对象与知道怎么执行一个操作的对象分割开。</li>\n</ol>\n<h3 id=\"2-4-状态模式\"><a href=\"#2-4-状态模式\" class=\"headerlink\" title=\"2.4 状态模式\"></a>2.4 状态模式</h3><h4 id=\"UML图-7\"><a href=\"#UML图-7\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了这个类。<br>主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一些列类当中，可以把复杂的判断逻辑简化。</p>\n<h4 id=\"优点-9\"><a href=\"#优点-9\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>\n<h3 id=\"2-5-职责链模式\"><a href=\"#2-5-职责链模式\" class=\"headerlink\" title=\"2.5 职责链模式\"></a>2.5 职责链模式</h3><h4 id=\"UML图-8\"><a href=\"#UML图-8\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-10\"><a href=\"#定义-10\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象可以处理它为止。</p>\n<h4 id=\"用途-2\"><a href=\"#用途-2\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>经常被用在窗口系统中，处理鼠标和键盘之类的事件。</p>\n<h4 id=\"优点-10\"><a href=\"#优点-10\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>可以随时添加或修改处理一个请求的结构。增强了给对象指派职责的灵活性。</li>\n<li>将请求的发送者和接收者解耦。（状态模式两个请求之间仍然存在耦合）</li>\n<li>可以简化Client对象，因为Client对象不需要知道链的结构。</li>\n<li>通过改变指责链内的成员或调动他们的次序，允许使用者动态地新增或删除责任。</li>\n</ol>\n<h4 id=\"缺点-7\"><a href=\"#缺点-7\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>并不能保证请求一定被执行。<br>不容易观察运行时的特征，有碍于debug。</p>\n<h3 id=\"2-6-解释器模式\"><a href=\"#2-6-解释器模式\" class=\"headerlink\" title=\"2.6 解释器模式\"></a>2.6 解释器模式</h3><h4 id=\"UML图-9\"><a href=\"#UML图-9\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-11\"><a href=\"#定义-11\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>如果一种特定类型的问题发生频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<h3 id=\"2-7-中介者模式（调停者模式）\"><a href=\"#2-7-中介者模式（调停者模式）\" class=\"headerlink\" title=\"2.7 中介者模式（调停者模式）\"></a>2.7 中介者模式（调停者模式）</h3><h4 id=\"UML图-10\"><a href=\"#UML图-10\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-12\"><a href=\"#定义-12\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>用一个中介对象来封装一系列的对象交互。中介者使各个对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<h3 id=\"2-8-访问者模式\"><a href=\"#2-8-访问者模式\" class=\"headerlink\" title=\"2.8 访问者模式\"></a>2.8 访问者模式</h3><h4 id=\"UML图-11\"><a href=\"#UML图-11\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-13\"><a href=\"#定义-13\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n<h3 id=\"2-9-策略模式\"><a href=\"#2-9-策略模式\" class=\"headerlink\" title=\"2.9 策略模式\"></a>2.9 策略模式</h3><h4 id=\"UML图-12\"><a href=\"#UML图-12\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-14\"><a href=\"#定义-14\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。</p>\n<h3 id=\"2-10-备忘录模式\"><a href=\"#2-10-备忘录模式\" class=\"headerlink\" title=\"2.10 备忘录模式\"></a>2.10 备忘录模式</h3><h4 id=\"UML图-13\"><a href=\"#UML图-13\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-15\"><a href=\"#定义-15\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<h3 id=\"2-11-迭代器模式\"><a href=\"#2-11-迭代器模式\" class=\"headerlink\" title=\"2.11 迭代器模式\"></a>2.11 迭代器模式</h3><h4 id=\"UML图-14\"><a href=\"#UML图-14\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-16\"><a href=\"#定义-16\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>\n<p>该模式已经被多种语言所实现为</p>\n<h2 id=\"3-结构型模式\"><a href=\"#3-结构型模式\" class=\"headerlink\" title=\"3. 结构型模式\"></a>3. 结构型模式</h2><h3 id=\"3-1-适配器模式\"><a href=\"#3-1-适配器模式\" class=\"headerlink\" title=\"3.1 适配器模式\"></a>3.1 适配器模式</h3><h4 id=\"UML图-15\"><a href=\"#UML图-15\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-17\"><a href=\"#定义-17\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<h4 id=\"优点-11\"><a href=\"#优点-11\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h3 id=\"3-2-桥接模式\"><a href=\"#3-2-桥接模式\" class=\"headerlink\" title=\"3.2 桥接模式\"></a>3.2 桥接模式</h3><h4 id=\"UML图-16\"><a href=\"#UML图-16\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-18\"><a href=\"#定义-18\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Bridge，将抽象部分与它的实现部分分离，使他们都可以独立地变化。</p>\n<ul>\n<li>补充理解1：实现的方式有多种。桥接模式的核心意图就是把这些实现独立出来，让它们各自地变化。这就使得每种实现的变化不会影响其他实现，从而达到应对变化的目的。</li>\n<li>补充理解2：实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</li>\n</ul>\n<h3 id=\"3-3-组合模式\"><a href=\"#3-3-组合模式\" class=\"headerlink\" title=\"3.3 组合模式\"></a>3.3 组合模式</h3><h4 id=\"UML图-17\"><a href=\"#UML图-17\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><h5 id=\"透明模式\"><a href=\"#透明模式\" class=\"headerlink\" title=\"透明模式\"></a>透明模式</h5><p><img src=\"http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E9%80%8F%E6%98%8E%E6%A8%A1%E5%BC%8F%29.jpg\" alt=\"image\"></p>\n<h5 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h5><p><img src=\"http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%29.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-19\"><a href=\"#定义-19\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将对象组合成树形结构，以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<ul>\n<li>透明方式：Componet中声明所有用来管理子对象的方法。</li>\n<li>安全方式：Componet接口中不声明管理子对象的方法，而是在Composite中声明所有用来管理子对象的方法。</li>\n</ul>\n<h3 id=\"3-4-装饰模式\"><a href=\"#3-4-装饰模式\" class=\"headerlink\" title=\"3.4 装饰模式\"></a>3.4 装饰模式</h3><h4 id=\"UML图-18\"><a href=\"#UML图-18\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-20\"><a href=\"#定义-20\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>\n<h3 id=\"3-5-外观模式\"><a href=\"#3-5-外观模式\" class=\"headerlink\" title=\"3.5 外观模式\"></a>3.5 外观模式</h3><h4 id=\"UML图-19\"><a href=\"#UML图-19\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-21\"><a href=\"#定义-21\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>外观模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>\n</ul>\n<h4 id=\"优点-12\"><a href=\"#优点-12\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>符合迪米特法则</li>\n<li>符合依赖倒置原则</li>\n</ul>\n<h3 id=\"3-6-享元模式\"><a href=\"#3-6-享元模式\" class=\"headerlink\" title=\"3.6 享元模式\"></a>3.6 享元模式</h3><h4 id=\"UML图-20\"><a href=\"#UML图-20\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-22\"><a href=\"#定义-22\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>Flyweight，运用共享技术有效地支持大量细粒度的对象。</li>\n<li>享元对象的内部状态：不会随环境改变而改变的共享部分。</li>\n<li>享元对象的外部状态：随环境改变而改变的、不可以共享的状态。 </li>\n</ul>\n<h4 id=\"优点-13\"><a href=\"#优点-13\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>节约存储空间。</p>\n<h4 id=\"缺点-8\"><a href=\"#缺点-8\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>需要将部分状态外部化，使得逻辑更为复杂，</p>\n<h3 id=\"3-7-代理模式\"><a href=\"#3-7-代理模式\" class=\"headerlink\" title=\"3.7 代理模式\"></a>3.7 代理模式</h3><h4 id=\"UML图-21\"><a href=\"#UML图-21\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-23\"><a href=\"#定义-23\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>为其他对象提供一种代理以控制这个对象的访问。</p>\n<h4 id=\"优点-14\"><a href=\"#优点-14\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>远程代理</li>\n<li>虚拟代理</li>\n<li>安全代理</li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现。</p>\n<p>代码详见github：<a href=\"https://github.com/Michael-Zhang-Xian-Sen/design-pattern\" target=\"_blank\" rel=\"noopener\">https://github.com/Michael-Zhang-Xian-Sen/design-pattern</a></p>","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ol>\n<li>创建型模式<ol>\n<li>抽象工厂模式（Abstract Factory Pattern）</li>\n<li>工厂方法模式（Factory Method Pattern）</li>\n<li>简单工厂（Simple Factory Pattern）（注：不属于设计模式。）</li>\n<li>原型模式（Prototype Pattern）</li>\n<li>单例模式（Singleton Pattern）</li>\n<li>建造者模式（Builder Pattern）（又名：生成器模式）</li>\n</ol>\n</li>\n<li>行为型模式<ol>\n<li>观察者模式（Observer Pattern）</li>\n<li>模版方法模式（Template Pattern）</li>\n<li>命令模式（Command Pattern）</li>\n<li>状态模式（State Pattern）</li>\n<li>职责链模式（Chain of Responsibility）</li>\n<li>解释器模式（Interpreter Pattern）</li>\n<li>中介者模式（Mediator Pattern）（又名：调停者模式）</li>\n<li>访问者模式（Visitor Pattern）</li>\n<li>策略模式（Strategy Pattern）</li>\n<li>备忘录模式（Memento Pattern）</li>\n<li>迭代器模式（Iterator Pattern）</li>\n</ol>\n</li>\n<li>结构型模式<ol>\n<li>适配器模式（Adapter Pattern）</li>\n<li>桥接模式（Bridge Pattern）</li>\n<li>组合模式（Composite Pattern）</li>\n<li>装饰模式（Decorator Pattern）</li>\n<li>外观模式（Facade Pattern）</li>\n<li>享元模式（Flyweight Pattern）</li>\n<li>代理模式（Proxy Pattern）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-创建型模式\"><a href=\"#1-创建型模式\" class=\"headerlink\" title=\"1. 创建型模式\"></a>1. 创建型模式</h2><h3 id=\"1-1-抽象工厂模式\"><a href=\"#1-1-抽象工厂模式\" class=\"headerlink\" title=\"1.1. 抽象工厂模式\"></a>1.1. 抽象工厂模式</h3><h4 id=\"UML图：\"><a href=\"#UML图：\" class=\"headerlink\" title=\"UML图：\"></a>UML图：</h4><p><img src=\"http://cdn.ewinds.pw/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82.jpg\" alt=\"image\"></p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>抽象工厂模式（AbstractFactory）提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>抽象工厂的工厂最为强大。</li>\n<li>易于交换产品系列。由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，只需改变具体工厂的内容便可改变不同的产品配置。符合里氏替换原则。</li>\n<li>抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中。</li>\n<li>该模式帮助我们针对抽象编程，而不是针对具体编程。</li>\n<li>通过减少程序和具体类之间的依赖，促进松耦合。</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>添加产品族很简单，只需要对每个接口添加一个类，符合开闭原则；但是添加产品比较麻烦，如果新添加了产品C，那么所有工厂都要添加产品C，违反了开闭原则。</p>\n<h3 id=\"1-2-工厂方法模式\"><a href=\"#1-2-工厂方法模式\" class=\"headerlink\" title=\"1.2. 工厂方法模式\"></a>1.2. 工厂方法模式</h3><h4 id=\"UML图\"><a href=\"#UML图\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。（即：工厂方法把简单工厂的逻辑判断移动到了客户端）</p>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>符合开闭原则。</p>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>增加新的产品时，需要增加新的工厂类和产品类，会带来更大的开销。<br>抽象层的加入使得理解难度增大。</p>\n<h3 id=\"1-3-简单工厂\"><a href=\"#1-3-简单工厂\" class=\"headerlink\" title=\"1.3 简单工厂\"></a>1.3 简单工厂</h3><h4 id=\"UML图-1\"><a href=\"#UML图-1\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将创建对象的代码进行封装。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>根据客户端的条件，动态实例化相关的类。对于客户端来说，去除了与具体产品的依赖。</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>由于若要添加逻辑，需要修改工厂类，违背了开闭原则</li>\n</ul>\n<h3 id=\"1-4-原型模式\"><a href=\"#1-4-原型模式\" class=\"headerlink\" title=\"1.4 原型模式\"></a>1.4 原型模式</h3><h4 id=\"UML图-2\"><a href=\"#UML图-2\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>用原型实例制定创建对象的种类，并且通过拷贝原型这些原型创建新的对象。<br>感觉重点就在于实现了clone方法。</p>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>被复制的对象的所有变量都含有与原来对象相同的值。故所有的对其他对象的引用都仍然指向原来的对象。</p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>在浅拷贝的基础上，将引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p>\n<h4 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>向客户隐藏制造新实例的复杂性。</li>\n<li>提供让客户能够产生未知类型对象的选项。</li>\n<li>在某些环境下，复制对象比创建新对象更有效。</li>\n</ol>\n<h4 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>对象的复制有时相当复杂。</li>\n</ol>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><ol>\n<li>在一个复杂的类层次中，当系统必须从其中的许多类型创建新对象时，可以考虑原型。</li>\n</ol>\n<h3 id=\"1-5-单例模式\"><a href=\"#1-5-单例模式\" class=\"headerlink\" title=\"1.5 单例模式\"></a>1.5 单例模式</h3><h4 id=\"UML图-3\"><a href=\"#UML图-3\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><ul>\n<li>通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。</li>\n</ul>\n<h4 id=\"饿汉式单例类\"><a href=\"#饿汉式单例类\" class=\"headerlink\" title=\"饿汉式单例类\"></a>饿汉式单例类</h4><p>在类被加载时便将自己实例化。</p>\n<h4 id=\"懒汉式单例类\"><a href=\"#懒汉式单例类\" class=\"headerlink\" title=\"懒汉式单例类\"></a>懒汉式单例类</h4><p>在第一次被引用时将自己实例化。</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>多线程的单例，需要加锁，避免同时创建多个实例。</li>\n</ul>\n<h4 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>可以使用单例模式替换全局变量。</li>\n</ul>\n<h4 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>单例模式引入了许多的其他问题，比如在创建单例对象的时候需要加锁。</li>\n</ul>\n<h3 id=\"1-6-建造者模式（生成器模式）\"><a href=\"#1-6-建造者模式（生成器模式）\" class=\"headerlink\" title=\"1.6 建造者模式（生成器模式）\"></a>1.6 建造者模式（生成器模式）</h3><h4 id=\"UML图-4\"><a href=\"#UML图-4\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h4 id=\"优点-5\"><a href=\"#优点-5\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>将一个复杂对象的创建过程封装起来</li>\n<li>允许对象通过多个步骤来创建，并且可以改变过程。（这和只有一个步骤的工厂模式不同）</li>\n<li>向客户隐藏产品内部的表现。</li>\n<li>产品的实现可以被替换，因为客户只看到一个抽象的接口。</li>\n</ol>\n<h4 id=\"缺点-5\"><a href=\"#缺点-5\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>与工厂模式相比，采用生成器模式创建对象需要具备更多的领域知识。</li>\n</ol>\n<h4 id=\"用途-1\"><a href=\"#用途-1\" class=\"headerlink\" title=\"用途\"></a>用途</h4><ol>\n<li>经常被用来创建组合结构。</li>\n</ol>\n<h2 id=\"2-行为型模式\"><a href=\"#2-行为型模式\" class=\"headerlink\" title=\"2. 行为型模式\"></a>2. 行为型模式</h2><h3 id=\"2-1-观察者模式（发布-订阅模式）\"><a href=\"#2-1-观察者模式（发布-订阅模式）\" class=\"headerlink\" title=\"2.1. 观察者模式（发布-订阅模式）\"></a>2.1. 观察者模式（发布-订阅模式）</h3><h4 id=\"UML图：-1\"><a href=\"#UML图：-1\" class=\"headerlink\" title=\"UML图：\"></a>UML图：</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<h4 id=\"优点-6\"><a href=\"#优点-6\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>让主题和观察者之间松耦合。它们之间依然可以交互，但是不太清楚彼此的细节，使互相的依赖降到了最低。</li>\n</ol>\n<h4 id=\"缺点-6\"><a href=\"#缺点-6\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><h3 id=\"2-2-模版方法模式\"><a href=\"#2-2-模版方法模式\" class=\"headerlink\" title=\"2.2 模版方法模式\"></a>2.2 模版方法模式</h3><h4 id=\"UML图-5\"><a href=\"#UML图-5\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<p>（注：父类是抽象类）</p>\n<h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<h4 id=\"优点-7\"><a href=\"#优点-7\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>模板方法模式通过把不变的行为搬移到超类，去除子类中的重复代码来体现它的优势。即当不变的行为和可变的行为在子类中混杂在一起的时候，不变的行为会在子类中重复出现，通过模板方法模式把这些行为搬移到父类或其他的地方，可以帮助子类摆脱重复的不变行为的纠缠。</p>\n<h3 id=\"2-3-命令模式\"><a href=\"#2-3-命令模式\" class=\"headerlink\" title=\"2.3 命令模式\"></a>2.3 命令模式</h3><h4 id=\"UML图-6\"><a href=\"#UML图-6\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>\n<h4 id=\"优点-8\"><a href=\"#优点-8\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>能够容易地设计一个命令队列。</li>\n<li>在需要的情况下，可以容易地将命令记入日志。</li>\n<li>允许接受请求的一方决定是否要否决请求。</li>\n<li>可以容易地实现对请求的撤销和重做。</li>\n<li>由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。</li>\n<li>把请求一个操作的对象与知道怎么执行一个操作的对象分割开。</li>\n</ol>\n<h3 id=\"2-4-状态模式\"><a href=\"#2-4-状态模式\" class=\"headerlink\" title=\"2.4 状态模式\"></a>2.4 状态模式</h3><h4 id=\"UML图-7\"><a href=\"#UML图-7\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了这个类。<br>主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一些列类当中，可以把复杂的判断逻辑简化。</p>\n<h4 id=\"优点-9\"><a href=\"#优点-9\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>\n<h3 id=\"2-5-职责链模式\"><a href=\"#2-5-职责链模式\" class=\"headerlink\" title=\"2.5 职责链模式\"></a>2.5 职责链模式</h3><h4 id=\"UML图-8\"><a href=\"#UML图-8\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-10\"><a href=\"#定义-10\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象可以处理它为止。</p>\n<h4 id=\"用途-2\"><a href=\"#用途-2\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>经常被用在窗口系统中，处理鼠标和键盘之类的事件。</p>\n<h4 id=\"优点-10\"><a href=\"#优点-10\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>可以随时添加或修改处理一个请求的结构。增强了给对象指派职责的灵活性。</li>\n<li>将请求的发送者和接收者解耦。（状态模式两个请求之间仍然存在耦合）</li>\n<li>可以简化Client对象，因为Client对象不需要知道链的结构。</li>\n<li>通过改变指责链内的成员或调动他们的次序，允许使用者动态地新增或删除责任。</li>\n</ol>\n<h4 id=\"缺点-7\"><a href=\"#缺点-7\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>并不能保证请求一定被执行。<br>不容易观察运行时的特征，有碍于debug。</p>\n<h3 id=\"2-6-解释器模式\"><a href=\"#2-6-解释器模式\" class=\"headerlink\" title=\"2.6 解释器模式\"></a>2.6 解释器模式</h3><h4 id=\"UML图-9\"><a href=\"#UML图-9\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-11\"><a href=\"#定义-11\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>如果一种特定类型的问题发生频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<h3 id=\"2-7-中介者模式（调停者模式）\"><a href=\"#2-7-中介者模式（调停者模式）\" class=\"headerlink\" title=\"2.7 中介者模式（调停者模式）\"></a>2.7 中介者模式（调停者模式）</h3><h4 id=\"UML图-10\"><a href=\"#UML图-10\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-12\"><a href=\"#定义-12\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>用一个中介对象来封装一系列的对象交互。中介者使各个对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<h3 id=\"2-8-访问者模式\"><a href=\"#2-8-访问者模式\" class=\"headerlink\" title=\"2.8 访问者模式\"></a>2.8 访问者模式</h3><h4 id=\"UML图-11\"><a href=\"#UML图-11\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-13\"><a href=\"#定义-13\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n<h3 id=\"2-9-策略模式\"><a href=\"#2-9-策略模式\" class=\"headerlink\" title=\"2.9 策略模式\"></a>2.9 策略模式</h3><h4 id=\"UML图-12\"><a href=\"#UML图-12\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-14\"><a href=\"#定义-14\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。</p>\n<h3 id=\"2-10-备忘录模式\"><a href=\"#2-10-备忘录模式\" class=\"headerlink\" title=\"2.10 备忘录模式\"></a>2.10 备忘录模式</h3><h4 id=\"UML图-13\"><a href=\"#UML图-13\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-15\"><a href=\"#定义-15\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<h3 id=\"2-11-迭代器模式\"><a href=\"#2-11-迭代器模式\" class=\"headerlink\" title=\"2.11 迭代器模式\"></a>2.11 迭代器模式</h3><h4 id=\"UML图-14\"><a href=\"#UML图-14\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-16\"><a href=\"#定义-16\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>\n<p>该模式已经被多种语言所实现为</p>\n<h2 id=\"3-结构型模式\"><a href=\"#3-结构型模式\" class=\"headerlink\" title=\"3. 结构型模式\"></a>3. 结构型模式</h2><h3 id=\"3-1-适配器模式\"><a href=\"#3-1-适配器模式\" class=\"headerlink\" title=\"3.1 适配器模式\"></a>3.1 适配器模式</h3><h4 id=\"UML图-15\"><a href=\"#UML图-15\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-17\"><a href=\"#定义-17\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<h4 id=\"优点-11\"><a href=\"#优点-11\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h3 id=\"3-2-桥接模式\"><a href=\"#3-2-桥接模式\" class=\"headerlink\" title=\"3.2 桥接模式\"></a>3.2 桥接模式</h3><h4 id=\"UML图-16\"><a href=\"#UML图-16\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-18\"><a href=\"#定义-18\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Bridge，将抽象部分与它的实现部分分离，使他们都可以独立地变化。</p>\n<ul>\n<li>补充理解1：实现的方式有多种。桥接模式的核心意图就是把这些实现独立出来，让它们各自地变化。这就使得每种实现的变化不会影响其他实现，从而达到应对变化的目的。</li>\n<li>补充理解2：实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</li>\n</ul>\n<h3 id=\"3-3-组合模式\"><a href=\"#3-3-组合模式\" class=\"headerlink\" title=\"3.3 组合模式\"></a>3.3 组合模式</h3><h4 id=\"UML图-17\"><a href=\"#UML图-17\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><h5 id=\"透明模式\"><a href=\"#透明模式\" class=\"headerlink\" title=\"透明模式\"></a>透明模式</h5><p><img src=\"http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E9%80%8F%E6%98%8E%E6%A8%A1%E5%BC%8F%29.jpg\" alt=\"image\"></p>\n<h5 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h5><p><img src=\"http://cdn.ewinds.pw/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%28%E5%AE%89%E5%85%A8%E6%96%B9%E5%BC%8F%29.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-19\"><a href=\"#定义-19\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将对象组合成树形结构，以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<ul>\n<li>透明方式：Componet中声明所有用来管理子对象的方法。</li>\n<li>安全方式：Componet接口中不声明管理子对象的方法，而是在Composite中声明所有用来管理子对象的方法。</li>\n</ul>\n<h3 id=\"3-4-装饰模式\"><a href=\"#3-4-装饰模式\" class=\"headerlink\" title=\"3.4 装饰模式\"></a>3.4 装饰模式</h3><h4 id=\"UML图-18\"><a href=\"#UML图-18\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-20\"><a href=\"#定义-20\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>\n<h3 id=\"3-5-外观模式\"><a href=\"#3-5-外观模式\" class=\"headerlink\" title=\"3.5 外观模式\"></a>3.5 外观模式</h3><h4 id=\"UML图-19\"><a href=\"#UML图-19\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-21\"><a href=\"#定义-21\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>外观模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>\n</ul>\n<h4 id=\"优点-12\"><a href=\"#优点-12\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>符合迪米特法则</li>\n<li>符合依赖倒置原则</li>\n</ul>\n<h3 id=\"3-6-享元模式\"><a href=\"#3-6-享元模式\" class=\"headerlink\" title=\"3.6 享元模式\"></a>3.6 享元模式</h3><h4 id=\"UML图-20\"><a href=\"#UML图-20\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-22\"><a href=\"#定义-22\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>Flyweight，运用共享技术有效地支持大量细粒度的对象。</li>\n<li>享元对象的内部状态：不会随环境改变而改变的共享部分。</li>\n<li>享元对象的外部状态：随环境改变而改变的、不可以共享的状态。 </li>\n</ul>\n<h4 id=\"优点-13\"><a href=\"#优点-13\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>节约存储空间。</p>\n<h4 id=\"缺点-8\"><a href=\"#缺点-8\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>需要将部分状态外部化，使得逻辑更为复杂，</p>\n<h3 id=\"3-7-代理模式\"><a href=\"#3-7-代理模式\" class=\"headerlink\" title=\"3.7 代理模式\"></a>3.7 代理模式</h3><h4 id=\"UML图-21\"><a href=\"#UML图-21\" class=\"headerlink\" title=\"UML图\"></a>UML图</h4><p><img src=\"http://cdn.ewinds.pw/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpg\" alt=\"image\"></p>\n<h4 id=\"定义-23\"><a href=\"#定义-23\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>为其他对象提供一种代理以控制这个对象的访问。</p>\n<h4 id=\"优点-14\"><a href=\"#优点-14\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>远程代理</li>\n<li>虚拟代理</li>\n<li>安全代理</li>\n</ul>"},{"title":"《白日梦》 北岛","date":"2018-04-23T15:40:50.000Z","description":"现代诗","thumbnail":"http://ewinds.pw/daydream_4.jpg","_content":"\n封面图来自：爆裂鼓手\n\n<!-- more-->\n\n* * *\n\n## <center>《白日梦》</center>\n\n### 1\n\n在秋天的暴行之后\n这十一月被冰霜麻醉\n展平在墙上\n影子重重叠叠\n那是骨骼石化的过程\n你没有如期归来\n我喉咙里的果核\n变成了温暖的石头\n\n我，行迹可疑\n新的季节的阅兵式\n敲打我的窗户\n住在钟里的人们\n带着摆动的心脏奔走\n我俯视时间\n不必转身\n一年的黑暗在杯中\n\n### 2\n\n音乐释放的蓝色灵魂\n在烟蒂上飘摇\n出入门窗的裂缝\n\n一个准备切开的苹果\n--那里没有核儿\n没有生长敌意的种子\n远离太阳的磁场\n玻璃房子里生长的头发\n如海藻，避开真实的\n\n风暴，我们是\n迷失在航空港里的儿童\n总想大哭一场\n\n在宽银幕般的骚动中\n收集烟尘的鼻子\n碰到一起\n说个不停，这是我\n是我\n我，我们\n\n### 3\n\n喃喃梦呓的\n书，排列在一起\n在早晨三点钟\n等待异端的火箭\n\n时间并不忧郁\n我们弃绝了山林湖泊\n集中在一起\n为什么我们在一起\n一只铁皮乌鸦\n在大理石的底座下\n那永恒的事物的焊接处\n不会断裂\n\n人们从石棺里醒来\n和我坐在一起\n我们生前与时代合影\n挂在长桌尽头\n\n### 4\n\n你没有如期归来\n而这正是离别的意义\n一次爱的旅行\n有时候就象抽烟那样\n简单\n\n地下室空守着你\n内心的白银\n水仙花在暗中灿然开放\n你听凭所有的坏天气\n发怒、哭喊\n乞求你打开窗户\n\n书页翻开\n所有的文字四散\n只留下一个数字\n--我的座位号码\n靠近窗户\n本次列车的终点是你\n\n### 5\n\n向日葵的帽子不翼而飞\n石头圆滑、可靠\n保持着本质的完整\n在没有人居住的地方\n山也变得年轻\n晚钟不必解释什么\n巨蟒在蜕皮中进化\n--绳索打结\n把鱼群悬挂在高处\n一潭死水召来无数闪电\n虎豹的斑纹渐成蓝色\n天空已被吞噬\n\n历史静默\n峭壁目送着河上\n那自源头漂流而下的孩子\n这人类的孩子\n\n### 6\n\n我需要广场\n一片空旷的广场\n放置一个碗，一把小匙\n一只风筝孤单的影子\n\n占据广场的人说\n这不可能\n\n笼中的鸟需要散步\n梦游者需要贫血的阳光\n道路撞击在一起\n需要平等的对话\n\n人的冲动压缩成\n铀，存放在可靠的地方\n\n在一家小店铺\n一张纸币，一片剃刀\n一包剧毒的杀虫剂\n诞生了\n\n### 7\n\n我死的那年十岁\n那抛向空中的球再也没\n落到地上\n你是唯一的目击者\n十岁，我知道\n然后我登上\n那辆运载野牛的火车\n被列入过期的提货单里\n供人们阅读\n\n今天早上\n一只鸟穿透我打开的报纸\n你的脸嵌在其中\n一种持久的热情\n仍在你的眼睛深处闪烁\n我将永远处于\n你所设计的阴影中\n\n### 8\n\n多少年\n多少火种的逃亡者\n使日月无光\n白马展开了长长的绷带\n木桩钉进了煤层\n渗出殷红的血\n毒蜘蛛弹拨它的琴弦\n从天而降\n开阔地，火球滚来滚去\n\n多少年\n多少河流干涸\n露出那隐秘的部分\n这是座空荡荡的博物馆\n谁置身其中\n谁就会自以为是展品\n被无形的目光注视\n如同一颗湖泊爆炸后\n飞出的沉睡千年的小虫\n\n### 9\n\n终于有一天\n谎言般无畏的人们\n从巨型收音机里走出来\n赞美着灾难\n医生举起白色的床单\n站在病树上疾呼：\n是自由，没有免疫的自由\n毒害了你们\n\n### 10\n\n手在喘息\n流苏是呻吟\n雕花的窗棂互相交错\n纸灯笼穿过游廊\n在尽头熄灭\n一支箭敲响了大门\n\n牌位接连倒下\n--连锁反应的恶梦\n子孙们\n是威严的石狮嘴里\n腐烂的牙齿\n\n当年锁住春光的庭院\n只剩下一棵树\n他们在酒后失态\n围着树跳舞\n疯狂是一种例外\n\n### 11\n\n别把你的情欲带入秋天\n这残废者的秋天\n打着响亮呼哨的秋天\n\n一只女人干燥的手\n掠过海面，却滴水未沾\n推移礁石的晚霞\n是你的情欲\n焚烧我\n\n我，心如枯井\n对海洋的渴望使我远离海洋\n走向我的开端--你\n或你的尽头--我\n\n我们终将迷失在大雾中\n互相呼唤\n在不同的地点\n成为无用的路标\n\n### 12\n\n白色的长袍飘向那\n不存在的地方\n心如夏夜里抽搐的水泵\n无端地发泄\n黄昏的晚宴结束了\n山峦散去\n蜉蝣在水上写诗\n地平线的颂歌时断时续\n影子并非一个人的历史\n戴上或摘下面具\n花朵应运而生\n谎言与悲哀不可分离\n如果没有面具\n所有钟表还有什么意义\n\n当灵魂在岩石是显出原形\n只有鸟会认出它们\n\n### 13\n\n他指银色的沼泽说\n那里发生过战争\n几棵冒烟的树在地平线飞奔\n转入地下的士兵和马\n闪着磷光，日夜\n追随着将军的铠甲\n\n而我们追随的是\n思想的流弹中\n那逃窜的自由的兽皮\n\n昔日阵亡者的头颅\n如残月升起\n越过沙沙作响的灌木丛\n以预言家的口吻说\n你们并非幸存者\n你们永无归宿\n\n新的思想呼啸而过\n击中时代的背影\n一滴苍蝇的血让我震惊\n\n### 14\n\n我注定要坐在岸边\n在一张白纸上\n期待着老年斑纹似的词\n\n出现，秩序与混乱\n蜂房酿造着不同的情欲\n九十九座红色的山峰\n\n上涨，空气稀薄\n地衣居心叵测地蔓延\n渺小，如尘世的\n\n计谋，钢筋支撑着权利\n石头也会晕眩\n这毕竟是一种可怕的\n\n高度，白纸背面\n孩子的手在玩影子游戏\n光源来自海底两条交尾的\n电鳗\n\n### 15\n\n蹲伏在瓦罐的夜\n溢出清凉的\n水，那是我们爱的源泉\n\n回忆如伤疤\n我的一生在你的脚下\n这流动的沙丘\n凝聚在你的手上\n成为一颗眩目的钻石\n\n没有床，房间\n小得使我们无法分离\n四壁薄如棉纸\n数不清的嘴巴画在墙上\n低声轮唱\n\n你没有如期归来\n我们共同啜饮的杯子\n砰然碎裂\n\n### 16\n\n矿山废弃已久\n它的金属拉成细长的线\n\n猫头鹰通体透明\n胃和神经丛掠过夜空\n\n古生物的联盟解体了\n粘合化石的工作\n\n仍在进行，生存\n永远是一种集体冒险\n\n生存永远是和春天\n在进行战争\n\n绿色的履带碾过\n阴郁的文明\n\n喷射那水银的喷泉\n金属的头改变了地貌\n\n### 17\n\n几个世纪过去了\n一日尚未开始\n冷空气触摸了我的手\n螺旋楼梯般上升\n黑与白，光线\n在房瓦的音阶上转换\n一棵枣树的安宁\n男人的喉咙成熟了\n\n动物园的困兽\n被合进一本书\n钢鞭飞舞\n悸动着的斑斓色彩\n隔着漫长的岁月\n凄厉地叫喊\n一张导游图把我引入\n城中之星星狡黠而凶狠\n象某一事物的核心\n\n### 18\n\n我总是沿着那条街的\n孤独的意志漫步\n喔，我的城市\n在玻璃的坚冰上滑行\n\n我的城市我的故事\n我的水龙头我积怨\n我的鹦鹉我的\n保持平衡的睡眠\n\n罂粟花般芳香的少女\n从超级市场飘过\n带着折刀般表情的人们\n共饮冬日的寒光\n\n诗，就象阳台一样\n无情地折磨着我\n被烟尘粉刷的墙\n总在意料之中\n\n### 19\n\n当你转身的时候\n花岗石崩裂成细细的流沙\n你用陌生的语调\n对空旷说话，不真实\n如同你的笑容\n\n深深植入昨天的苦根\n是最黑暗处的闪电\n击中了我们想象的巢穴\n从流沙的瀑布中\n我们听见了水晶撞击的音乐\n\n一次小小的外科手术\n我们挖掘燧石的雪地上\n留下了麻雀的爪印\n一辆冬天疯狂的马车\n穿过夏日的火焰\n\n我们安然无恙\n四季的美景印在你的衣服上\n\n### 20\n\n放牧是一种观点的陈述\n热病使羊群膨胀\n象一个个气球上升\n卡在天蝎星座中\n热风卷走了我的屋顶\n在四壁之内\n我静观无字的天空\n文化是一种共生现象\n包括羊的价值\n狼的原则\n钟罩里一无所有\n在我们的视野里\n只有一条干涸的河道\n几缕笔直的烟\n古代圣贤们\n无限寂寞\n垂钓着他们的鱼\n\n### 21\n\n诡秘的豆荚有五只眼睛\n它们不愿看见白昼\n只在黑暗里倾听\n\n一种颜色是一个孩子\n诞生时的啼哭\n\n宴会上桌布洁白\n杯中有死亡的味道\n--悼词库挥发的沉闷气息\n\n传统是一张航空照片\n山河缩小成桦木的纹理\n\n总是人，俯首听命于\n说教、仿效、争斗\n和他们的尊严\n\n寻找激情的旅行者\n穿过候鸟荒凉的栖息地\n\n石膏像打开窗户\n艺术家从背后\n用工具狠狠地敲碎它们\n\n### 22\n\n弱音器弄哑了的小号\n忽然响亮地哭喊\n那伟大悲剧的导演\n正悄悄地死去\n两只装着滑轮的狮子\n仍在固定的轨道上\n东奔西撞\n\n曙光瘫痪在大街上\n很多地址和名字和心事\n在邮筒在夜里避雨\n货车场的鸭子喧哗\n窗户打着哈欠\n一个来苏水味的早晨\n值班医生正填写着死亡报告\n\n悲剧的伟大意义呵\n日常生活的琐碎细节\n\n### 23\n\n在昼与夜之间出现了裂缝\n\n语言突然变得陈旧\n象第一场雪\n那些用黑布蒙面的证人\n紧紧包围了你\n你把一根根松枝插在地上\n默默点燃它们\n\n那是一种祭奠的仪式\n从死亡的山冈上\n我居高临下\n你是谁\n要和我交换什么\n白鹤展开一张飘动的纸\n上面写着你的回答\n而我一无所知\n\n你没有如期归来\n","source":"_posts/诗/daydream.md","raw":"---\ntitle: 《白日梦》 北岛\ndate: 2018-04-23 23:40:50 \ncategories: 现代诗\ntags: [诗歌] \ndescription: 现代诗\nthumbnail: http://ewinds.pw/daydream_4.jpg\n---\n\n封面图来自：爆裂鼓手\n\n<!-- more-->\n\n* * *\n\n## <center>《白日梦》</center>\n\n### 1\n\n在秋天的暴行之后\n这十一月被冰霜麻醉\n展平在墙上\n影子重重叠叠\n那是骨骼石化的过程\n你没有如期归来\n我喉咙里的果核\n变成了温暖的石头\n\n我，行迹可疑\n新的季节的阅兵式\n敲打我的窗户\n住在钟里的人们\n带着摆动的心脏奔走\n我俯视时间\n不必转身\n一年的黑暗在杯中\n\n### 2\n\n音乐释放的蓝色灵魂\n在烟蒂上飘摇\n出入门窗的裂缝\n\n一个准备切开的苹果\n--那里没有核儿\n没有生长敌意的种子\n远离太阳的磁场\n玻璃房子里生长的头发\n如海藻，避开真实的\n\n风暴，我们是\n迷失在航空港里的儿童\n总想大哭一场\n\n在宽银幕般的骚动中\n收集烟尘的鼻子\n碰到一起\n说个不停，这是我\n是我\n我，我们\n\n### 3\n\n喃喃梦呓的\n书，排列在一起\n在早晨三点钟\n等待异端的火箭\n\n时间并不忧郁\n我们弃绝了山林湖泊\n集中在一起\n为什么我们在一起\n一只铁皮乌鸦\n在大理石的底座下\n那永恒的事物的焊接处\n不会断裂\n\n人们从石棺里醒来\n和我坐在一起\n我们生前与时代合影\n挂在长桌尽头\n\n### 4\n\n你没有如期归来\n而这正是离别的意义\n一次爱的旅行\n有时候就象抽烟那样\n简单\n\n地下室空守着你\n内心的白银\n水仙花在暗中灿然开放\n你听凭所有的坏天气\n发怒、哭喊\n乞求你打开窗户\n\n书页翻开\n所有的文字四散\n只留下一个数字\n--我的座位号码\n靠近窗户\n本次列车的终点是你\n\n### 5\n\n向日葵的帽子不翼而飞\n石头圆滑、可靠\n保持着本质的完整\n在没有人居住的地方\n山也变得年轻\n晚钟不必解释什么\n巨蟒在蜕皮中进化\n--绳索打结\n把鱼群悬挂在高处\n一潭死水召来无数闪电\n虎豹的斑纹渐成蓝色\n天空已被吞噬\n\n历史静默\n峭壁目送着河上\n那自源头漂流而下的孩子\n这人类的孩子\n\n### 6\n\n我需要广场\n一片空旷的广场\n放置一个碗，一把小匙\n一只风筝孤单的影子\n\n占据广场的人说\n这不可能\n\n笼中的鸟需要散步\n梦游者需要贫血的阳光\n道路撞击在一起\n需要平等的对话\n\n人的冲动压缩成\n铀，存放在可靠的地方\n\n在一家小店铺\n一张纸币，一片剃刀\n一包剧毒的杀虫剂\n诞生了\n\n### 7\n\n我死的那年十岁\n那抛向空中的球再也没\n落到地上\n你是唯一的目击者\n十岁，我知道\n然后我登上\n那辆运载野牛的火车\n被列入过期的提货单里\n供人们阅读\n\n今天早上\n一只鸟穿透我打开的报纸\n你的脸嵌在其中\n一种持久的热情\n仍在你的眼睛深处闪烁\n我将永远处于\n你所设计的阴影中\n\n### 8\n\n多少年\n多少火种的逃亡者\n使日月无光\n白马展开了长长的绷带\n木桩钉进了煤层\n渗出殷红的血\n毒蜘蛛弹拨它的琴弦\n从天而降\n开阔地，火球滚来滚去\n\n多少年\n多少河流干涸\n露出那隐秘的部分\n这是座空荡荡的博物馆\n谁置身其中\n谁就会自以为是展品\n被无形的目光注视\n如同一颗湖泊爆炸后\n飞出的沉睡千年的小虫\n\n### 9\n\n终于有一天\n谎言般无畏的人们\n从巨型收音机里走出来\n赞美着灾难\n医生举起白色的床单\n站在病树上疾呼：\n是自由，没有免疫的自由\n毒害了你们\n\n### 10\n\n手在喘息\n流苏是呻吟\n雕花的窗棂互相交错\n纸灯笼穿过游廊\n在尽头熄灭\n一支箭敲响了大门\n\n牌位接连倒下\n--连锁反应的恶梦\n子孙们\n是威严的石狮嘴里\n腐烂的牙齿\n\n当年锁住春光的庭院\n只剩下一棵树\n他们在酒后失态\n围着树跳舞\n疯狂是一种例外\n\n### 11\n\n别把你的情欲带入秋天\n这残废者的秋天\n打着响亮呼哨的秋天\n\n一只女人干燥的手\n掠过海面，却滴水未沾\n推移礁石的晚霞\n是你的情欲\n焚烧我\n\n我，心如枯井\n对海洋的渴望使我远离海洋\n走向我的开端--你\n或你的尽头--我\n\n我们终将迷失在大雾中\n互相呼唤\n在不同的地点\n成为无用的路标\n\n### 12\n\n白色的长袍飘向那\n不存在的地方\n心如夏夜里抽搐的水泵\n无端地发泄\n黄昏的晚宴结束了\n山峦散去\n蜉蝣在水上写诗\n地平线的颂歌时断时续\n影子并非一个人的历史\n戴上或摘下面具\n花朵应运而生\n谎言与悲哀不可分离\n如果没有面具\n所有钟表还有什么意义\n\n当灵魂在岩石是显出原形\n只有鸟会认出它们\n\n### 13\n\n他指银色的沼泽说\n那里发生过战争\n几棵冒烟的树在地平线飞奔\n转入地下的士兵和马\n闪着磷光，日夜\n追随着将军的铠甲\n\n而我们追随的是\n思想的流弹中\n那逃窜的自由的兽皮\n\n昔日阵亡者的头颅\n如残月升起\n越过沙沙作响的灌木丛\n以预言家的口吻说\n你们并非幸存者\n你们永无归宿\n\n新的思想呼啸而过\n击中时代的背影\n一滴苍蝇的血让我震惊\n\n### 14\n\n我注定要坐在岸边\n在一张白纸上\n期待着老年斑纹似的词\n\n出现，秩序与混乱\n蜂房酿造着不同的情欲\n九十九座红色的山峰\n\n上涨，空气稀薄\n地衣居心叵测地蔓延\n渺小，如尘世的\n\n计谋，钢筋支撑着权利\n石头也会晕眩\n这毕竟是一种可怕的\n\n高度，白纸背面\n孩子的手在玩影子游戏\n光源来自海底两条交尾的\n电鳗\n\n### 15\n\n蹲伏在瓦罐的夜\n溢出清凉的\n水，那是我们爱的源泉\n\n回忆如伤疤\n我的一生在你的脚下\n这流动的沙丘\n凝聚在你的手上\n成为一颗眩目的钻石\n\n没有床，房间\n小得使我们无法分离\n四壁薄如棉纸\n数不清的嘴巴画在墙上\n低声轮唱\n\n你没有如期归来\n我们共同啜饮的杯子\n砰然碎裂\n\n### 16\n\n矿山废弃已久\n它的金属拉成细长的线\n\n猫头鹰通体透明\n胃和神经丛掠过夜空\n\n古生物的联盟解体了\n粘合化石的工作\n\n仍在进行，生存\n永远是一种集体冒险\n\n生存永远是和春天\n在进行战争\n\n绿色的履带碾过\n阴郁的文明\n\n喷射那水银的喷泉\n金属的头改变了地貌\n\n### 17\n\n几个世纪过去了\n一日尚未开始\n冷空气触摸了我的手\n螺旋楼梯般上升\n黑与白，光线\n在房瓦的音阶上转换\n一棵枣树的安宁\n男人的喉咙成熟了\n\n动物园的困兽\n被合进一本书\n钢鞭飞舞\n悸动着的斑斓色彩\n隔着漫长的岁月\n凄厉地叫喊\n一张导游图把我引入\n城中之星星狡黠而凶狠\n象某一事物的核心\n\n### 18\n\n我总是沿着那条街的\n孤独的意志漫步\n喔，我的城市\n在玻璃的坚冰上滑行\n\n我的城市我的故事\n我的水龙头我积怨\n我的鹦鹉我的\n保持平衡的睡眠\n\n罂粟花般芳香的少女\n从超级市场飘过\n带着折刀般表情的人们\n共饮冬日的寒光\n\n诗，就象阳台一样\n无情地折磨着我\n被烟尘粉刷的墙\n总在意料之中\n\n### 19\n\n当你转身的时候\n花岗石崩裂成细细的流沙\n你用陌生的语调\n对空旷说话，不真实\n如同你的笑容\n\n深深植入昨天的苦根\n是最黑暗处的闪电\n击中了我们想象的巢穴\n从流沙的瀑布中\n我们听见了水晶撞击的音乐\n\n一次小小的外科手术\n我们挖掘燧石的雪地上\n留下了麻雀的爪印\n一辆冬天疯狂的马车\n穿过夏日的火焰\n\n我们安然无恙\n四季的美景印在你的衣服上\n\n### 20\n\n放牧是一种观点的陈述\n热病使羊群膨胀\n象一个个气球上升\n卡在天蝎星座中\n热风卷走了我的屋顶\n在四壁之内\n我静观无字的天空\n文化是一种共生现象\n包括羊的价值\n狼的原则\n钟罩里一无所有\n在我们的视野里\n只有一条干涸的河道\n几缕笔直的烟\n古代圣贤们\n无限寂寞\n垂钓着他们的鱼\n\n### 21\n\n诡秘的豆荚有五只眼睛\n它们不愿看见白昼\n只在黑暗里倾听\n\n一种颜色是一个孩子\n诞生时的啼哭\n\n宴会上桌布洁白\n杯中有死亡的味道\n--悼词库挥发的沉闷气息\n\n传统是一张航空照片\n山河缩小成桦木的纹理\n\n总是人，俯首听命于\n说教、仿效、争斗\n和他们的尊严\n\n寻找激情的旅行者\n穿过候鸟荒凉的栖息地\n\n石膏像打开窗户\n艺术家从背后\n用工具狠狠地敲碎它们\n\n### 22\n\n弱音器弄哑了的小号\n忽然响亮地哭喊\n那伟大悲剧的导演\n正悄悄地死去\n两只装着滑轮的狮子\n仍在固定的轨道上\n东奔西撞\n\n曙光瘫痪在大街上\n很多地址和名字和心事\n在邮筒在夜里避雨\n货车场的鸭子喧哗\n窗户打着哈欠\n一个来苏水味的早晨\n值班医生正填写着死亡报告\n\n悲剧的伟大意义呵\n日常生活的琐碎细节\n\n### 23\n\n在昼与夜之间出现了裂缝\n\n语言突然变得陈旧\n象第一场雪\n那些用黑布蒙面的证人\n紧紧包围了你\n你把一根根松枝插在地上\n默默点燃它们\n\n那是一种祭奠的仪式\n从死亡的山冈上\n我居高临下\n你是谁\n要和我交换什么\n白鹤展开一张飘动的纸\n上面写着你的回答\n而我一无所知\n\n你没有如期归来\n","slug":"诗/daydream","published":1,"updated":"2020-08-17T09:14:23.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdych0km001xykrvwy0nwjof","content":"<p>封面图来自：爆裂鼓手</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"《白日梦》\"><a href=\"#《白日梦》\" class=\"headerlink\" title=\"《白日梦》\"></a><center>《白日梦》</center></h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>在秋天的暴行之后<br>这十一月被冰霜麻醉<br>展平在墙上<br>影子重重叠叠<br>那是骨骼石化的过程<br>你没有如期归来<br>我喉咙里的果核<br>变成了温暖的石头</p>\n<p>我，行迹可疑<br>新的季节的阅兵式<br>敲打我的窗户<br>住在钟里的人们<br>带着摆动的心脏奔走<br>我俯视时间<br>不必转身<br>一年的黑暗在杯中</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>音乐释放的蓝色灵魂<br>在烟蒂上飘摇<br>出入门窗的裂缝</p>\n<p>一个准备切开的苹果<br>–那里没有核儿<br>没有生长敌意的种子<br>远离太阳的磁场<br>玻璃房子里生长的头发<br>如海藻，避开真实的</p>\n<p>风暴，我们是<br>迷失在航空港里的儿童<br>总想大哭一场</p>\n<p>在宽银幕般的骚动中<br>收集烟尘的鼻子<br>碰到一起<br>说个不停，这是我<br>是我<br>我，我们</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p>喃喃梦呓的<br>书，排列在一起<br>在早晨三点钟<br>等待异端的火箭</p>\n<p>时间并不忧郁<br>我们弃绝了山林湖泊<br>集中在一起<br>为什么我们在一起<br>一只铁皮乌鸦<br>在大理石的底座下<br>那永恒的事物的焊接处<br>不会断裂</p>\n<p>人们从石棺里醒来<br>和我坐在一起<br>我们生前与时代合影<br>挂在长桌尽头</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p>你没有如期归来<br>而这正是离别的意义<br>一次爱的旅行<br>有时候就象抽烟那样<br>简单</p>\n<p>地下室空守着你<br>内心的白银<br>水仙花在暗中灿然开放<br>你听凭所有的坏天气<br>发怒、哭喊<br>乞求你打开窗户</p>\n<p>书页翻开<br>所有的文字四散<br>只留下一个数字<br>–我的座位号码<br>靠近窗户<br>本次列车的终点是你</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h3><p>向日葵的帽子不翼而飞<br>石头圆滑、可靠<br>保持着本质的完整<br>在没有人居住的地方<br>山也变得年轻<br>晚钟不必解释什么<br>巨蟒在蜕皮中进化<br>–绳索打结<br>把鱼群悬挂在高处<br>一潭死水召来无数闪电<br>虎豹的斑纹渐成蓝色<br>天空已被吞噬</p>\n<p>历史静默<br>峭壁目送着河上<br>那自源头漂流而下的孩子<br>这人类的孩子</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h3><p>我需要广场<br>一片空旷的广场<br>放置一个碗，一把小匙<br>一只风筝孤单的影子</p>\n<p>占据广场的人说<br>这不可能</p>\n<p>笼中的鸟需要散步<br>梦游者需要贫血的阳光<br>道路撞击在一起<br>需要平等的对话</p>\n<p>人的冲动压缩成<br>铀，存放在可靠的地方</p>\n<p>在一家小店铺<br>一张纸币，一片剃刀<br>一包剧毒的杀虫剂<br>诞生了</p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h3><p>我死的那年十岁<br>那抛向空中的球再也没<br>落到地上<br>你是唯一的目击者<br>十岁，我知道<br>然后我登上<br>那辆运载野牛的火车<br>被列入过期的提货单里<br>供人们阅读</p>\n<p>今天早上<br>一只鸟穿透我打开的报纸<br>你的脸嵌在其中<br>一种持久的热情<br>仍在你的眼睛深处闪烁<br>我将永远处于<br>你所设计的阴影中</p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h3><p>多少年<br>多少火种的逃亡者<br>使日月无光<br>白马展开了长长的绷带<br>木桩钉进了煤层<br>渗出殷红的血<br>毒蜘蛛弹拨它的琴弦<br>从天而降<br>开阔地，火球滚来滚去</p>\n<p>多少年<br>多少河流干涸<br>露出那隐秘的部分<br>这是座空荡荡的博物馆<br>谁置身其中<br>谁就会自以为是展品<br>被无形的目光注视<br>如同一颗湖泊爆炸后<br>飞出的沉睡千年的小虫</p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><p>终于有一天<br>谎言般无畏的人们<br>从巨型收音机里走出来<br>赞美着灾难<br>医生举起白色的床单<br>站在病树上疾呼：<br>是自由，没有免疫的自由<br>毒害了你们</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10\"></a>10</h3><p>手在喘息<br>流苏是呻吟<br>雕花的窗棂互相交错<br>纸灯笼穿过游廊<br>在尽头熄灭<br>一支箭敲响了大门</p>\n<p>牌位接连倒下<br>–连锁反应的恶梦<br>子孙们<br>是威严的石狮嘴里<br>腐烂的牙齿</p>\n<p>当年锁住春光的庭院<br>只剩下一棵树<br>他们在酒后失态<br>围着树跳舞<br>疯狂是一种例外</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11\"></a>11</h3><p>别把你的情欲带入秋天<br>这残废者的秋天<br>打着响亮呼哨的秋天</p>\n<p>一只女人干燥的手<br>掠过海面，却滴水未沾<br>推移礁石的晚霞<br>是你的情欲<br>焚烧我</p>\n<p>我，心如枯井<br>对海洋的渴望使我远离海洋<br>走向我的开端–你<br>或你的尽头–我</p>\n<p>我们终将迷失在大雾中<br>互相呼唤<br>在不同的地点<br>成为无用的路标</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12\"></a>12</h3><p>白色的长袍飘向那<br>不存在的地方<br>心如夏夜里抽搐的水泵<br>无端地发泄<br>黄昏的晚宴结束了<br>山峦散去<br>蜉蝣在水上写诗<br>地平线的颂歌时断时续<br>影子并非一个人的历史<br>戴上或摘下面具<br>花朵应运而生<br>谎言与悲哀不可分离<br>如果没有面具<br>所有钟表还有什么意义</p>\n<p>当灵魂在岩石是显出原形<br>只有鸟会认出它们</p>\n<h3 id=\"13\"><a href=\"#13\" class=\"headerlink\" title=\"13\"></a>13</h3><p>他指银色的沼泽说<br>那里发生过战争<br>几棵冒烟的树在地平线飞奔<br>转入地下的士兵和马<br>闪着磷光，日夜<br>追随着将军的铠甲</p>\n<p>而我们追随的是<br>思想的流弹中<br>那逃窜的自由的兽皮</p>\n<p>昔日阵亡者的头颅<br>如残月升起<br>越过沙沙作响的灌木丛<br>以预言家的口吻说<br>你们并非幸存者<br>你们永无归宿</p>\n<p>新的思想呼啸而过<br>击中时代的背影<br>一滴苍蝇的血让我震惊</p>\n<h3 id=\"14\"><a href=\"#14\" class=\"headerlink\" title=\"14\"></a>14</h3><p>我注定要坐在岸边<br>在一张白纸上<br>期待着老年斑纹似的词</p>\n<p>出现，秩序与混乱<br>蜂房酿造着不同的情欲<br>九十九座红色的山峰</p>\n<p>上涨，空气稀薄<br>地衣居心叵测地蔓延<br>渺小，如尘世的</p>\n<p>计谋，钢筋支撑着权利<br>石头也会晕眩<br>这毕竟是一种可怕的</p>\n<p>高度，白纸背面<br>孩子的手在玩影子游戏<br>光源来自海底两条交尾的<br>电鳗</p>\n<h3 id=\"15\"><a href=\"#15\" class=\"headerlink\" title=\"15\"></a>15</h3><p>蹲伏在瓦罐的夜<br>溢出清凉的<br>水，那是我们爱的源泉</p>\n<p>回忆如伤疤<br>我的一生在你的脚下<br>这流动的沙丘<br>凝聚在你的手上<br>成为一颗眩目的钻石</p>\n<p>没有床，房间<br>小得使我们无法分离<br>四壁薄如棉纸<br>数不清的嘴巴画在墙上<br>低声轮唱</p>\n<p>你没有如期归来<br>我们共同啜饮的杯子<br>砰然碎裂</p>\n<h3 id=\"16\"><a href=\"#16\" class=\"headerlink\" title=\"16\"></a>16</h3><p>矿山废弃已久<br>它的金属拉成细长的线</p>\n<p>猫头鹰通体透明<br>胃和神经丛掠过夜空</p>\n<p>古生物的联盟解体了<br>粘合化石的工作</p>\n<p>仍在进行，生存<br>永远是一种集体冒险</p>\n<p>生存永远是和春天<br>在进行战争</p>\n<p>绿色的履带碾过<br>阴郁的文明</p>\n<p>喷射那水银的喷泉<br>金属的头改变了地貌</p>\n<h3 id=\"17\"><a href=\"#17\" class=\"headerlink\" title=\"17\"></a>17</h3><p>几个世纪过去了<br>一日尚未开始<br>冷空气触摸了我的手<br>螺旋楼梯般上升<br>黑与白，光线<br>在房瓦的音阶上转换<br>一棵枣树的安宁<br>男人的喉咙成熟了</p>\n<p>动物园的困兽<br>被合进一本书<br>钢鞭飞舞<br>悸动着的斑斓色彩<br>隔着漫长的岁月<br>凄厉地叫喊<br>一张导游图把我引入<br>城中之星星狡黠而凶狠<br>象某一事物的核心</p>\n<h3 id=\"18\"><a href=\"#18\" class=\"headerlink\" title=\"18\"></a>18</h3><p>我总是沿着那条街的<br>孤独的意志漫步<br>喔，我的城市<br>在玻璃的坚冰上滑行</p>\n<p>我的城市我的故事<br>我的水龙头我积怨<br>我的鹦鹉我的<br>保持平衡的睡眠</p>\n<p>罂粟花般芳香的少女<br>从超级市场飘过<br>带着折刀般表情的人们<br>共饮冬日的寒光</p>\n<p>诗，就象阳台一样<br>无情地折磨着我<br>被烟尘粉刷的墙<br>总在意料之中</p>\n<h3 id=\"19\"><a href=\"#19\" class=\"headerlink\" title=\"19\"></a>19</h3><p>当你转身的时候<br>花岗石崩裂成细细的流沙<br>你用陌生的语调<br>对空旷说话，不真实<br>如同你的笑容</p>\n<p>深深植入昨天的苦根<br>是最黑暗处的闪电<br>击中了我们想象的巢穴<br>从流沙的瀑布中<br>我们听见了水晶撞击的音乐</p>\n<p>一次小小的外科手术<br>我们挖掘燧石的雪地上<br>留下了麻雀的爪印<br>一辆冬天疯狂的马车<br>穿过夏日的火焰</p>\n<p>我们安然无恙<br>四季的美景印在你的衣服上</p>\n<h3 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20\"></a>20</h3><p>放牧是一种观点的陈述<br>热病使羊群膨胀<br>象一个个气球上升<br>卡在天蝎星座中<br>热风卷走了我的屋顶<br>在四壁之内<br>我静观无字的天空<br>文化是一种共生现象<br>包括羊的价值<br>狼的原则<br>钟罩里一无所有<br>在我们的视野里<br>只有一条干涸的河道<br>几缕笔直的烟<br>古代圣贤们<br>无限寂寞<br>垂钓着他们的鱼</p>\n<h3 id=\"21\"><a href=\"#21\" class=\"headerlink\" title=\"21\"></a>21</h3><p>诡秘的豆荚有五只眼睛<br>它们不愿看见白昼<br>只在黑暗里倾听</p>\n<p>一种颜色是一个孩子<br>诞生时的啼哭</p>\n<p>宴会上桌布洁白<br>杯中有死亡的味道<br>–悼词库挥发的沉闷气息</p>\n<p>传统是一张航空照片<br>山河缩小成桦木的纹理</p>\n<p>总是人，俯首听命于<br>说教、仿效、争斗<br>和他们的尊严</p>\n<p>寻找激情的旅行者<br>穿过候鸟荒凉的栖息地</p>\n<p>石膏像打开窗户<br>艺术家从背后<br>用工具狠狠地敲碎它们</p>\n<h3 id=\"22\"><a href=\"#22\" class=\"headerlink\" title=\"22\"></a>22</h3><p>弱音器弄哑了的小号<br>忽然响亮地哭喊<br>那伟大悲剧的导演<br>正悄悄地死去<br>两只装着滑轮的狮子<br>仍在固定的轨道上<br>东奔西撞</p>\n<p>曙光瘫痪在大街上<br>很多地址和名字和心事<br>在邮筒在夜里避雨<br>货车场的鸭子喧哗<br>窗户打着哈欠<br>一个来苏水味的早晨<br>值班医生正填写着死亡报告</p>\n<p>悲剧的伟大意义呵<br>日常生活的琐碎细节</p>\n<h3 id=\"23\"><a href=\"#23\" class=\"headerlink\" title=\"23\"></a>23</h3><p>在昼与夜之间出现了裂缝</p>\n<p>语言突然变得陈旧<br>象第一场雪<br>那些用黑布蒙面的证人<br>紧紧包围了你<br>你把一根根松枝插在地上<br>默默点燃它们</p>\n<p>那是一种祭奠的仪式<br>从死亡的山冈上<br>我居高临下<br>你是谁<br>要和我交换什么<br>白鹤展开一张飘动的纸<br>上面写着你的回答<br>而我一无所知</p>\n<p>你没有如期归来</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"<p>封面图来自：爆裂鼓手</p>","more":"<hr>\n<h2 id=\"《白日梦》\"><a href=\"#《白日梦》\" class=\"headerlink\" title=\"《白日梦》\"></a><center>《白日梦》</center></h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>在秋天的暴行之后<br>这十一月被冰霜麻醉<br>展平在墙上<br>影子重重叠叠<br>那是骨骼石化的过程<br>你没有如期归来<br>我喉咙里的果核<br>变成了温暖的石头</p>\n<p>我，行迹可疑<br>新的季节的阅兵式<br>敲打我的窗户<br>住在钟里的人们<br>带着摆动的心脏奔走<br>我俯视时间<br>不必转身<br>一年的黑暗在杯中</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>音乐释放的蓝色灵魂<br>在烟蒂上飘摇<br>出入门窗的裂缝</p>\n<p>一个准备切开的苹果<br>–那里没有核儿<br>没有生长敌意的种子<br>远离太阳的磁场<br>玻璃房子里生长的头发<br>如海藻，避开真实的</p>\n<p>风暴，我们是<br>迷失在航空港里的儿童<br>总想大哭一场</p>\n<p>在宽银幕般的骚动中<br>收集烟尘的鼻子<br>碰到一起<br>说个不停，这是我<br>是我<br>我，我们</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p>喃喃梦呓的<br>书，排列在一起<br>在早晨三点钟<br>等待异端的火箭</p>\n<p>时间并不忧郁<br>我们弃绝了山林湖泊<br>集中在一起<br>为什么我们在一起<br>一只铁皮乌鸦<br>在大理石的底座下<br>那永恒的事物的焊接处<br>不会断裂</p>\n<p>人们从石棺里醒来<br>和我坐在一起<br>我们生前与时代合影<br>挂在长桌尽头</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p>你没有如期归来<br>而这正是离别的意义<br>一次爱的旅行<br>有时候就象抽烟那样<br>简单</p>\n<p>地下室空守着你<br>内心的白银<br>水仙花在暗中灿然开放<br>你听凭所有的坏天气<br>发怒、哭喊<br>乞求你打开窗户</p>\n<p>书页翻开<br>所有的文字四散<br>只留下一个数字<br>–我的座位号码<br>靠近窗户<br>本次列车的终点是你</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h3><p>向日葵的帽子不翼而飞<br>石头圆滑、可靠<br>保持着本质的完整<br>在没有人居住的地方<br>山也变得年轻<br>晚钟不必解释什么<br>巨蟒在蜕皮中进化<br>–绳索打结<br>把鱼群悬挂在高处<br>一潭死水召来无数闪电<br>虎豹的斑纹渐成蓝色<br>天空已被吞噬</p>\n<p>历史静默<br>峭壁目送着河上<br>那自源头漂流而下的孩子<br>这人类的孩子</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h3><p>我需要广场<br>一片空旷的广场<br>放置一个碗，一把小匙<br>一只风筝孤单的影子</p>\n<p>占据广场的人说<br>这不可能</p>\n<p>笼中的鸟需要散步<br>梦游者需要贫血的阳光<br>道路撞击在一起<br>需要平等的对话</p>\n<p>人的冲动压缩成<br>铀，存放在可靠的地方</p>\n<p>在一家小店铺<br>一张纸币，一片剃刀<br>一包剧毒的杀虫剂<br>诞生了</p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h3><p>我死的那年十岁<br>那抛向空中的球再也没<br>落到地上<br>你是唯一的目击者<br>十岁，我知道<br>然后我登上<br>那辆运载野牛的火车<br>被列入过期的提货单里<br>供人们阅读</p>\n<p>今天早上<br>一只鸟穿透我打开的报纸<br>你的脸嵌在其中<br>一种持久的热情<br>仍在你的眼睛深处闪烁<br>我将永远处于<br>你所设计的阴影中</p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h3><p>多少年<br>多少火种的逃亡者<br>使日月无光<br>白马展开了长长的绷带<br>木桩钉进了煤层<br>渗出殷红的血<br>毒蜘蛛弹拨它的琴弦<br>从天而降<br>开阔地，火球滚来滚去</p>\n<p>多少年<br>多少河流干涸<br>露出那隐秘的部分<br>这是座空荡荡的博物馆<br>谁置身其中<br>谁就会自以为是展品<br>被无形的目光注视<br>如同一颗湖泊爆炸后<br>飞出的沉睡千年的小虫</p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><p>终于有一天<br>谎言般无畏的人们<br>从巨型收音机里走出来<br>赞美着灾难<br>医生举起白色的床单<br>站在病树上疾呼：<br>是自由，没有免疫的自由<br>毒害了你们</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10\"></a>10</h3><p>手在喘息<br>流苏是呻吟<br>雕花的窗棂互相交错<br>纸灯笼穿过游廊<br>在尽头熄灭<br>一支箭敲响了大门</p>\n<p>牌位接连倒下<br>–连锁反应的恶梦<br>子孙们<br>是威严的石狮嘴里<br>腐烂的牙齿</p>\n<p>当年锁住春光的庭院<br>只剩下一棵树<br>他们在酒后失态<br>围着树跳舞<br>疯狂是一种例外</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11\"></a>11</h3><p>别把你的情欲带入秋天<br>这残废者的秋天<br>打着响亮呼哨的秋天</p>\n<p>一只女人干燥的手<br>掠过海面，却滴水未沾<br>推移礁石的晚霞<br>是你的情欲<br>焚烧我</p>\n<p>我，心如枯井<br>对海洋的渴望使我远离海洋<br>走向我的开端–你<br>或你的尽头–我</p>\n<p>我们终将迷失在大雾中<br>互相呼唤<br>在不同的地点<br>成为无用的路标</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12\"></a>12</h3><p>白色的长袍飘向那<br>不存在的地方<br>心如夏夜里抽搐的水泵<br>无端地发泄<br>黄昏的晚宴结束了<br>山峦散去<br>蜉蝣在水上写诗<br>地平线的颂歌时断时续<br>影子并非一个人的历史<br>戴上或摘下面具<br>花朵应运而生<br>谎言与悲哀不可分离<br>如果没有面具<br>所有钟表还有什么意义</p>\n<p>当灵魂在岩石是显出原形<br>只有鸟会认出它们</p>\n<h3 id=\"13\"><a href=\"#13\" class=\"headerlink\" title=\"13\"></a>13</h3><p>他指银色的沼泽说<br>那里发生过战争<br>几棵冒烟的树在地平线飞奔<br>转入地下的士兵和马<br>闪着磷光，日夜<br>追随着将军的铠甲</p>\n<p>而我们追随的是<br>思想的流弹中<br>那逃窜的自由的兽皮</p>\n<p>昔日阵亡者的头颅<br>如残月升起<br>越过沙沙作响的灌木丛<br>以预言家的口吻说<br>你们并非幸存者<br>你们永无归宿</p>\n<p>新的思想呼啸而过<br>击中时代的背影<br>一滴苍蝇的血让我震惊</p>\n<h3 id=\"14\"><a href=\"#14\" class=\"headerlink\" title=\"14\"></a>14</h3><p>我注定要坐在岸边<br>在一张白纸上<br>期待着老年斑纹似的词</p>\n<p>出现，秩序与混乱<br>蜂房酿造着不同的情欲<br>九十九座红色的山峰</p>\n<p>上涨，空气稀薄<br>地衣居心叵测地蔓延<br>渺小，如尘世的</p>\n<p>计谋，钢筋支撑着权利<br>石头也会晕眩<br>这毕竟是一种可怕的</p>\n<p>高度，白纸背面<br>孩子的手在玩影子游戏<br>光源来自海底两条交尾的<br>电鳗</p>\n<h3 id=\"15\"><a href=\"#15\" class=\"headerlink\" title=\"15\"></a>15</h3><p>蹲伏在瓦罐的夜<br>溢出清凉的<br>水，那是我们爱的源泉</p>\n<p>回忆如伤疤<br>我的一生在你的脚下<br>这流动的沙丘<br>凝聚在你的手上<br>成为一颗眩目的钻石</p>\n<p>没有床，房间<br>小得使我们无法分离<br>四壁薄如棉纸<br>数不清的嘴巴画在墙上<br>低声轮唱</p>\n<p>你没有如期归来<br>我们共同啜饮的杯子<br>砰然碎裂</p>\n<h3 id=\"16\"><a href=\"#16\" class=\"headerlink\" title=\"16\"></a>16</h3><p>矿山废弃已久<br>它的金属拉成细长的线</p>\n<p>猫头鹰通体透明<br>胃和神经丛掠过夜空</p>\n<p>古生物的联盟解体了<br>粘合化石的工作</p>\n<p>仍在进行，生存<br>永远是一种集体冒险</p>\n<p>生存永远是和春天<br>在进行战争</p>\n<p>绿色的履带碾过<br>阴郁的文明</p>\n<p>喷射那水银的喷泉<br>金属的头改变了地貌</p>\n<h3 id=\"17\"><a href=\"#17\" class=\"headerlink\" title=\"17\"></a>17</h3><p>几个世纪过去了<br>一日尚未开始<br>冷空气触摸了我的手<br>螺旋楼梯般上升<br>黑与白，光线<br>在房瓦的音阶上转换<br>一棵枣树的安宁<br>男人的喉咙成熟了</p>\n<p>动物园的困兽<br>被合进一本书<br>钢鞭飞舞<br>悸动着的斑斓色彩<br>隔着漫长的岁月<br>凄厉地叫喊<br>一张导游图把我引入<br>城中之星星狡黠而凶狠<br>象某一事物的核心</p>\n<h3 id=\"18\"><a href=\"#18\" class=\"headerlink\" title=\"18\"></a>18</h3><p>我总是沿着那条街的<br>孤独的意志漫步<br>喔，我的城市<br>在玻璃的坚冰上滑行</p>\n<p>我的城市我的故事<br>我的水龙头我积怨<br>我的鹦鹉我的<br>保持平衡的睡眠</p>\n<p>罂粟花般芳香的少女<br>从超级市场飘过<br>带着折刀般表情的人们<br>共饮冬日的寒光</p>\n<p>诗，就象阳台一样<br>无情地折磨着我<br>被烟尘粉刷的墙<br>总在意料之中</p>\n<h3 id=\"19\"><a href=\"#19\" class=\"headerlink\" title=\"19\"></a>19</h3><p>当你转身的时候<br>花岗石崩裂成细细的流沙<br>你用陌生的语调<br>对空旷说话，不真实<br>如同你的笑容</p>\n<p>深深植入昨天的苦根<br>是最黑暗处的闪电<br>击中了我们想象的巢穴<br>从流沙的瀑布中<br>我们听见了水晶撞击的音乐</p>\n<p>一次小小的外科手术<br>我们挖掘燧石的雪地上<br>留下了麻雀的爪印<br>一辆冬天疯狂的马车<br>穿过夏日的火焰</p>\n<p>我们安然无恙<br>四季的美景印在你的衣服上</p>\n<h3 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20\"></a>20</h3><p>放牧是一种观点的陈述<br>热病使羊群膨胀<br>象一个个气球上升<br>卡在天蝎星座中<br>热风卷走了我的屋顶<br>在四壁之内<br>我静观无字的天空<br>文化是一种共生现象<br>包括羊的价值<br>狼的原则<br>钟罩里一无所有<br>在我们的视野里<br>只有一条干涸的河道<br>几缕笔直的烟<br>古代圣贤们<br>无限寂寞<br>垂钓着他们的鱼</p>\n<h3 id=\"21\"><a href=\"#21\" class=\"headerlink\" title=\"21\"></a>21</h3><p>诡秘的豆荚有五只眼睛<br>它们不愿看见白昼<br>只在黑暗里倾听</p>\n<p>一种颜色是一个孩子<br>诞生时的啼哭</p>\n<p>宴会上桌布洁白<br>杯中有死亡的味道<br>–悼词库挥发的沉闷气息</p>\n<p>传统是一张航空照片<br>山河缩小成桦木的纹理</p>\n<p>总是人，俯首听命于<br>说教、仿效、争斗<br>和他们的尊严</p>\n<p>寻找激情的旅行者<br>穿过候鸟荒凉的栖息地</p>\n<p>石膏像打开窗户<br>艺术家从背后<br>用工具狠狠地敲碎它们</p>\n<h3 id=\"22\"><a href=\"#22\" class=\"headerlink\" title=\"22\"></a>22</h3><p>弱音器弄哑了的小号<br>忽然响亮地哭喊<br>那伟大悲剧的导演<br>正悄悄地死去<br>两只装着滑轮的狮子<br>仍在固定的轨道上<br>东奔西撞</p>\n<p>曙光瘫痪在大街上<br>很多地址和名字和心事<br>在邮筒在夜里避雨<br>货车场的鸭子喧哗<br>窗户打着哈欠<br>一个来苏水味的早晨<br>值班医生正填写着死亡报告</p>\n<p>悲剧的伟大意义呵<br>日常生活的琐碎细节</p>\n<h3 id=\"23\"><a href=\"#23\" class=\"headerlink\" title=\"23\"></a>23</h3><p>在昼与夜之间出现了裂缝</p>\n<p>语言突然变得陈旧<br>象第一场雪<br>那些用黑布蒙面的证人<br>紧紧包围了你<br>你把一根根松枝插在地上<br>默默点燃它们</p>\n<p>那是一种祭奠的仪式<br>从死亡的山冈上<br>我居高临下<br>你是谁<br>要和我交换什么<br>白鹤展开一张飘动的纸<br>上面写着你的回答<br>而我一无所知</p>\n<p>你没有如期归来</p>"},{"title":"NodeJS入门","date":"2020-08-23T07:11:50.000Z","_content":"\n# 搭建nodeJS环境。\n1. 官网下载相应版本的NodeJS，直接安装即可。\n","source":"_posts/Node/node入门.md","raw":"---\ntitle: NodeJS入门\ndate: 2020-08-23 15:11:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: NodeJS #分类\ntags: [NodeJS] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n\n# 搭建nodeJS环境。\n1. 官网下载相应版本的NodeJS，直接安装即可。\n","slug":"Node/node入门","published":1,"updated":"2020-08-24T03:56:35.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut650004lzrvn2cm1urg","content":"<h1 id=\"搭建nodeJS环境。\"><a href=\"#搭建nodeJS环境。\" class=\"headerlink\" title=\"搭建nodeJS环境。\"></a>搭建nodeJS环境。</h1><ol>\n<li>官网下载相应版本的NodeJS，直接安装即可。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h1 id=\"搭建nodeJS环境。\"><a href=\"#搭建nodeJS环境。\" class=\"headerlink\" title=\"搭建nodeJS环境。\"></a>搭建nodeJS环境。</h1><ol>\n<li>官网下载相应版本的NodeJS，直接安装即可。</li>\n</ol>\n"},{"title":"display:none与visibility:hidden的辨析","date":"2020-08-17T03:09:30.000Z","description":"css的那些坑","_content":"\n### 相同点\n1. 都能把网页上某个元素隐藏起来。\n\n### 不同点\n1. display:none隐藏的元素不占据物理空间（设置该属性的元素会产生回流，不会加入到render tree），visibility:hidden隐藏的元素占据物理空间（不会产生回流，会加入到render tree）。\n2. display:none会跳过ol的计数器，而visibility不会跳过。\n3. css3的transition支持visibility属性，不支持display属性。\n4. visibility:hidden具有继承性，子元素也会继承visibility:hidden属性。display:none没有继承性。\n","source":"_posts/css基础/dispaly:none与visibility的辨析.md","raw":"---\ntitle: display:none与visibility:hidden的辨析 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-08-17 11:09:30 #文章生成时间，一般不改，当然也可以任意修改\ncategories: css #分类\ntags: css #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: css的那些坑\n---\n\n### 相同点\n1. 都能把网页上某个元素隐藏起来。\n\n### 不同点\n1. display:none隐藏的元素不占据物理空间（设置该属性的元素会产生回流，不会加入到render tree），visibility:hidden隐藏的元素占据物理空间（不会产生回流，会加入到render tree）。\n2. display:none会跳过ol的计数器，而visibility不会跳过。\n3. css3的transition支持visibility属性，不支持display属性。\n4. visibility:hidden具有继承性，子元素也会继承visibility:hidden属性。display:none没有继承性。\n","slug":"css基础/dispaly:none与visibility的辨析","published":1,"updated":"2020-08-17T15:09:31.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut670005lzrv7ja8m500","content":"<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>都能把网页上某个元素隐藏起来。</li>\n</ol>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ol>\n<li>display:none隐藏的元素不占据物理空间（设置该属性的元素会产生回流，不会加入到render tree），visibility:hidden隐藏的元素占据物理空间（不会产生回流，会加入到render tree）。</li>\n<li>display:none会跳过ol的计数器，而visibility不会跳过。</li>\n<li>css3的transition支持visibility属性，不支持display属性。</li>\n<li>visibility:hidden具有继承性，子元素也会继承visibility:hidden属性。display:none没有继承性。</li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>都能把网页上某个元素隐藏起来。</li>\n</ol>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ol>\n<li>display:none隐藏的元素不占据物理空间（设置该属性的元素会产生回流，不会加入到render tree），visibility:hidden隐藏的元素占据物理空间（不会产生回流，会加入到render tree）。</li>\n<li>display:none会跳过ol的计数器，而visibility不会跳过。</li>\n<li>css3的transition支持visibility属性，不支持display属性。</li>\n<li>visibility:hidden具有继承性，子元素也会继承visibility:hidden属性。display:none没有继承性。</li>\n</ol>\n"},{"_content":"### 形成外布局重叠的情况：\n外边距重叠的含义：块的上外边距(margin-top)和下外边距(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，\n\n1. 同一层相邻元素之间：相邻的两个元素之间的外边距重叠，除非后一个元素加上clear-fix清除浮动。\n\n\n\n### 参考资料\n1. 知乎回答：https://www.zhihu.com/question/19823139?sort=created\n2. MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing","source":"_posts/css基础/外边距折叠.md","raw":"### 形成外布局重叠的情况：\n外边距重叠的含义：块的上外边距(margin-top)和下外边距(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，\n\n1. 同一层相邻元素之间：相邻的两个元素之间的外边距重叠，除非后一个元素加上clear-fix清除浮动。\n\n\n\n### 参考资料\n1. 知乎回答：https://www.zhihu.com/question/19823139?sort=created\n2. MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing","slug":"css基础/外边距折叠","published":1,"date":"2020-08-17T14:54:45.994Z","updated":"2020-08-17T15:35:47.618Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut690007lzrvv63dmp86","content":"<h3 id=\"形成外布局重叠的情况：\"><a href=\"#形成外布局重叠的情况：\" class=\"headerlink\" title=\"形成外布局重叠的情况：\"></a>形成外布局重叠的情况：</h3><p>外边距重叠的含义：块的上外边距(margin-top)和下外边距(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，</p>\n<ol>\n<li>同一层相邻元素之间：相邻的两个元素之间的外边距重叠，除非后一个元素加上clear-fix清除浮动。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>知乎回答：<a href=\"https://www.zhihu.com/question/19823139?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139?sort=created</a></li>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"形成外布局重叠的情况：\"><a href=\"#形成外布局重叠的情况：\" class=\"headerlink\" title=\"形成外布局重叠的情况：\"></a>形成外布局重叠的情况：</h3><p>外边距重叠的含义：块的上外边距(margin-top)和下外边距(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，</p>\n<ol>\n<li>同一层相邻元素之间：相邻的两个元素之间的外边距重叠，除非后一个元素加上clear-fix清除浮动。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>知乎回答：<a href=\"https://www.zhihu.com/question/19823139?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19823139?sort=created</a></li>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></li>\n</ol>\n"},{"_content":"### 几种定位\n\n### 参考资料\n1. mdn有关文档流及定位的介绍：https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\n","source":"_posts/css基础/定位、文档流与文本流.md","raw":"### 几种定位\n\n### 参考资料\n1. mdn有关文档流及定位的介绍：https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\n","slug":"css基础/定位、文档流与文本流","published":1,"date":"2020-08-17T14:46:32.951Z","updated":"2020-08-17T15:08:44.300Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6a0008lzrv9h78ho13","content":"<h3 id=\"几种定位\"><a href=\"#几种定位\" class=\"headerlink\" title=\"几种定位\"></a>几种定位</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>mdn有关文档流及定位的介绍：<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D</a></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"几种定位\"><a href=\"#几种定位\" class=\"headerlink\" title=\"几种定位\"></a>几种定位</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>mdn有关文档流及定位的介绍：<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D</a></li>\n</ol>\n"},{"title":"js数据类型","date":"2020-05-04T10:13:30.000Z","_content":"\n#  数据类型\n共八种，分为基础类型和引用类型。\n\n## 基本类型（又称原始类型、简单类型。）\n值本身无法被改变。尤其注意的是基本类型和内置对象是不一样的。比如Boolean的基本类型的值只有false和true，而Boolean对象只是用来承载Boolean基本类型的。\n1. Boolean：值仅有`true`或`false`\n    * 判断基本类型：`typeof variable === \"boolean\" `\n2. Null\n    * 判断基本类型：`variable === null`\n3. Undefined\n    * 判断基本类型方法1：`variable === undefined`\n    * 判断基本类型方法2：`typeof a === \"undefined\"`\n4. Number\n    * 判断基本类型：`typeof variable === \"number\"`\n    * 判断整数：`Number.isInteger()`。\n    * 判断是否为NaN：`Number.isNan()`。\n    * 判断是否为有穷数：`Number.isFinite()`。\n    * 字符串转浮点数：`Number.parseFloat()`。\n    * 字符串转整数：`Number.parseInt()`。和全局的`parseInt()`方法一致。\n5. BigInt\n    * 判断基本类型：`typeof variable === \"bigint\"`\n    * 注意：不能用于Math对象中的方法。\n6. String\n    * 判断基本类型：`typeof variable === \"String\"`\n7. Symbol\n    * 判断基本类型：`typeof variable === \"Symbol\"`\n\n## 引用类型Object\n值本身可以被改变。\n\n### 对象判空的方法\n1. 使用JSON.stringify()。\n2. 使用`for in`。\n3. 使用Object.keys()。\n\n### 1. 使用JSON.stringify()\n```\nfunction isObjEmpty(obj){\n    return JSON.stringify(obj) === \"{}\"\n}\n```\n\n### 2. 使用`for in`\n```\nfunction isObjEmpty(obj){\n    for(let attr in obj){\n        return false;\n    }\n    return true;\n}\n```\n\n### 3. 使用Object.keys()\n```\nfunction isObjEmpty(obj){\n    return Object.keys(obj).length === 0\n}\n```","source":"_posts/js基础/js数据类型.md","raw":"---\ntitle:  js数据类型 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-05-04 18:13:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 前端 #分类\n\ntags: [前端]  #文章标签，可空，多标签请用格式，注意:后面有个空格\n\n---\n\n#  数据类型\n共八种，分为基础类型和引用类型。\n\n## 基本类型（又称原始类型、简单类型。）\n值本身无法被改变。尤其注意的是基本类型和内置对象是不一样的。比如Boolean的基本类型的值只有false和true，而Boolean对象只是用来承载Boolean基本类型的。\n1. Boolean：值仅有`true`或`false`\n    * 判断基本类型：`typeof variable === \"boolean\" `\n2. Null\n    * 判断基本类型：`variable === null`\n3. Undefined\n    * 判断基本类型方法1：`variable === undefined`\n    * 判断基本类型方法2：`typeof a === \"undefined\"`\n4. Number\n    * 判断基本类型：`typeof variable === \"number\"`\n    * 判断整数：`Number.isInteger()`。\n    * 判断是否为NaN：`Number.isNan()`。\n    * 判断是否为有穷数：`Number.isFinite()`。\n    * 字符串转浮点数：`Number.parseFloat()`。\n    * 字符串转整数：`Number.parseInt()`。和全局的`parseInt()`方法一致。\n5. BigInt\n    * 判断基本类型：`typeof variable === \"bigint\"`\n    * 注意：不能用于Math对象中的方法。\n6. String\n    * 判断基本类型：`typeof variable === \"String\"`\n7. Symbol\n    * 判断基本类型：`typeof variable === \"Symbol\"`\n\n## 引用类型Object\n值本身可以被改变。\n\n### 对象判空的方法\n1. 使用JSON.stringify()。\n2. 使用`for in`。\n3. 使用Object.keys()。\n\n### 1. 使用JSON.stringify()\n```\nfunction isObjEmpty(obj){\n    return JSON.stringify(obj) === \"{}\"\n}\n```\n\n### 2. 使用`for in`\n```\nfunction isObjEmpty(obj){\n    for(let attr in obj){\n        return false;\n    }\n    return true;\n}\n```\n\n### 3. 使用Object.keys()\n```\nfunction isObjEmpty(obj){\n    return Object.keys(obj).length === 0\n}\n```","slug":"js基础/js数据类型","published":1,"updated":"2020-08-22T04:10:48.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6a0009lzrvea74ae07","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>共八种，分为基础类型和引用类型。</p>\n<h2 id=\"基本类型（又称原始类型、简单类型。）\"><a href=\"#基本类型（又称原始类型、简单类型。）\" class=\"headerlink\" title=\"基本类型（又称原始类型、简单类型。）\"></a>基本类型（又称原始类型、简单类型。）</h2><p>值本身无法被改变。尤其注意的是基本类型和内置对象是不一样的。比如Boolean的基本类型的值只有false和true，而Boolean对象只是用来承载Boolean基本类型的。</p>\n<ol>\n<li>Boolean：值仅有<code>true</code>或<code>false</code><ul>\n<li>判断基本类型：<code>typeof variable === &quot;boolean&quot;</code></li>\n</ul>\n</li>\n<li>Null<ul>\n<li>判断基本类型：<code>variable === null</code></li>\n</ul>\n</li>\n<li>Undefined<ul>\n<li>判断基本类型方法1：<code>variable === undefined</code></li>\n<li>判断基本类型方法2：<code>typeof a === &quot;undefined&quot;</code></li>\n</ul>\n</li>\n<li>Number<ul>\n<li>判断基本类型：<code>typeof variable === &quot;number&quot;</code></li>\n<li>判断整数：<code>Number.isInteger()</code>。</li>\n<li>判断是否为NaN：<code>Number.isNan()</code>。</li>\n<li>判断是否为有穷数：<code>Number.isFinite()</code>。</li>\n<li>字符串转浮点数：<code>Number.parseFloat()</code>。</li>\n<li>字符串转整数：<code>Number.parseInt()</code>。和全局的<code>parseInt()</code>方法一致。</li>\n</ul>\n</li>\n<li>BigInt<ul>\n<li>判断基本类型：<code>typeof variable === &quot;bigint&quot;</code></li>\n<li>注意：不能用于Math对象中的方法。</li>\n</ul>\n</li>\n<li>String<ul>\n<li>判断基本类型：<code>typeof variable === &quot;String&quot;</code></li>\n</ul>\n</li>\n<li>Symbol<ul>\n<li>判断基本类型：<code>typeof variable === &quot;Symbol&quot;</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"引用类型Object\"><a href=\"#引用类型Object\" class=\"headerlink\" title=\"引用类型Object\"></a>引用类型Object</h2><p>值本身可以被改变。</p>\n<h3 id=\"对象判空的方法\"><a href=\"#对象判空的方法\" class=\"headerlink\" title=\"对象判空的方法\"></a>对象判空的方法</h3><ol>\n<li>使用JSON.stringify()。</li>\n<li>使用<code>for in</code>。</li>\n<li>使用Object.keys()。</li>\n</ol>\n<h3 id=\"1-使用JSON-stringify\"><a href=\"#1-使用JSON-stringify\" class=\"headerlink\" title=\"1. 使用JSON.stringify()\"></a>1. 使用JSON.stringify()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    return JSON.stringify(obj) === &quot;&#123;&#125;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用for-in\"><a href=\"#2-使用for-in\" class=\"headerlink\" title=\"2. 使用for in\"></a>2. 使用<code>for in</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    for(let attr in obj)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用Object-keys\"><a href=\"#3-使用Object-keys\" class=\"headerlink\" title=\"3. 使用Object.keys()\"></a>3. 使用Object.keys()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    return Object.keys(obj).length === 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>共八种，分为基础类型和引用类型。</p>\n<h2 id=\"基本类型（又称原始类型、简单类型。）\"><a href=\"#基本类型（又称原始类型、简单类型。）\" class=\"headerlink\" title=\"基本类型（又称原始类型、简单类型。）\"></a>基本类型（又称原始类型、简单类型。）</h2><p>值本身无法被改变。尤其注意的是基本类型和内置对象是不一样的。比如Boolean的基本类型的值只有false和true，而Boolean对象只是用来承载Boolean基本类型的。</p>\n<ol>\n<li>Boolean：值仅有<code>true</code>或<code>false</code><ul>\n<li>判断基本类型：<code>typeof variable === &quot;boolean&quot;</code></li>\n</ul>\n</li>\n<li>Null<ul>\n<li>判断基本类型：<code>variable === null</code></li>\n</ul>\n</li>\n<li>Undefined<ul>\n<li>判断基本类型方法1：<code>variable === undefined</code></li>\n<li>判断基本类型方法2：<code>typeof a === &quot;undefined&quot;</code></li>\n</ul>\n</li>\n<li>Number<ul>\n<li>判断基本类型：<code>typeof variable === &quot;number&quot;</code></li>\n<li>判断整数：<code>Number.isInteger()</code>。</li>\n<li>判断是否为NaN：<code>Number.isNan()</code>。</li>\n<li>判断是否为有穷数：<code>Number.isFinite()</code>。</li>\n<li>字符串转浮点数：<code>Number.parseFloat()</code>。</li>\n<li>字符串转整数：<code>Number.parseInt()</code>。和全局的<code>parseInt()</code>方法一致。</li>\n</ul>\n</li>\n<li>BigInt<ul>\n<li>判断基本类型：<code>typeof variable === &quot;bigint&quot;</code></li>\n<li>注意：不能用于Math对象中的方法。</li>\n</ul>\n</li>\n<li>String<ul>\n<li>判断基本类型：<code>typeof variable === &quot;String&quot;</code></li>\n</ul>\n</li>\n<li>Symbol<ul>\n<li>判断基本类型：<code>typeof variable === &quot;Symbol&quot;</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"引用类型Object\"><a href=\"#引用类型Object\" class=\"headerlink\" title=\"引用类型Object\"></a>引用类型Object</h2><p>值本身可以被改变。</p>\n<h3 id=\"对象判空的方法\"><a href=\"#对象判空的方法\" class=\"headerlink\" title=\"对象判空的方法\"></a>对象判空的方法</h3><ol>\n<li>使用JSON.stringify()。</li>\n<li>使用<code>for in</code>。</li>\n<li>使用Object.keys()。</li>\n</ol>\n<h3 id=\"1-使用JSON-stringify\"><a href=\"#1-使用JSON-stringify\" class=\"headerlink\" title=\"1. 使用JSON.stringify()\"></a>1. 使用JSON.stringify()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    return JSON.stringify(obj) === &quot;&#123;&#125;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用for-in\"><a href=\"#2-使用for-in\" class=\"headerlink\" title=\"2. 使用for in\"></a>2. 使用<code>for in</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    for(let attr in obj)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用Object-keys\"><a href=\"#3-使用Object-keys\" class=\"headerlink\" title=\"3. 使用Object.keys()\"></a>3. 使用Object.keys()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isObjEmpty(obj)&#123;</span><br><span class=\"line\">    return Object.keys(obj).length === 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"js遍历方法总结","date":"2020-04-23T15:50:50.000Z","description":"js遍历方法的汇总","_content":"\n## 目录\n\n1. [遍历语句](#1)\n    1. [for](#1.1)\n    2. [for ... of](#1.2)\n    3. [for ... in](#1.3)\n2. [数组遍历方法](#2)\n3. [其他注意事项](#3)\n    1. [map](#3.1)\n    2. [reduce](#3.2)\n4. [一些思考](#4)\n\n## <div id=\"1\">1.遍历语句</div>\n\n## <div id=\"1.1\">1.for</div>\n极其简单，极其强大，但是书写麻烦，不予赘述。\n\n## <div id=\"1.2\">2. for ... of</div>\n主要用来对可迭代对象进行迭代，注意一下不同迭代对象的迭代形式。\n\n## <div id=\"1.3\">3. for ... in</div>\n**以任意顺序遍历一个对象的除Symbol以外的可枚举属性**，主要用来迭代对象属性以及debug。\n\n## <div id=\"2\">2. 数组遍历方法</div>\n注意点：\n1. 遍历方法的作用。\n2. 遍历方法的参数。\n3. 表达式的返回值是什么？\n4. 能否跳出遍历？\n5. 遍历方法的推荐使用场景。\n6. 遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否以调用该遍历方法时为准？\n7. 遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\n\n| 方法名 | 作用 | 参数 | 返回值 | 能否跳出遍历 | 常见使用场景 | \n| ---- | ---- | ---- | ---- | ---- | ---- | \n| map | 对数组中的每一项使用回调方法进行处理，返回处理后的元素形成的新数组 | 回调函数（当前处理的元素、索引、原数组），this参数 | 处理后的元素组成的新数组。 | 否 | 需要对一个数组进行遍历，并且需要使用遍历产生的新数组| \n| filter | 过滤数组，生成新数组 | 回调函数（当前处理的元素、索引、原数组），this参数 | 回调函数返回值为true的元素组成的新数组 | 否 | 个人用的较多的情况便是过滤数组 |\n| every | 判断数组中的每一项是否能通过测试 | 回调函数（当前处理的元素、索引、原数组），this参数 | 布尔值true/false | 是 | 个人觉得最正规的用途可能就是检测数组中的元素是否符合某个特点，符合正规用途的使用场景较窄。但是作为唯一一个可以中途跳出遍历的循环，也可以用作for循环的更简便的替代方案——但是不推荐这种用法，还是针对不同场景使用更加符合语义的遍历方式吧 | \n| some | 判断数组中是否有一项使得回调函数的返回值为true | 回调函数（当前处理的元素、索引、原数组），this参数 | 布尔值true/false | 是 | 针对某个数据在数组中是否“存在”的判断 |\n| reduce | 对数组中的元素进行遍历，同时在遍历过程中能够进行累加，最后返回累加器最后的值 | 回调函数（即reducer函数，包括四个参数：累加器acc，当前值cur，索引idx，被调用的数组src），累加器的初始值 | reduce函数返回累加器最后的值。reducer函数的返回值由使用者定义，该返回值将被分配给累加器 | 否 | 对数字进行操、使用字符串连接函数等处理字符串，用途十分广泛 |\n| reduceRight | 同reduce，但遍历顺序为降序，即从数组的尾部向前遍历 | 同reduce | 同reduce | 否 | 同reduce |\n| find | 返回数组中满足提供的测试函数的第一个元素的值。 | 回调函数（当前处理的元素、索引、原数组），this参数 | 数组中满足回调函数的元素的值，未命中返回`undefined` | 是 | 寻找数组中的某一项 |\n| findIndex | 大致与find相同，只是返回的为满足测试函数的元素的索引 | 同find | 回调函数返回值为true的元素的索引，未命中返回-1 | 是 | 同find |\n| forEach | 对数组的每个元素执行一次给定的函数 | 调函数（当前处理的元素、索引、原数组），this参数 | undefined | 否。可以先使用filter，再使用forEach | 可以替代for循环，更简洁一些。由于该方法会跳过数组中的空数组单元，用来处理系数数组的效果较好 |\n\n\n### 遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\n#### map、filter、every、some、find、findIndex等\n分情况，“修改”、“删除”、“新增”的情况不同，“修改”情况又分为修改前遍历该元素和修改后遍历到该元素。\n* 遍历中修改某个元素：在遍历到某个元素之前发生变化，遍历到该元素时得到的为变化后的值。若遍历后发生修改，则修改是会反映到原数组中的，但是不会影响之前的遍历。\n* 遍历中删除某个元素：该元素变为underfined（empty?），但仍然占据在数组中的原位置。如果方法返回的是一个新数组，同时会影响新生成的数组的该索引的元素（根据修改规则判断是否影响）。生成的数组长度不变，原数组长度也不变。\n* 遍历中新增某个元素：在遍历时不会对其进行遍历。\n\n#### forEach\n规则有点不同。如果数组在迭代时被修改了，则其他元素会被跳过。\n\n### 上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\n不是。\n\n## <div id=\"3\">3. 其他注意事项</div>\n### <div id=\"3.1\">3.1 map</div>\n在遍历过程中一定记得写明返回值！直接更改当前遍历的内容而不反回，不会反映到遍历结束生成的数组中！比如 \n```javascript\nvar b = arr.map(i=>{i.text = \"测试\";i.value=\"测试\"});       // 此时b数组中所有项的值皆undefined\nvar b = arr.map(i=>{return {text:\"测试\",value:\"测试\"}})     // 此时b数组所有项的值才为一个包含text和value属性的对象\n```\n\n### <div id=\"3.2\">3.2 reduce</div> \n注意一下reduce函数中累加器的初始值设置。\n\n## <div id=\"4\">4. 一些思考</div>\nfor循环功能很强大，但总不能处处都用for循环。在项目中只用for可能会徒增不必要的代码，使得代码写的复杂、晦涩，存在大量重复等。代码在保证运行效率的情况下，应该足够简洁，编写的代码才会更易懂、易维护，应该针对不同的场景使用合适的遍历方法。","source":"_posts/js基础/js遍历总结.md","raw":"---\ntitle: js遍历方法总结 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-04-23 23:50:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [js, 前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: js遍历方法的汇总\n---\n\n## 目录\n\n1. [遍历语句](#1)\n    1. [for](#1.1)\n    2. [for ... of](#1.2)\n    3. [for ... in](#1.3)\n2. [数组遍历方法](#2)\n3. [其他注意事项](#3)\n    1. [map](#3.1)\n    2. [reduce](#3.2)\n4. [一些思考](#4)\n\n## <div id=\"1\">1.遍历语句</div>\n\n## <div id=\"1.1\">1.for</div>\n极其简单，极其强大，但是书写麻烦，不予赘述。\n\n## <div id=\"1.2\">2. for ... of</div>\n主要用来对可迭代对象进行迭代，注意一下不同迭代对象的迭代形式。\n\n## <div id=\"1.3\">3. for ... in</div>\n**以任意顺序遍历一个对象的除Symbol以外的可枚举属性**，主要用来迭代对象属性以及debug。\n\n## <div id=\"2\">2. 数组遍历方法</div>\n注意点：\n1. 遍历方法的作用。\n2. 遍历方法的参数。\n3. 表达式的返回值是什么？\n4. 能否跳出遍历？\n5. 遍历方法的推荐使用场景。\n6. 遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否以调用该遍历方法时为准？\n7. 遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\n\n| 方法名 | 作用 | 参数 | 返回值 | 能否跳出遍历 | 常见使用场景 | \n| ---- | ---- | ---- | ---- | ---- | ---- | \n| map | 对数组中的每一项使用回调方法进行处理，返回处理后的元素形成的新数组 | 回调函数（当前处理的元素、索引、原数组），this参数 | 处理后的元素组成的新数组。 | 否 | 需要对一个数组进行遍历，并且需要使用遍历产生的新数组| \n| filter | 过滤数组，生成新数组 | 回调函数（当前处理的元素、索引、原数组），this参数 | 回调函数返回值为true的元素组成的新数组 | 否 | 个人用的较多的情况便是过滤数组 |\n| every | 判断数组中的每一项是否能通过测试 | 回调函数（当前处理的元素、索引、原数组），this参数 | 布尔值true/false | 是 | 个人觉得最正规的用途可能就是检测数组中的元素是否符合某个特点，符合正规用途的使用场景较窄。但是作为唯一一个可以中途跳出遍历的循环，也可以用作for循环的更简便的替代方案——但是不推荐这种用法，还是针对不同场景使用更加符合语义的遍历方式吧 | \n| some | 判断数组中是否有一项使得回调函数的返回值为true | 回调函数（当前处理的元素、索引、原数组），this参数 | 布尔值true/false | 是 | 针对某个数据在数组中是否“存在”的判断 |\n| reduce | 对数组中的元素进行遍历，同时在遍历过程中能够进行累加，最后返回累加器最后的值 | 回调函数（即reducer函数，包括四个参数：累加器acc，当前值cur，索引idx，被调用的数组src），累加器的初始值 | reduce函数返回累加器最后的值。reducer函数的返回值由使用者定义，该返回值将被分配给累加器 | 否 | 对数字进行操、使用字符串连接函数等处理字符串，用途十分广泛 |\n| reduceRight | 同reduce，但遍历顺序为降序，即从数组的尾部向前遍历 | 同reduce | 同reduce | 否 | 同reduce |\n| find | 返回数组中满足提供的测试函数的第一个元素的值。 | 回调函数（当前处理的元素、索引、原数组），this参数 | 数组中满足回调函数的元素的值，未命中返回`undefined` | 是 | 寻找数组中的某一项 |\n| findIndex | 大致与find相同，只是返回的为满足测试函数的元素的索引 | 同find | 回调函数返回值为true的元素的索引，未命中返回-1 | 是 | 同find |\n| forEach | 对数组的每个元素执行一次给定的函数 | 调函数（当前处理的元素、索引、原数组），this参数 | undefined | 否。可以先使用filter，再使用forEach | 可以替代for循环，更简洁一些。由于该方法会跳过数组中的空数组单元，用来处理系数数组的效果较好 |\n\n\n### 遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\n#### map、filter、every、some、find、findIndex等\n分情况，“修改”、“删除”、“新增”的情况不同，“修改”情况又分为修改前遍历该元素和修改后遍历到该元素。\n* 遍历中修改某个元素：在遍历到某个元素之前发生变化，遍历到该元素时得到的为变化后的值。若遍历后发生修改，则修改是会反映到原数组中的，但是不会影响之前的遍历。\n* 遍历中删除某个元素：该元素变为underfined（empty?），但仍然占据在数组中的原位置。如果方法返回的是一个新数组，同时会影响新生成的数组的该索引的元素（根据修改规则判断是否影响）。生成的数组长度不变，原数组长度也不变。\n* 遍历中新增某个元素：在遍历时不会对其进行遍历。\n\n#### forEach\n规则有点不同。如果数组在迭代时被修改了，则其他元素会被跳过。\n\n### 上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\n不是。\n\n## <div id=\"3\">3. 其他注意事项</div>\n### <div id=\"3.1\">3.1 map</div>\n在遍历过程中一定记得写明返回值！直接更改当前遍历的内容而不反回，不会反映到遍历结束生成的数组中！比如 \n```javascript\nvar b = arr.map(i=>{i.text = \"测试\";i.value=\"测试\"});       // 此时b数组中所有项的值皆undefined\nvar b = arr.map(i=>{return {text:\"测试\",value:\"测试\"}})     // 此时b数组所有项的值才为一个包含text和value属性的对象\n```\n\n### <div id=\"3.2\">3.2 reduce</div> \n注意一下reduce函数中累加器的初始值设置。\n\n## <div id=\"4\">4. 一些思考</div>\nfor循环功能很强大，但总不能处处都用for循环。在项目中只用for可能会徒增不必要的代码，使得代码写的复杂、晦涩，存在大量重复等。代码在保证运行效率的情况下，应该足够简洁，编写的代码才会更易懂、易维护，应该针对不同的场景使用合适的遍历方法。","slug":"js基础/js遍历总结","published":1,"updated":"2020-08-22T07:24:03.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6b000alzrv76dibs72","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">遍历语句</a><ol>\n<li><a href=\"#1.1\">for</a></li>\n<li><a href=\"#1.2\">for … of</a></li>\n<li><a href=\"#1.3\">for … in</a></li>\n</ol>\n</li>\n<li><a href=\"#2\">数组遍历方法</a></li>\n<li><a href=\"#3\">其他注意事项</a><ol>\n<li><a href=\"#3.1\">map</a></li>\n<li><a href=\"#3.2\">reduce</a></li>\n</ol>\n</li>\n<li><a href=\"#4\">一些思考</a></li>\n</ol>\n<h2 id=\"1-遍历语句\"><a href=\"#1-遍历语句\" class=\"headerlink\" title=\"1.遍历语句\"></a><div id=\"1\">1.遍历语句</div></h2><h2 id=\"1-for\"><a href=\"#1-for\" class=\"headerlink\" title=\"1.for\"></a><div id=\"1.1\">1.for</div></h2><p>极其简单，极其强大，但是书写麻烦，不予赘述。</p>\n<h2 id=\"2-for-…-of\"><a href=\"#2-for-…-of\" class=\"headerlink\" title=\"2. for … of\"></a><div id=\"1.2\">2. for … of</div></h2><p>主要用来对可迭代对象进行迭代，注意一下不同迭代对象的迭代形式。</p>\n<h2 id=\"3-for-…-in\"><a href=\"#3-for-…-in\" class=\"headerlink\" title=\"3. for … in\"></a><div id=\"1.3\">3. for … in</div></h2><p><strong>以任意顺序遍历一个对象的除Symbol以外的可枚举属性</strong>，主要用来迭代对象属性以及debug。</p>\n<h2 id=\"2-数组遍历方法\"><a href=\"#2-数组遍历方法\" class=\"headerlink\" title=\"2. 数组遍历方法\"></a><div id=\"2\">2. 数组遍历方法</div></h2><p>注意点：</p>\n<ol>\n<li>遍历方法的作用。</li>\n<li>遍历方法的参数。</li>\n<li>表达式的返回值是什么？</li>\n<li>能否跳出遍历？</li>\n<li>遍历方法的推荐使用场景。</li>\n<li>遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否以调用该遍历方法时为准？</li>\n<li>遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n<th>参数</th>\n<th>返回值</th>\n<th>能否跳出遍历</th>\n<th>常见使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map</td>\n<td>对数组中的每一项使用回调方法进行处理，返回处理后的元素形成的新数组</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>处理后的元素组成的新数组。</td>\n<td>否</td>\n<td>需要对一个数组进行遍历，并且需要使用遍历产生的新数组</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>过滤数组，生成新数组</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>回调函数返回值为true的元素组成的新数组</td>\n<td>否</td>\n<td>个人用的较多的情况便是过滤数组</td>\n</tr>\n<tr>\n<td>every</td>\n<td>判断数组中的每一项是否能通过测试</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>布尔值true/false</td>\n<td>是</td>\n<td>个人觉得最正规的用途可能就是检测数组中的元素是否符合某个特点，符合正规用途的使用场景较窄。但是作为唯一一个可以中途跳出遍历的循环，也可以用作for循环的更简便的替代方案——但是不推荐这种用法，还是针对不同场景使用更加符合语义的遍历方式吧</td>\n</tr>\n<tr>\n<td>some</td>\n<td>判断数组中是否有一项使得回调函数的返回值为true</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>布尔值true/false</td>\n<td>是</td>\n<td>针对某个数据在数组中是否“存在”的判断</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>对数组中的元素进行遍历，同时在遍历过程中能够进行累加，最后返回累加器最后的值</td>\n<td>回调函数（即reducer函数，包括四个参数：累加器acc，当前值cur，索引idx，被调用的数组src），累加器的初始值</td>\n<td>reduce函数返回累加器最后的值。reducer函数的返回值由使用者定义，该返回值将被分配给累加器</td>\n<td>否</td>\n<td>对数字进行操、使用字符串连接函数等处理字符串，用途十分广泛</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td>同reduce，但遍历顺序为降序，即从数组的尾部向前遍历</td>\n<td>同reduce</td>\n<td>同reduce</td>\n<td>否</td>\n<td>同reduce</td>\n</tr>\n<tr>\n<td>find</td>\n<td>返回数组中满足提供的测试函数的第一个元素的值。</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>数组中满足回调函数的元素的值，未命中返回<code>undefined</code></td>\n<td>是</td>\n<td>寻找数组中的某一项</td>\n</tr>\n<tr>\n<td>findIndex</td>\n<td>大致与find相同，只是返回的为满足测试函数的元素的索引</td>\n<td>同find</td>\n<td>回调函数返回值为true的元素的索引，未命中返回-1</td>\n<td>是</td>\n<td>同find</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>对数组的每个元素执行一次给定的函数</td>\n<td>调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>undefined</td>\n<td>否。可以先使用filter，再使用forEach</td>\n<td>可以替代for循环，更简洁一些。由于该方法会跳过数组中的空数组单元，用来处理系数数组的效果较好</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\"><a href=\"#遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\" class=\"headerlink\" title=\"遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\"></a>遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？</h3><h4 id=\"map、filter、every、some、find、findIndex等\"><a href=\"#map、filter、every、some、find、findIndex等\" class=\"headerlink\" title=\"map、filter、every、some、find、findIndex等\"></a>map、filter、every、some、find、findIndex等</h4><p>分情况，“修改”、“删除”、“新增”的情况不同，“修改”情况又分为修改前遍历该元素和修改后遍历到该元素。</p>\n<ul>\n<li>遍历中修改某个元素：在遍历到某个元素之前发生变化，遍历到该元素时得到的为变化后的值。若遍历后发生修改，则修改是会反映到原数组中的，但是不会影响之前的遍历。</li>\n<li>遍历中删除某个元素：该元素变为underfined（empty?），但仍然占据在数组中的原位置。如果方法返回的是一个新数组，同时会影响新生成的数组的该索引的元素（根据修改规则判断是否影响）。生成的数组长度不变，原数组长度也不变。</li>\n<li>遍历中新增某个元素：在遍历时不会对其进行遍历。</li>\n</ul>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>规则有点不同。如果数组在迭代时被修改了，则其他元素会被跳过。</p>\n<h3 id=\"上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\"><a href=\"#上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\" class=\"headerlink\" title=\"上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\"></a>上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？</h3><p>不是。</p>\n<h2 id=\"3-其他注意事项\"><a href=\"#3-其他注意事项\" class=\"headerlink\" title=\"3. 其他注意事项\"></a><div id=\"3\">3. 其他注意事项</div></h2><h3 id=\"3-1-map\"><a href=\"#3-1-map\" class=\"headerlink\" title=\"3.1 map\"></a><div id=\"3.1\">3.1 map</div></h3><p>在遍历过程中一定记得写明返回值！直接更改当前遍历的内容而不反回，不会反映到遍历结束生成的数组中！比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = arr.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;i.text = <span class=\"string\">\"测试\"</span>;i.value=<span class=\"string\">\"测试\"</span>&#125;);       <span class=\"comment\">// 此时b数组中所有项的值皆undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = arr.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">text</span>:<span class=\"string\">\"测试\"</span>,<span class=\"attr\">value</span>:<span class=\"string\">\"测试\"</span>&#125;&#125;)     <span class=\"comment\">// 此时b数组所有项的值才为一个包含text和value属性的对象</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-reduce\"><a href=\"#3-2-reduce\" class=\"headerlink\" title=\"3.2 reduce\"></a><div id=\"3.2\">3.2 reduce</div></h3><p>注意一下reduce函数中累加器的初始值设置。</p>\n<h2 id=\"4-一些思考\"><a href=\"#4-一些思考\" class=\"headerlink\" title=\"4. 一些思考\"></a><div id=\"4\">4. 一些思考</div></h2><p>for循环功能很强大，但总不能处处都用for循环。在项目中只用for可能会徒增不必要的代码，使得代码写的复杂、晦涩，存在大量重复等。代码在保证运行效率的情况下，应该足够简洁，编写的代码才会更易懂、易维护，应该针对不同的场景使用合适的遍历方法。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#1\">遍历语句</a><ol>\n<li><a href=\"#1.1\">for</a></li>\n<li><a href=\"#1.2\">for … of</a></li>\n<li><a href=\"#1.3\">for … in</a></li>\n</ol>\n</li>\n<li><a href=\"#2\">数组遍历方法</a></li>\n<li><a href=\"#3\">其他注意事项</a><ol>\n<li><a href=\"#3.1\">map</a></li>\n<li><a href=\"#3.2\">reduce</a></li>\n</ol>\n</li>\n<li><a href=\"#4\">一些思考</a></li>\n</ol>\n<h2 id=\"1-遍历语句\"><a href=\"#1-遍历语句\" class=\"headerlink\" title=\"1.遍历语句\"></a><div id=\"1\">1.遍历语句</div></h2><h2 id=\"1-for\"><a href=\"#1-for\" class=\"headerlink\" title=\"1.for\"></a><div id=\"1.1\">1.for</div></h2><p>极其简单，极其强大，但是书写麻烦，不予赘述。</p>\n<h2 id=\"2-for-…-of\"><a href=\"#2-for-…-of\" class=\"headerlink\" title=\"2. for … of\"></a><div id=\"1.2\">2. for … of</div></h2><p>主要用来对可迭代对象进行迭代，注意一下不同迭代对象的迭代形式。</p>\n<h2 id=\"3-for-…-in\"><a href=\"#3-for-…-in\" class=\"headerlink\" title=\"3. for … in\"></a><div id=\"1.3\">3. for … in</div></h2><p><strong>以任意顺序遍历一个对象的除Symbol以外的可枚举属性</strong>，主要用来迭代对象属性以及debug。</p>\n<h2 id=\"2-数组遍历方法\"><a href=\"#2-数组遍历方法\" class=\"headerlink\" title=\"2. 数组遍历方法\"></a><div id=\"2\">2. 数组遍历方法</div></h2><p>注意点：</p>\n<ol>\n<li>遍历方法的作用。</li>\n<li>遍历方法的参数。</li>\n<li>表达式的返回值是什么？</li>\n<li>能否跳出遍历？</li>\n<li>遍历方法的推荐使用场景。</li>\n<li>遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否以调用该遍历方法时为准？</li>\n<li>遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n<th>参数</th>\n<th>返回值</th>\n<th>能否跳出遍历</th>\n<th>常见使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map</td>\n<td>对数组中的每一项使用回调方法进行处理，返回处理后的元素形成的新数组</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>处理后的元素组成的新数组。</td>\n<td>否</td>\n<td>需要对一个数组进行遍历，并且需要使用遍历产生的新数组</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>过滤数组，生成新数组</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>回调函数返回值为true的元素组成的新数组</td>\n<td>否</td>\n<td>个人用的较多的情况便是过滤数组</td>\n</tr>\n<tr>\n<td>every</td>\n<td>判断数组中的每一项是否能通过测试</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>布尔值true/false</td>\n<td>是</td>\n<td>个人觉得最正规的用途可能就是检测数组中的元素是否符合某个特点，符合正规用途的使用场景较窄。但是作为唯一一个可以中途跳出遍历的循环，也可以用作for循环的更简便的替代方案——但是不推荐这种用法，还是针对不同场景使用更加符合语义的遍历方式吧</td>\n</tr>\n<tr>\n<td>some</td>\n<td>判断数组中是否有一项使得回调函数的返回值为true</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>布尔值true/false</td>\n<td>是</td>\n<td>针对某个数据在数组中是否“存在”的判断</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>对数组中的元素进行遍历，同时在遍历过程中能够进行累加，最后返回累加器最后的值</td>\n<td>回调函数（即reducer函数，包括四个参数：累加器acc，当前值cur，索引idx，被调用的数组src），累加器的初始值</td>\n<td>reduce函数返回累加器最后的值。reducer函数的返回值由使用者定义，该返回值将被分配给累加器</td>\n<td>否</td>\n<td>对数字进行操、使用字符串连接函数等处理字符串，用途十分广泛</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td>同reduce，但遍历顺序为降序，即从数组的尾部向前遍历</td>\n<td>同reduce</td>\n<td>同reduce</td>\n<td>否</td>\n<td>同reduce</td>\n</tr>\n<tr>\n<td>find</td>\n<td>返回数组中满足提供的测试函数的第一个元素的值。</td>\n<td>回调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>数组中满足回调函数的元素的值，未命中返回<code>undefined</code></td>\n<td>是</td>\n<td>寻找数组中的某一项</td>\n</tr>\n<tr>\n<td>findIndex</td>\n<td>大致与find相同，只是返回的为满足测试函数的元素的索引</td>\n<td>同find</td>\n<td>回调函数返回值为true的元素的索引，未命中返回-1</td>\n<td>是</td>\n<td>同find</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>对数组的每个元素执行一次给定的函数</td>\n<td>调函数（当前处理的元素、索引、原数组），this参数</td>\n<td>undefined</td>\n<td>否。可以先使用filter，再使用forEach</td>\n<td>可以替代for循环，更简洁一些。由于该方法会跳过数组中的空数组单元，用来处理系数数组的效果较好</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\"><a href=\"#遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\" class=\"headerlink\" title=\"遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？\"></a>遍历过程中数组是否实时更新。换句话说：被遍历的数组在遍历时的内容是否为调用遍历方法时为准？</h3><h4 id=\"map、filter、every、some、find、findIndex等\"><a href=\"#map、filter、every、some、find、findIndex等\" class=\"headerlink\" title=\"map、filter、every、some、find、findIndex等\"></a>map、filter、every、some、find、findIndex等</h4><p>分情况，“修改”、“删除”、“新增”的情况不同，“修改”情况又分为修改前遍历该元素和修改后遍历到该元素。</p>\n<ul>\n<li>遍历中修改某个元素：在遍历到某个元素之前发生变化，遍历到该元素时得到的为变化后的值。若遍历后发生修改，则修改是会反映到原数组中的，但是不会影响之前的遍历。</li>\n<li>遍历中删除某个元素：该元素变为underfined（empty?），但仍然占据在数组中的原位置。如果方法返回的是一个新数组，同时会影响新生成的数组的该索引的元素（根据修改规则判断是否影响）。生成的数组长度不变，原数组长度也不变。</li>\n<li>遍历中新增某个元素：在遍历时不会对其进行遍历。</li>\n</ul>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>规则有点不同。如果数组在迭代时被修改了，则其他元素会被跳过。</p>\n<h3 id=\"上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\"><a href=\"#上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\" class=\"headerlink\" title=\"上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？\"></a>上述方法，遍历时传入回调函数中的元素是数组中相应项的深拷贝吗？</h3><p>不是。</p>\n<h2 id=\"3-其他注意事项\"><a href=\"#3-其他注意事项\" class=\"headerlink\" title=\"3. 其他注意事项\"></a><div id=\"3\">3. 其他注意事项</div></h2><h3 id=\"3-1-map\"><a href=\"#3-1-map\" class=\"headerlink\" title=\"3.1 map\"></a><div id=\"3.1\">3.1 map</div></h3><p>在遍历过程中一定记得写明返回值！直接更改当前遍历的内容而不反回，不会反映到遍历结束生成的数组中！比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = arr.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;i.text = <span class=\"string\">\"测试\"</span>;i.value=<span class=\"string\">\"测试\"</span>&#125;);       <span class=\"comment\">// 此时b数组中所有项的值皆undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = arr.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">text</span>:<span class=\"string\">\"测试\"</span>,<span class=\"attr\">value</span>:<span class=\"string\">\"测试\"</span>&#125;&#125;)     <span class=\"comment\">// 此时b数组所有项的值才为一个包含text和value属性的对象</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-reduce\"><a href=\"#3-2-reduce\" class=\"headerlink\" title=\"3.2 reduce\"></a><div id=\"3.2\">3.2 reduce</div></h3><p>注意一下reduce函数中累加器的初始值设置。</p>\n<h2 id=\"4-一些思考\"><a href=\"#4-一些思考\" class=\"headerlink\" title=\"4. 一些思考\"></a><div id=\"4\">4. 一些思考</div></h2><p>for循环功能很强大，但总不能处处都用for循环。在项目中只用for可能会徒增不必要的代码，使得代码写的复杂、晦涩，存在大量重复等。代码在保证运行效率的情况下，应该足够简洁，编写的代码才会更易懂、易维护，应该针对不同的场景使用合适的遍历方法。</p>\n"},{"title":"JavaScript中的引用类型总结","date":"2020-03-16T02:25:50.000Z","_content":"\n常用的引用类型：\n1. Object类型。\n2. Array类型。\n3. Date类型。\n4. RegExp类型。\n5. Function类型。\n6. 基本包装类型（Boolean、Number、String）。\n7.  Global对象。\n\n其他：\n1. instanceof运算符\n\n## 1. Objet类型\n### 创建实例的方法\n1. 使用Object构造函数：`var a = new Object()`\n2. 对象字面量方法：`var person = {name:'Michael Zhang'}`\n\n### 访问对象属性\n1. 使用点表示法：`alert(person.name)`\n2. 使用方括号语法：`alert(person['name'])`\n\n## 2. Array类型\n### 创建数组的方法\n1. 使用Array构造函数：`var nums = new Array(arrayLength)`，`var nums = Array(1,2,3,4,5)`\n2. 使用数组字面量的方法：`var colors = [\"red\",\"green\"]`\n\n### 判断Array的方式\n1. `Array.isArray(arr)`最推荐！\n2. `instanceof` 运算符。如果有多个全局作用域可能会失效。\n\n### 数组的排序方法\n1. `sort()`，默认调用每个数组项的`toString()`方法，默认比较数组项的UTF-16代码单元值序列，按升序排列。接收一个比较函数作为参数，用于对数组项的两两比较。比较函数接收两个参数，分别代表当前比较的两个元素。如果比较函数的参数分别为a,b,返回值小于0，则a在b前。若等于0，二者相对位置不变，若返回值大于0，则b在a前。\n\n### 数组与数据结构相关的方法\n1. 栈方法。\n    * 入栈`push()`，如`colors.push(\"brown\",\"yellow\")`，返回值为入栈后的数组长度。\n    * 出栈`pop()`，返回值为数组的最后一项。\n2. 队列方法。\n    * 入队`push()`，返回值为入队列后的数组长度。\n    * 出队`shift()`，返回值为数组的第一项。`unshift`与之相反，是添加任意项元素至数组头部，返回值为插入后的数组长度。\n\n### 奇淫技巧\n1. length属性——数组的长度，是可以手动设置的。可以用来给数组末尾添加项：`var colors = [\"red\"];colors[colors.length] = \"green\";`\n\n## 3. Date类型\nDate()对象表示某个时刻。\n\n### 构造器\n\n#### 1. 无参数\n* 语法：`new Date()`\n* 返回一个Date对象，该对象表示实例化Date()时的时刻。\n\n#### 2. Unix时间戳\n* 语法`new Date(timestamp)`\n* 示例：`new Date((new Date()).getTime()-1000*60*60*24)`，获取表示昨天当前时刻的date对象。\n* 什么是Unix时间戳？一个 Unix 时间戳（Unix Time Stamp），它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。\n\n#### 3. 字符串（不建议）\n* 形式：`new Date(dateString)`\n* 示例：`new Date('2020-03-16')`，获取表示当前日期、时间的小时数等于当前时区（博主是东八区），分、秒皆为0的时刻。该示例返回的时间日期为：`\"Sun Feb 02 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n* 字符串的要求：该dateString需要能被`date.parse()`识别。\n\n#### 4. 提供时间与日期的每一项成员\n* 语法：`new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])`\n* 示例1：`new Date(2020,2)`，返回的date对象时间和日期为：`\"Sun Mar 01 2020 00:00:00 GMT+0800 (中国标准时间)\"`\n    * **注意1**：月数的索引从0开始，与字符串形式的索引不一致。\n    * **注意2**：时间默认从当前时区的0点开始。\n* 示例2：执行语句`new Date(2020,3,16)`返回的date对象的时间和日期为：`\"Thu Apr 16 2020 00:00:00 GMT+0800 (中国标准时间)\"`\n\n### 静态方法\n* `Date.now()`，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.now()`。执行结果：`1584452901581`\n* `Date.parse()`，解析一个表示日期的字符串，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.parse('2020-03-17')`，执行结果：`1584403200000`\n    * 执行语句：`(new Date(Date.parse(\"2020-03-17\"))).toString()`，执行结果：`\"Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n    * **不建议使用，因浏览器的实现有差异**\n* `Date.UTC()`接受参数同构造器4“提供时间与日期的每一项成员”，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.parse(2020,02,17)`，执行结果：`1584403200000`。注意此处的月份索引从0开始。\n    * 执行语句：`(new Date(Date.parse(2020,02,17))).toString()`，执行结果：`\"Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toDateString()`\n* 作用：以人类易读（human-readable）的形式返回该日期对象日期部分的字符串。\n* 执行语句：`(new Date()).toDateString()`。执行结果：`\"Tue Mar 17 2020\"`\n\n####  `Date.prototype.toISOString()`\n* 作用：把一个日期转换为符合 ISO 8601 扩展格式的字符串。》》》》》这里最好也做一个跳链。\n* ISO 8601：由国际标准化组织（ISO）提出的编号为8601的标准。该标准的全部内容需要收费阅读，但作为开发我们只需要看万维网联盟（W3C）根据ISO内容制定的标准即可[Date and Time Formats](https://www.w3.org/TR/NOTE-datetime)。比较重要的内容如下：\n    * 完整的日期与时间格式，包含年、月、日、时、分、秒、秒的小数位和时区指示符：`YYYY-MM-DDThh:mm:ssTZD`，例如：`1997-07-16T19:20:30+01:00`。\n    * 使用UTC时区，则显示时区指示符`Z`\n    * 使用本地时区，则显示时区指示符`+hh:mm`或`-hh:mm`。`+hh:mm`含义为\"本地时区相较于UTC时区，要快hh个小时、mm分钟；`-hh:mm`含义为\"本地时区相较于UTC时区要慢hh个小时、mm分钟\"。\n* 执行语句：`(new Date()).toISOString()`。执行结果：`\"2020-03-17T14:22:12.947Z\"`（注：此时本地时间为2020-03-17,22:22:12）\n \n#### `Date.prototype.toJSON()`\n* 作用：使用 toISOString() 返回一个表示该日期的字符串。为了在 JSON.stringify() 方法中使用。\n* 调用`toJSON()`作用和调用`toISOString()`一样一样的。为什么呢？请看后文》》》》这里给个跳链。\n* 执行语句：`(new Date()).toJSON()`。执行结果：`\"2020-03-17T15:30:30.979Z\"`。\n\n#### `Date.prototype.toGMTString()`\n* 作用：返回一个基于 GMT (UT) 时区的字符串来表示该日期。**mdn官方不建议使用，请使用 toUTCString() 方法代替。**\n* 执行语句：`(new Date()).toGMTString()`。执行结果：`\"Tue, 17 Mar 2020 15:37:56 GMT\"`\n\n#### `Date.prototype.toLocaleDateString()`\n* 作用：返回一个表示该日期对象日期部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。\n* 执行语句：`(new Date()).toLocaleDateString()`。执行结果：`\"2020/3/18\"`\n\n#### `Date.prototype.toLocaleString()`\n* 作用：返回一个表示该日期对象的字符串，该字符串与系统设置的地区关联（locality sensitive）。覆盖了 Object.prototype.toLocaleString() 方法。\n* 执行语句：`(new Date()).toLocaleString()`。执行结果：`\"2020/3/18 下午11:45:03\"`\n\n#### `Date.prototype.toLocaleTimeString()`\n* 作用：返回一个表示该日期对象时间部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。\n* 执行语句：`(new Date()).toLocaleTimeString()`。执行结果：`\"下午11:47:12\"`\n\n#### `Date.prototype.toString()`\n* 作用：返回一个表示该日期对象的字符串。覆盖了Object.prototype.toString() 方法。\n* 执行语句：`(new Date()).toString()`。执行结果：`\"Wed Mar 18 2020 23:48:31 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toTimeString()`\n* 作用：以人类易读格式返回日期对象时间部分的字符串。\n* 执行语句：`(new Date()).toTimeString()`。执行结果：`\"23:50:22 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toUTCString()`\n* 作用：把一个日期对象转换为一个以UTC时区计时的字符串。\n* 执行语句：`(new Date()).toUTCString()`。执行结果：`\"Wed, 18 Mar 2020 15:51:49 GMT\"`\n\n#### `Date.prototype.valueOf`\n* 作用：返回一个日期对象的原始值。覆盖了 Object.prototype.valueOf() 方法。\n* 执行语句：`(new Date()).valueOf()`。执行结果：`1584546764856`\n\n\n\n\n\n## 4. RegExp类型\n### 创建实例的方法\n1. 使用RegExp构造函数：`var pattern1 = new RegExp(\"[bc]at\",\"i\")`，`var pattern1 = new RegExp(/ab+c/,\"i\")`\n2. 使用字面量形式：`var pattern2 = /[bc]at/i`\n\n### 匹配方法\n1. `exec()`，如：`var arr =  regex1.exec(str1)`。可以获取匹配的字符位于原字符串的索引、分组捕获、原始字符串等信息，同时RegExp对象也会更新下一次匹配开始的位置。更多信息详见：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n2. `test()`，用来查看正则表达式与指定的字符串是否匹配，如：`let result = /^hello/.test(str)`\n\n## 5. Function类型。\n### 创建Function的方法\n1. 函数声明。如：`function sum(num1,num2){return num1+num2}`\n2. 函数表达式。如：`var sum = function(num1,num2){return num1+num2}`\n注意，函数声明存在提升。\n\n### 函数内部的两个特殊变量\n1. `arguments`，保存函数参数。`arguments`有一个特殊属性`callee`，可用于与函数名解耦。\n2. `this`。\n\n### 函数的属性和方法\n1. `length`属性，表示函数希望接收的命名参数的个数。\n2. `proptotype`属性。\n3. `apply`、`call`和`bind`，更改函数的作用域。`functionName.apply(作用域，arguments数组)`,`functionName.call(作用域，数组1，数组2)`，`var newFunction = functionName.bind(作用域)`\n\n## 6. 基本包装类型\n基本包装类型是对应基本类型值的特殊的引用类型\n读取String、Boolean或者Number基本类型值时，后台可能会执行如下操作：\n1. 创建String类型的一个实例。\n2. 在实例上调用指定的方法。\n3. 销毁这个实例。\n注意：后台自动生成的基本包装类型对象，和通过`new`操作符生成的基本包装类型对象，生命周期不同。后台自动生成的对象，只存在于一行代码执行的瞬间。而`new`操作符生成的基本包装类型的对象，在执行流离开当前作用域之前都一直保存在内存中。\n\n### Boolean包装类型\n注意，在布尔表达式中使用Boolean对象，会将其转化为true。\n建议永远不要使用Boolean对象。\n\n### Number包装类型\n1. `toString()`方法可以传递一个表示基数的参数。\n2. `toFixed()`方法可以传递指定小数位数的数字，将按指定的小数位返回数值的字符串表示。\n\n### String包装类型\n1. `concat()`，将一个或多个字符串拼接起来，返回拼接得到的新字符串。\n\n## 7. Global对象\nMath对象、Window对象等\n\n## 其他\n## 1. instance运算符\n用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。","source":"_posts/js基础/js引用类型.md","raw":"---\ntitle: JavaScript中的引用类型总结 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-03-16 10:25:50 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [前端, js] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n\n常用的引用类型：\n1. Object类型。\n2. Array类型。\n3. Date类型。\n4. RegExp类型。\n5. Function类型。\n6. 基本包装类型（Boolean、Number、String）。\n7.  Global对象。\n\n其他：\n1. instanceof运算符\n\n## 1. Objet类型\n### 创建实例的方法\n1. 使用Object构造函数：`var a = new Object()`\n2. 对象字面量方法：`var person = {name:'Michael Zhang'}`\n\n### 访问对象属性\n1. 使用点表示法：`alert(person.name)`\n2. 使用方括号语法：`alert(person['name'])`\n\n## 2. Array类型\n### 创建数组的方法\n1. 使用Array构造函数：`var nums = new Array(arrayLength)`，`var nums = Array(1,2,3,4,5)`\n2. 使用数组字面量的方法：`var colors = [\"red\",\"green\"]`\n\n### 判断Array的方式\n1. `Array.isArray(arr)`最推荐！\n2. `instanceof` 运算符。如果有多个全局作用域可能会失效。\n\n### 数组的排序方法\n1. `sort()`，默认调用每个数组项的`toString()`方法，默认比较数组项的UTF-16代码单元值序列，按升序排列。接收一个比较函数作为参数，用于对数组项的两两比较。比较函数接收两个参数，分别代表当前比较的两个元素。如果比较函数的参数分别为a,b,返回值小于0，则a在b前。若等于0，二者相对位置不变，若返回值大于0，则b在a前。\n\n### 数组与数据结构相关的方法\n1. 栈方法。\n    * 入栈`push()`，如`colors.push(\"brown\",\"yellow\")`，返回值为入栈后的数组长度。\n    * 出栈`pop()`，返回值为数组的最后一项。\n2. 队列方法。\n    * 入队`push()`，返回值为入队列后的数组长度。\n    * 出队`shift()`，返回值为数组的第一项。`unshift`与之相反，是添加任意项元素至数组头部，返回值为插入后的数组长度。\n\n### 奇淫技巧\n1. length属性——数组的长度，是可以手动设置的。可以用来给数组末尾添加项：`var colors = [\"red\"];colors[colors.length] = \"green\";`\n\n## 3. Date类型\nDate()对象表示某个时刻。\n\n### 构造器\n\n#### 1. 无参数\n* 语法：`new Date()`\n* 返回一个Date对象，该对象表示实例化Date()时的时刻。\n\n#### 2. Unix时间戳\n* 语法`new Date(timestamp)`\n* 示例：`new Date((new Date()).getTime()-1000*60*60*24)`，获取表示昨天当前时刻的date对象。\n* 什么是Unix时间戳？一个 Unix 时间戳（Unix Time Stamp），它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。\n\n#### 3. 字符串（不建议）\n* 形式：`new Date(dateString)`\n* 示例：`new Date('2020-03-16')`，获取表示当前日期、时间的小时数等于当前时区（博主是东八区），分、秒皆为0的时刻。该示例返回的时间日期为：`\"Sun Feb 02 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n* 字符串的要求：该dateString需要能被`date.parse()`识别。\n\n#### 4. 提供时间与日期的每一项成员\n* 语法：`new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])`\n* 示例1：`new Date(2020,2)`，返回的date对象时间和日期为：`\"Sun Mar 01 2020 00:00:00 GMT+0800 (中国标准时间)\"`\n    * **注意1**：月数的索引从0开始，与字符串形式的索引不一致。\n    * **注意2**：时间默认从当前时区的0点开始。\n* 示例2：执行语句`new Date(2020,3,16)`返回的date对象的时间和日期为：`\"Thu Apr 16 2020 00:00:00 GMT+0800 (中国标准时间)\"`\n\n### 静态方法\n* `Date.now()`，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.now()`。执行结果：`1584452901581`\n* `Date.parse()`，解析一个表示日期的字符串，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.parse('2020-03-17')`，执行结果：`1584403200000`\n    * 执行语句：`(new Date(Date.parse(\"2020-03-17\"))).toString()`，执行结果：`\"Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n    * **不建议使用，因浏览器的实现有差异**\n* `Date.UTC()`接受参数同构造器4“提供时间与日期的每一项成员”，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。\n    * 执行语句：`Date.parse(2020,02,17)`，执行结果：`1584403200000`。注意此处的月份索引从0开始。\n    * 执行语句：`(new Date(Date.parse(2020,02,17))).toString()`，执行结果：`\"Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toDateString()`\n* 作用：以人类易读（human-readable）的形式返回该日期对象日期部分的字符串。\n* 执行语句：`(new Date()).toDateString()`。执行结果：`\"Tue Mar 17 2020\"`\n\n####  `Date.prototype.toISOString()`\n* 作用：把一个日期转换为符合 ISO 8601 扩展格式的字符串。》》》》》这里最好也做一个跳链。\n* ISO 8601：由国际标准化组织（ISO）提出的编号为8601的标准。该标准的全部内容需要收费阅读，但作为开发我们只需要看万维网联盟（W3C）根据ISO内容制定的标准即可[Date and Time Formats](https://www.w3.org/TR/NOTE-datetime)。比较重要的内容如下：\n    * 完整的日期与时间格式，包含年、月、日、时、分、秒、秒的小数位和时区指示符：`YYYY-MM-DDThh:mm:ssTZD`，例如：`1997-07-16T19:20:30+01:00`。\n    * 使用UTC时区，则显示时区指示符`Z`\n    * 使用本地时区，则显示时区指示符`+hh:mm`或`-hh:mm`。`+hh:mm`含义为\"本地时区相较于UTC时区，要快hh个小时、mm分钟；`-hh:mm`含义为\"本地时区相较于UTC时区要慢hh个小时、mm分钟\"。\n* 执行语句：`(new Date()).toISOString()`。执行结果：`\"2020-03-17T14:22:12.947Z\"`（注：此时本地时间为2020-03-17,22:22:12）\n \n#### `Date.prototype.toJSON()`\n* 作用：使用 toISOString() 返回一个表示该日期的字符串。为了在 JSON.stringify() 方法中使用。\n* 调用`toJSON()`作用和调用`toISOString()`一样一样的。为什么呢？请看后文》》》》这里给个跳链。\n* 执行语句：`(new Date()).toJSON()`。执行结果：`\"2020-03-17T15:30:30.979Z\"`。\n\n#### `Date.prototype.toGMTString()`\n* 作用：返回一个基于 GMT (UT) 时区的字符串来表示该日期。**mdn官方不建议使用，请使用 toUTCString() 方法代替。**\n* 执行语句：`(new Date()).toGMTString()`。执行结果：`\"Tue, 17 Mar 2020 15:37:56 GMT\"`\n\n#### `Date.prototype.toLocaleDateString()`\n* 作用：返回一个表示该日期对象日期部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。\n* 执行语句：`(new Date()).toLocaleDateString()`。执行结果：`\"2020/3/18\"`\n\n#### `Date.prototype.toLocaleString()`\n* 作用：返回一个表示该日期对象的字符串，该字符串与系统设置的地区关联（locality sensitive）。覆盖了 Object.prototype.toLocaleString() 方法。\n* 执行语句：`(new Date()).toLocaleString()`。执行结果：`\"2020/3/18 下午11:45:03\"`\n\n#### `Date.prototype.toLocaleTimeString()`\n* 作用：返回一个表示该日期对象时间部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。\n* 执行语句：`(new Date()).toLocaleTimeString()`。执行结果：`\"下午11:47:12\"`\n\n#### `Date.prototype.toString()`\n* 作用：返回一个表示该日期对象的字符串。覆盖了Object.prototype.toString() 方法。\n* 执行语句：`(new Date()).toString()`。执行结果：`\"Wed Mar 18 2020 23:48:31 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toTimeString()`\n* 作用：以人类易读格式返回日期对象时间部分的字符串。\n* 执行语句：`(new Date()).toTimeString()`。执行结果：`\"23:50:22 GMT+0800 (中国标准时间)\"`\n\n#### `Date.prototype.toUTCString()`\n* 作用：把一个日期对象转换为一个以UTC时区计时的字符串。\n* 执行语句：`(new Date()).toUTCString()`。执行结果：`\"Wed, 18 Mar 2020 15:51:49 GMT\"`\n\n#### `Date.prototype.valueOf`\n* 作用：返回一个日期对象的原始值。覆盖了 Object.prototype.valueOf() 方法。\n* 执行语句：`(new Date()).valueOf()`。执行结果：`1584546764856`\n\n\n\n\n\n## 4. RegExp类型\n### 创建实例的方法\n1. 使用RegExp构造函数：`var pattern1 = new RegExp(\"[bc]at\",\"i\")`，`var pattern1 = new RegExp(/ab+c/,\"i\")`\n2. 使用字面量形式：`var pattern2 = /[bc]at/i`\n\n### 匹配方法\n1. `exec()`，如：`var arr =  regex1.exec(str1)`。可以获取匹配的字符位于原字符串的索引、分组捕获、原始字符串等信息，同时RegExp对象也会更新下一次匹配开始的位置。更多信息详见：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n2. `test()`，用来查看正则表达式与指定的字符串是否匹配，如：`let result = /^hello/.test(str)`\n\n## 5. Function类型。\n### 创建Function的方法\n1. 函数声明。如：`function sum(num1,num2){return num1+num2}`\n2. 函数表达式。如：`var sum = function(num1,num2){return num1+num2}`\n注意，函数声明存在提升。\n\n### 函数内部的两个特殊变量\n1. `arguments`，保存函数参数。`arguments`有一个特殊属性`callee`，可用于与函数名解耦。\n2. `this`。\n\n### 函数的属性和方法\n1. `length`属性，表示函数希望接收的命名参数的个数。\n2. `proptotype`属性。\n3. `apply`、`call`和`bind`，更改函数的作用域。`functionName.apply(作用域，arguments数组)`,`functionName.call(作用域，数组1，数组2)`，`var newFunction = functionName.bind(作用域)`\n\n## 6. 基本包装类型\n基本包装类型是对应基本类型值的特殊的引用类型\n读取String、Boolean或者Number基本类型值时，后台可能会执行如下操作：\n1. 创建String类型的一个实例。\n2. 在实例上调用指定的方法。\n3. 销毁这个实例。\n注意：后台自动生成的基本包装类型对象，和通过`new`操作符生成的基本包装类型对象，生命周期不同。后台自动生成的对象，只存在于一行代码执行的瞬间。而`new`操作符生成的基本包装类型的对象，在执行流离开当前作用域之前都一直保存在内存中。\n\n### Boolean包装类型\n注意，在布尔表达式中使用Boolean对象，会将其转化为true。\n建议永远不要使用Boolean对象。\n\n### Number包装类型\n1. `toString()`方法可以传递一个表示基数的参数。\n2. `toFixed()`方法可以传递指定小数位数的数字，将按指定的小数位返回数值的字符串表示。\n\n### String包装类型\n1. `concat()`，将一个或多个字符串拼接起来，返回拼接得到的新字符串。\n\n## 7. Global对象\nMath对象、Window对象等\n\n## 其他\n## 1. instance运算符\n用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。","slug":"js基础/js引用类型","published":1,"updated":"2020-08-22T07:23:34.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6c000blzrvw8d8m2jz","content":"<p>常用的引用类型：</p>\n<ol>\n<li>Object类型。</li>\n<li>Array类型。</li>\n<li>Date类型。</li>\n<li>RegExp类型。</li>\n<li>Function类型。</li>\n<li>基本包装类型（Boolean、Number、String）。</li>\n<li>Global对象。</li>\n</ol>\n<p>其他：</p>\n<ol>\n<li>instanceof运算符</li>\n</ol>\n<h2 id=\"1-Objet类型\"><a href=\"#1-Objet类型\" class=\"headerlink\" title=\"1. Objet类型\"></a>1. Objet类型</h2><h3 id=\"创建实例的方法\"><a href=\"#创建实例的方法\" class=\"headerlink\" title=\"创建实例的方法\"></a>创建实例的方法</h3><ol>\n<li>使用Object构造函数：<code>var a = new Object()</code></li>\n<li>对象字面量方法：<code>var person = {name:&#39;Michael Zhang&#39;}</code></li>\n</ol>\n<h3 id=\"访问对象属性\"><a href=\"#访问对象属性\" class=\"headerlink\" title=\"访问对象属性\"></a>访问对象属性</h3><ol>\n<li>使用点表示法：<code>alert(person.name)</code></li>\n<li>使用方括号语法：<code>alert(person[&#39;name&#39;])</code></li>\n</ol>\n<h2 id=\"2-Array类型\"><a href=\"#2-Array类型\" class=\"headerlink\" title=\"2. Array类型\"></a>2. Array类型</h2><h3 id=\"创建数组的方法\"><a href=\"#创建数组的方法\" class=\"headerlink\" title=\"创建数组的方法\"></a>创建数组的方法</h3><ol>\n<li>使用Array构造函数：<code>var nums = new Array(arrayLength)</code>，<code>var nums = Array(1,2,3,4,5)</code></li>\n<li>使用数组字面量的方法：<code>var colors = [&quot;red&quot;,&quot;green&quot;]</code></li>\n</ol>\n<h3 id=\"判断Array的方式\"><a href=\"#判断Array的方式\" class=\"headerlink\" title=\"判断Array的方式\"></a>判断Array的方式</h3><ol>\n<li><code>Array.isArray(arr)</code>最推荐！</li>\n<li><code>instanceof</code> 运算符。如果有多个全局作用域可能会失效。</li>\n</ol>\n<h3 id=\"数组的排序方法\"><a href=\"#数组的排序方法\" class=\"headerlink\" title=\"数组的排序方法\"></a>数组的排序方法</h3><ol>\n<li><code>sort()</code>，默认调用每个数组项的<code>toString()</code>方法，默认比较数组项的UTF-16代码单元值序列，按升序排列。接收一个比较函数作为参数，用于对数组项的两两比较。比较函数接收两个参数，分别代表当前比较的两个元素。如果比较函数的参数分别为a,b,返回值小于0，则a在b前。若等于0，二者相对位置不变，若返回值大于0，则b在a前。</li>\n</ol>\n<h3 id=\"数组与数据结构相关的方法\"><a href=\"#数组与数据结构相关的方法\" class=\"headerlink\" title=\"数组与数据结构相关的方法\"></a>数组与数据结构相关的方法</h3><ol>\n<li>栈方法。<ul>\n<li>入栈<code>push()</code>，如<code>colors.push(&quot;brown&quot;,&quot;yellow&quot;)</code>，返回值为入栈后的数组长度。</li>\n<li>出栈<code>pop()</code>，返回值为数组的最后一项。</li>\n</ul>\n</li>\n<li>队列方法。<ul>\n<li>入队<code>push()</code>，返回值为入队列后的数组长度。</li>\n<li>出队<code>shift()</code>，返回值为数组的第一项。<code>unshift</code>与之相反，是添加任意项元素至数组头部，返回值为插入后的数组长度。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"奇淫技巧\"><a href=\"#奇淫技巧\" class=\"headerlink\" title=\"奇淫技巧\"></a>奇淫技巧</h3><ol>\n<li>length属性——数组的长度，是可以手动设置的。可以用来给数组末尾添加项：<code>var colors = [&quot;red&quot;];colors[colors.length] = &quot;green&quot;;</code></li>\n</ol>\n<h2 id=\"3-Date类型\"><a href=\"#3-Date类型\" class=\"headerlink\" title=\"3. Date类型\"></a>3. Date类型</h2><p>Date()对象表示某个时刻。</p>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><h4 id=\"1-无参数\"><a href=\"#1-无参数\" class=\"headerlink\" title=\"1. 无参数\"></a>1. 无参数</h4><ul>\n<li>语法：<code>new Date()</code></li>\n<li>返回一个Date对象，该对象表示实例化Date()时的时刻。</li>\n</ul>\n<h4 id=\"2-Unix时间戳\"><a href=\"#2-Unix时间戳\" class=\"headerlink\" title=\"2. Unix时间戳\"></a>2. Unix时间戳</h4><ul>\n<li>语法<code>new Date(timestamp)</code></li>\n<li>示例：<code>new Date((new Date()).getTime()-1000*60*60*24)</code>，获取表示昨天当前时刻的date对象。</li>\n<li>什么是Unix时间戳？一个 Unix 时间戳（Unix Time Stamp），它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。</li>\n</ul>\n<h4 id=\"3-字符串（不建议）\"><a href=\"#3-字符串（不建议）\" class=\"headerlink\" title=\"3. 字符串（不建议）\"></a>3. 字符串（不建议）</h4><ul>\n<li>形式：<code>new Date(dateString)</code></li>\n<li>示例：<code>new Date(&#39;2020-03-16&#39;)</code>，获取表示当前日期、时间的小时数等于当前时区（博主是东八区），分、秒皆为0的时刻。该示例返回的时间日期为：<code>&quot;Sun Feb 02 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n<li>字符串的要求：该dateString需要能被<code>date.parse()</code>识别。</li>\n</ul>\n<h4 id=\"4-提供时间与日期的每一项成员\"><a href=\"#4-提供时间与日期的每一项成员\" class=\"headerlink\" title=\"4. 提供时间与日期的每一项成员\"></a>4. 提供时间与日期的每一项成员</h4><ul>\n<li>语法：<code>new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</code></li>\n<li>示例1：<code>new Date(2020,2)</code>，返回的date对象时间和日期为：<code>&quot;Sun Mar 01 2020 00:00:00 GMT+0800 (中国标准时间)&quot;</code><ul>\n<li><strong>注意1</strong>：月数的索引从0开始，与字符串形式的索引不一致。</li>\n<li><strong>注意2</strong>：时间默认从当前时区的0点开始。</li>\n</ul>\n</li>\n<li>示例2：执行语句<code>new Date(2020,3,16)</code>返回的date对象的时间和日期为：<code>&quot;Thu Apr 16 2020 00:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul>\n<li><code>Date.now()</code>，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.now()</code>。执行结果：<code>1584452901581</code></li>\n</ul>\n</li>\n<li><code>Date.parse()</code>，解析一个表示日期的字符串，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.parse(&#39;2020-03-17&#39;)</code>，执行结果：<code>1584403200000</code></li>\n<li>执行语句：<code>(new Date(Date.parse(&quot;2020-03-17&quot;))).toString()</code>，执行结果：<code>&quot;Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n<li><strong>不建议使用，因浏览器的实现有差异</strong></li>\n</ul>\n</li>\n<li><code>Date.UTC()</code>接受参数同构造器4“提供时间与日期的每一项成员”，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.parse(2020,02,17)</code>，执行结果：<code>1584403200000</code>。注意此处的月份索引从0开始。</li>\n<li>执行语句：<code>(new Date(Date.parse(2020,02,17))).toString()</code>，执行结果：<code>&quot;Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Date-prototype-toDateString\"><a href=\"#Date-prototype-toDateString\" class=\"headerlink\" title=\"Date.prototype.toDateString()\"></a><code>Date.prototype.toDateString()</code></h4><ul>\n<li>作用：以人类易读（human-readable）的形式返回该日期对象日期部分的字符串。</li>\n<li>执行语句：<code>(new Date()).toDateString()</code>。执行结果：<code>&quot;Tue Mar 17 2020&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toISOString\"><a href=\"#Date-prototype-toISOString\" class=\"headerlink\" title=\"Date.prototype.toISOString()\"></a><code>Date.prototype.toISOString()</code></h4><ul>\n<li>作用：把一个日期转换为符合 ISO 8601 扩展格式的字符串。》》》》》这里最好也做一个跳链。</li>\n<li>ISO 8601：由国际标准化组织（ISO）提出的编号为8601的标准。该标准的全部内容需要收费阅读，但作为开发我们只需要看万维网联盟（W3C）根据ISO内容制定的标准即可<a href=\"https://www.w3.org/TR/NOTE-datetime\" target=\"_blank\" rel=\"noopener\">Date and Time Formats</a>。比较重要的内容如下：<ul>\n<li>完整的日期与时间格式，包含年、月、日、时、分、秒、秒的小数位和时区指示符：<code>YYYY-MM-DDThh:mm:ssTZD</code>，例如：<code>1997-07-16T19:20:30+01:00</code>。</li>\n<li>使用UTC时区，则显示时区指示符<code>Z</code></li>\n<li>使用本地时区，则显示时区指示符<code>+hh:mm</code>或<code>-hh:mm</code>。<code>+hh:mm</code>含义为”本地时区相较于UTC时区，要快hh个小时、mm分钟；<code>-hh:mm</code>含义为”本地时区相较于UTC时区要慢hh个小时、mm分钟”。</li>\n</ul>\n</li>\n<li>执行语句：<code>(new Date()).toISOString()</code>。执行结果：<code>&quot;2020-03-17T14:22:12.947Z&quot;</code>（注：此时本地时间为2020-03-17,22:22:12）</li>\n</ul>\n<h4 id=\"Date-prototype-toJSON\"><a href=\"#Date-prototype-toJSON\" class=\"headerlink\" title=\"Date.prototype.toJSON()\"></a><code>Date.prototype.toJSON()</code></h4><ul>\n<li>作用：使用 toISOString() 返回一个表示该日期的字符串。为了在 JSON.stringify() 方法中使用。</li>\n<li>调用<code>toJSON()</code>作用和调用<code>toISOString()</code>一样一样的。为什么呢？请看后文》》》》这里给个跳链。</li>\n<li>执行语句：<code>(new Date()).toJSON()</code>。执行结果：<code>&quot;2020-03-17T15:30:30.979Z&quot;</code>。</li>\n</ul>\n<h4 id=\"Date-prototype-toGMTString\"><a href=\"#Date-prototype-toGMTString\" class=\"headerlink\" title=\"Date.prototype.toGMTString()\"></a><code>Date.prototype.toGMTString()</code></h4><ul>\n<li>作用：返回一个基于 GMT (UT) 时区的字符串来表示该日期。<strong>mdn官方不建议使用，请使用 toUTCString() 方法代替。</strong></li>\n<li>执行语句：<code>(new Date()).toGMTString()</code>。执行结果：<code>&quot;Tue, 17 Mar 2020 15:37:56 GMT&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleDateString\"><a href=\"#Date-prototype-toLocaleDateString\" class=\"headerlink\" title=\"Date.prototype.toLocaleDateString()\"></a><code>Date.prototype.toLocaleDateString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象日期部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。</li>\n<li>执行语句：<code>(new Date()).toLocaleDateString()</code>。执行结果：<code>&quot;2020/3/18&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleString\"><a href=\"#Date-prototype-toLocaleString\" class=\"headerlink\" title=\"Date.prototype.toLocaleString()\"></a><code>Date.prototype.toLocaleString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象的字符串，该字符串与系统设置的地区关联（locality sensitive）。覆盖了 Object.prototype.toLocaleString() 方法。</li>\n<li>执行语句：<code>(new Date()).toLocaleString()</code>。执行结果：<code>&quot;2020/3/18 下午11:45:03&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleTimeString\"><a href=\"#Date-prototype-toLocaleTimeString\" class=\"headerlink\" title=\"Date.prototype.toLocaleTimeString()\"></a><code>Date.prototype.toLocaleTimeString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象时间部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。</li>\n<li>执行语句：<code>(new Date()).toLocaleTimeString()</code>。执行结果：<code>&quot;下午11:47:12&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toString\"><a href=\"#Date-prototype-toString\" class=\"headerlink\" title=\"Date.prototype.toString()\"></a><code>Date.prototype.toString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象的字符串。覆盖了Object.prototype.toString() 方法。</li>\n<li>执行语句：<code>(new Date()).toString()</code>。执行结果：<code>&quot;Wed Mar 18 2020 23:48:31 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toTimeString\"><a href=\"#Date-prototype-toTimeString\" class=\"headerlink\" title=\"Date.prototype.toTimeString()\"></a><code>Date.prototype.toTimeString()</code></h4><ul>\n<li>作用：以人类易读格式返回日期对象时间部分的字符串。</li>\n<li>执行语句：<code>(new Date()).toTimeString()</code>。执行结果：<code>&quot;23:50:22 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toUTCString\"><a href=\"#Date-prototype-toUTCString\" class=\"headerlink\" title=\"Date.prototype.toUTCString()\"></a><code>Date.prototype.toUTCString()</code></h4><ul>\n<li>作用：把一个日期对象转换为一个以UTC时区计时的字符串。</li>\n<li>执行语句：<code>(new Date()).toUTCString()</code>。执行结果：<code>&quot;Wed, 18 Mar 2020 15:51:49 GMT&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-valueOf\"><a href=\"#Date-prototype-valueOf\" class=\"headerlink\" title=\"Date.prototype.valueOf\"></a><code>Date.prototype.valueOf</code></h4><ul>\n<li>作用：返回一个日期对象的原始值。覆盖了 Object.prototype.valueOf() 方法。</li>\n<li>执行语句：<code>(new Date()).valueOf()</code>。执行结果：<code>1584546764856</code></li>\n</ul>\n<h2 id=\"4-RegExp类型\"><a href=\"#4-RegExp类型\" class=\"headerlink\" title=\"4. RegExp类型\"></a>4. RegExp类型</h2><h3 id=\"创建实例的方法-1\"><a href=\"#创建实例的方法-1\" class=\"headerlink\" title=\"创建实例的方法\"></a>创建实例的方法</h3><ol>\n<li>使用RegExp构造函数：<code>var pattern1 = new RegExp(&quot;[bc]at&quot;,&quot;i&quot;)</code>，<code>var pattern1 = new RegExp(/ab+c/,&quot;i&quot;)</code></li>\n<li>使用字面量形式：<code>var pattern2 = /[bc]at/i</code></li>\n</ol>\n<h3 id=\"匹配方法\"><a href=\"#匹配方法\" class=\"headerlink\" title=\"匹配方法\"></a>匹配方法</h3><ol>\n<li><code>exec()</code>，如：<code>var arr =  regex1.exec(str1)</code>。可以获取匹配的字符位于原字符串的索引、分组捕获、原始字符串等信息，同时RegExp对象也会更新下一次匹配开始的位置。更多信息详见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec</a></li>\n<li><code>test()</code>，用来查看正则表达式与指定的字符串是否匹配，如：<code>let result = /^hello/.test(str)</code></li>\n</ol>\n<h2 id=\"5-Function类型。\"><a href=\"#5-Function类型。\" class=\"headerlink\" title=\"5. Function类型。\"></a>5. Function类型。</h2><h3 id=\"创建Function的方法\"><a href=\"#创建Function的方法\" class=\"headerlink\" title=\"创建Function的方法\"></a>创建Function的方法</h3><ol>\n<li>函数声明。如：<code>function sum(num1,num2){return num1+num2}</code></li>\n<li>函数表达式。如：<code>var sum = function(num1,num2){return num1+num2}</code><br>注意，函数声明存在提升。</li>\n</ol>\n<h3 id=\"函数内部的两个特殊变量\"><a href=\"#函数内部的两个特殊变量\" class=\"headerlink\" title=\"函数内部的两个特殊变量\"></a>函数内部的两个特殊变量</h3><ol>\n<li><code>arguments</code>，保存函数参数。<code>arguments</code>有一个特殊属性<code>callee</code>，可用于与函数名解耦。</li>\n<li><code>this</code>。</li>\n</ol>\n<h3 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h3><ol>\n<li><code>length</code>属性，表示函数希望接收的命名参数的个数。</li>\n<li><code>proptotype</code>属性。</li>\n<li><code>apply</code>、<code>call</code>和<code>bind</code>，更改函数的作用域。<code>functionName.apply(作用域，arguments数组)</code>,<code>functionName.call(作用域，数组1，数组2)</code>，<code>var newFunction = functionName.bind(作用域)</code></li>\n</ol>\n<h2 id=\"6-基本包装类型\"><a href=\"#6-基本包装类型\" class=\"headerlink\" title=\"6. 基本包装类型\"></a>6. 基本包装类型</h2><p>基本包装类型是对应基本类型值的特殊的引用类型<br>读取String、Boolean或者Number基本类型值时，后台可能会执行如下操作：</p>\n<ol>\n<li>创建String类型的一个实例。</li>\n<li>在实例上调用指定的方法。</li>\n<li>销毁这个实例。<br>注意：后台自动生成的基本包装类型对象，和通过<code>new</code>操作符生成的基本包装类型对象，生命周期不同。后台自动生成的对象，只存在于一行代码执行的瞬间。而<code>new</code>操作符生成的基本包装类型的对象，在执行流离开当前作用域之前都一直保存在内存中。</li>\n</ol>\n<h3 id=\"Boolean包装类型\"><a href=\"#Boolean包装类型\" class=\"headerlink\" title=\"Boolean包装类型\"></a>Boolean包装类型</h3><p>注意，在布尔表达式中使用Boolean对象，会将其转化为true。<br>建议永远不要使用Boolean对象。</p>\n<h3 id=\"Number包装类型\"><a href=\"#Number包装类型\" class=\"headerlink\" title=\"Number包装类型\"></a>Number包装类型</h3><ol>\n<li><code>toString()</code>方法可以传递一个表示基数的参数。</li>\n<li><code>toFixed()</code>方法可以传递指定小数位数的数字，将按指定的小数位返回数值的字符串表示。</li>\n</ol>\n<h3 id=\"String包装类型\"><a href=\"#String包装类型\" class=\"headerlink\" title=\"String包装类型\"></a>String包装类型</h3><ol>\n<li><code>concat()</code>，将一个或多个字符串拼接起来，返回拼接得到的新字符串。</li>\n</ol>\n<h2 id=\"7-Global对象\"><a href=\"#7-Global对象\" class=\"headerlink\" title=\"7. Global对象\"></a>7. Global对象</h2><p>Math对象、Window对象等</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h2 id=\"1-instance运算符\"><a href=\"#1-instance运算符\" class=\"headerlink\" title=\"1. instance运算符\"></a>1. instance运算符</h2><p>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<p>常用的引用类型：</p>\n<ol>\n<li>Object类型。</li>\n<li>Array类型。</li>\n<li>Date类型。</li>\n<li>RegExp类型。</li>\n<li>Function类型。</li>\n<li>基本包装类型（Boolean、Number、String）。</li>\n<li>Global对象。</li>\n</ol>\n<p>其他：</p>\n<ol>\n<li>instanceof运算符</li>\n</ol>\n<h2 id=\"1-Objet类型\"><a href=\"#1-Objet类型\" class=\"headerlink\" title=\"1. Objet类型\"></a>1. Objet类型</h2><h3 id=\"创建实例的方法\"><a href=\"#创建实例的方法\" class=\"headerlink\" title=\"创建实例的方法\"></a>创建实例的方法</h3><ol>\n<li>使用Object构造函数：<code>var a = new Object()</code></li>\n<li>对象字面量方法：<code>var person = {name:&#39;Michael Zhang&#39;}</code></li>\n</ol>\n<h3 id=\"访问对象属性\"><a href=\"#访问对象属性\" class=\"headerlink\" title=\"访问对象属性\"></a>访问对象属性</h3><ol>\n<li>使用点表示法：<code>alert(person.name)</code></li>\n<li>使用方括号语法：<code>alert(person[&#39;name&#39;])</code></li>\n</ol>\n<h2 id=\"2-Array类型\"><a href=\"#2-Array类型\" class=\"headerlink\" title=\"2. Array类型\"></a>2. Array类型</h2><h3 id=\"创建数组的方法\"><a href=\"#创建数组的方法\" class=\"headerlink\" title=\"创建数组的方法\"></a>创建数组的方法</h3><ol>\n<li>使用Array构造函数：<code>var nums = new Array(arrayLength)</code>，<code>var nums = Array(1,2,3,4,5)</code></li>\n<li>使用数组字面量的方法：<code>var colors = [&quot;red&quot;,&quot;green&quot;]</code></li>\n</ol>\n<h3 id=\"判断Array的方式\"><a href=\"#判断Array的方式\" class=\"headerlink\" title=\"判断Array的方式\"></a>判断Array的方式</h3><ol>\n<li><code>Array.isArray(arr)</code>最推荐！</li>\n<li><code>instanceof</code> 运算符。如果有多个全局作用域可能会失效。</li>\n</ol>\n<h3 id=\"数组的排序方法\"><a href=\"#数组的排序方法\" class=\"headerlink\" title=\"数组的排序方法\"></a>数组的排序方法</h3><ol>\n<li><code>sort()</code>，默认调用每个数组项的<code>toString()</code>方法，默认比较数组项的UTF-16代码单元值序列，按升序排列。接收一个比较函数作为参数，用于对数组项的两两比较。比较函数接收两个参数，分别代表当前比较的两个元素。如果比较函数的参数分别为a,b,返回值小于0，则a在b前。若等于0，二者相对位置不变，若返回值大于0，则b在a前。</li>\n</ol>\n<h3 id=\"数组与数据结构相关的方法\"><a href=\"#数组与数据结构相关的方法\" class=\"headerlink\" title=\"数组与数据结构相关的方法\"></a>数组与数据结构相关的方法</h3><ol>\n<li>栈方法。<ul>\n<li>入栈<code>push()</code>，如<code>colors.push(&quot;brown&quot;,&quot;yellow&quot;)</code>，返回值为入栈后的数组长度。</li>\n<li>出栈<code>pop()</code>，返回值为数组的最后一项。</li>\n</ul>\n</li>\n<li>队列方法。<ul>\n<li>入队<code>push()</code>，返回值为入队列后的数组长度。</li>\n<li>出队<code>shift()</code>，返回值为数组的第一项。<code>unshift</code>与之相反，是添加任意项元素至数组头部，返回值为插入后的数组长度。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"奇淫技巧\"><a href=\"#奇淫技巧\" class=\"headerlink\" title=\"奇淫技巧\"></a>奇淫技巧</h3><ol>\n<li>length属性——数组的长度，是可以手动设置的。可以用来给数组末尾添加项：<code>var colors = [&quot;red&quot;];colors[colors.length] = &quot;green&quot;;</code></li>\n</ol>\n<h2 id=\"3-Date类型\"><a href=\"#3-Date类型\" class=\"headerlink\" title=\"3. Date类型\"></a>3. Date类型</h2><p>Date()对象表示某个时刻。</p>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><h4 id=\"1-无参数\"><a href=\"#1-无参数\" class=\"headerlink\" title=\"1. 无参数\"></a>1. 无参数</h4><ul>\n<li>语法：<code>new Date()</code></li>\n<li>返回一个Date对象，该对象表示实例化Date()时的时刻。</li>\n</ul>\n<h4 id=\"2-Unix时间戳\"><a href=\"#2-Unix时间戳\" class=\"headerlink\" title=\"2. Unix时间戳\"></a>2. Unix时间戳</h4><ul>\n<li>语法<code>new Date(timestamp)</code></li>\n<li>示例：<code>new Date((new Date()).getTime()-1000*60*60*24)</code>，获取表示昨天当前时刻的date对象。</li>\n<li>什么是Unix时间戳？一个 Unix 时间戳（Unix Time Stamp），它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。</li>\n</ul>\n<h4 id=\"3-字符串（不建议）\"><a href=\"#3-字符串（不建议）\" class=\"headerlink\" title=\"3. 字符串（不建议）\"></a>3. 字符串（不建议）</h4><ul>\n<li>形式：<code>new Date(dateString)</code></li>\n<li>示例：<code>new Date(&#39;2020-03-16&#39;)</code>，获取表示当前日期、时间的小时数等于当前时区（博主是东八区），分、秒皆为0的时刻。该示例返回的时间日期为：<code>&quot;Sun Feb 02 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n<li>字符串的要求：该dateString需要能被<code>date.parse()</code>识别。</li>\n</ul>\n<h4 id=\"4-提供时间与日期的每一项成员\"><a href=\"#4-提供时间与日期的每一项成员\" class=\"headerlink\" title=\"4. 提供时间与日期的每一项成员\"></a>4. 提供时间与日期的每一项成员</h4><ul>\n<li>语法：<code>new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</code></li>\n<li>示例1：<code>new Date(2020,2)</code>，返回的date对象时间和日期为：<code>&quot;Sun Mar 01 2020 00:00:00 GMT+0800 (中国标准时间)&quot;</code><ul>\n<li><strong>注意1</strong>：月数的索引从0开始，与字符串形式的索引不一致。</li>\n<li><strong>注意2</strong>：时间默认从当前时区的0点开始。</li>\n</ul>\n</li>\n<li>示例2：执行语句<code>new Date(2020,3,16)</code>返回的date对象的时间和日期为：<code>&quot;Thu Apr 16 2020 00:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul>\n<li><code>Date.now()</code>，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.now()</code>。执行结果：<code>1584452901581</code></li>\n</ul>\n</li>\n<li><code>Date.parse()</code>，解析一个表示日期的字符串，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.parse(&#39;2020-03-17&#39;)</code>，执行结果：<code>1584403200000</code></li>\n<li>执行语句：<code>(new Date(Date.parse(&quot;2020-03-17&quot;))).toString()</code>，执行结果：<code>&quot;Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n<li><strong>不建议使用，因浏览器的实现有差异</strong></li>\n</ul>\n</li>\n<li><code>Date.UTC()</code>接受参数同构造器4“提供时间与日期的每一项成员”，返回自UTC时间1970-1-1 00:00:00至今所经过的毫秒数。<ul>\n<li>执行语句：<code>Date.parse(2020,02,17)</code>，执行结果：<code>1584403200000</code>。注意此处的月份索引从0开始。</li>\n<li>执行语句：<code>(new Date(Date.parse(2020,02,17))).toString()</code>，执行结果：<code>&quot;Tue Mar 17 2020 08:00:00 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Date-prototype-toDateString\"><a href=\"#Date-prototype-toDateString\" class=\"headerlink\" title=\"Date.prototype.toDateString()\"></a><code>Date.prototype.toDateString()</code></h4><ul>\n<li>作用：以人类易读（human-readable）的形式返回该日期对象日期部分的字符串。</li>\n<li>执行语句：<code>(new Date()).toDateString()</code>。执行结果：<code>&quot;Tue Mar 17 2020&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toISOString\"><a href=\"#Date-prototype-toISOString\" class=\"headerlink\" title=\"Date.prototype.toISOString()\"></a><code>Date.prototype.toISOString()</code></h4><ul>\n<li>作用：把一个日期转换为符合 ISO 8601 扩展格式的字符串。》》》》》这里最好也做一个跳链。</li>\n<li>ISO 8601：由国际标准化组织（ISO）提出的编号为8601的标准。该标准的全部内容需要收费阅读，但作为开发我们只需要看万维网联盟（W3C）根据ISO内容制定的标准即可<a href=\"https://www.w3.org/TR/NOTE-datetime\" target=\"_blank\" rel=\"noopener\">Date and Time Formats</a>。比较重要的内容如下：<ul>\n<li>完整的日期与时间格式，包含年、月、日、时、分、秒、秒的小数位和时区指示符：<code>YYYY-MM-DDThh:mm:ssTZD</code>，例如：<code>1997-07-16T19:20:30+01:00</code>。</li>\n<li>使用UTC时区，则显示时区指示符<code>Z</code></li>\n<li>使用本地时区，则显示时区指示符<code>+hh:mm</code>或<code>-hh:mm</code>。<code>+hh:mm</code>含义为”本地时区相较于UTC时区，要快hh个小时、mm分钟；<code>-hh:mm</code>含义为”本地时区相较于UTC时区要慢hh个小时、mm分钟”。</li>\n</ul>\n</li>\n<li>执行语句：<code>(new Date()).toISOString()</code>。执行结果：<code>&quot;2020-03-17T14:22:12.947Z&quot;</code>（注：此时本地时间为2020-03-17,22:22:12）</li>\n</ul>\n<h4 id=\"Date-prototype-toJSON\"><a href=\"#Date-prototype-toJSON\" class=\"headerlink\" title=\"Date.prototype.toJSON()\"></a><code>Date.prototype.toJSON()</code></h4><ul>\n<li>作用：使用 toISOString() 返回一个表示该日期的字符串。为了在 JSON.stringify() 方法中使用。</li>\n<li>调用<code>toJSON()</code>作用和调用<code>toISOString()</code>一样一样的。为什么呢？请看后文》》》》这里给个跳链。</li>\n<li>执行语句：<code>(new Date()).toJSON()</code>。执行结果：<code>&quot;2020-03-17T15:30:30.979Z&quot;</code>。</li>\n</ul>\n<h4 id=\"Date-prototype-toGMTString\"><a href=\"#Date-prototype-toGMTString\" class=\"headerlink\" title=\"Date.prototype.toGMTString()\"></a><code>Date.prototype.toGMTString()</code></h4><ul>\n<li>作用：返回一个基于 GMT (UT) 时区的字符串来表示该日期。<strong>mdn官方不建议使用，请使用 toUTCString() 方法代替。</strong></li>\n<li>执行语句：<code>(new Date()).toGMTString()</code>。执行结果：<code>&quot;Tue, 17 Mar 2020 15:37:56 GMT&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleDateString\"><a href=\"#Date-prototype-toLocaleDateString\" class=\"headerlink\" title=\"Date.prototype.toLocaleDateString()\"></a><code>Date.prototype.toLocaleDateString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象日期部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。</li>\n<li>执行语句：<code>(new Date()).toLocaleDateString()</code>。执行结果：<code>&quot;2020/3/18&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleString\"><a href=\"#Date-prototype-toLocaleString\" class=\"headerlink\" title=\"Date.prototype.toLocaleString()\"></a><code>Date.prototype.toLocaleString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象的字符串，该字符串与系统设置的地区关联（locality sensitive）。覆盖了 Object.prototype.toLocaleString() 方法。</li>\n<li>执行语句：<code>(new Date()).toLocaleString()</code>。执行结果：<code>&quot;2020/3/18 下午11:45:03&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toLocaleTimeString\"><a href=\"#Date-prototype-toLocaleTimeString\" class=\"headerlink\" title=\"Date.prototype.toLocaleTimeString()\"></a><code>Date.prototype.toLocaleTimeString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象时间部分的字符串，该字符串格式与系统设置的地区关联（locality sensitive）。</li>\n<li>执行语句：<code>(new Date()).toLocaleTimeString()</code>。执行结果：<code>&quot;下午11:47:12&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toString\"><a href=\"#Date-prototype-toString\" class=\"headerlink\" title=\"Date.prototype.toString()\"></a><code>Date.prototype.toString()</code></h4><ul>\n<li>作用：返回一个表示该日期对象的字符串。覆盖了Object.prototype.toString() 方法。</li>\n<li>执行语句：<code>(new Date()).toString()</code>。执行结果：<code>&quot;Wed Mar 18 2020 23:48:31 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toTimeString\"><a href=\"#Date-prototype-toTimeString\" class=\"headerlink\" title=\"Date.prototype.toTimeString()\"></a><code>Date.prototype.toTimeString()</code></h4><ul>\n<li>作用：以人类易读格式返回日期对象时间部分的字符串。</li>\n<li>执行语句：<code>(new Date()).toTimeString()</code>。执行结果：<code>&quot;23:50:22 GMT+0800 (中国标准时间)&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-toUTCString\"><a href=\"#Date-prototype-toUTCString\" class=\"headerlink\" title=\"Date.prototype.toUTCString()\"></a><code>Date.prototype.toUTCString()</code></h4><ul>\n<li>作用：把一个日期对象转换为一个以UTC时区计时的字符串。</li>\n<li>执行语句：<code>(new Date()).toUTCString()</code>。执行结果：<code>&quot;Wed, 18 Mar 2020 15:51:49 GMT&quot;</code></li>\n</ul>\n<h4 id=\"Date-prototype-valueOf\"><a href=\"#Date-prototype-valueOf\" class=\"headerlink\" title=\"Date.prototype.valueOf\"></a><code>Date.prototype.valueOf</code></h4><ul>\n<li>作用：返回一个日期对象的原始值。覆盖了 Object.prototype.valueOf() 方法。</li>\n<li>执行语句：<code>(new Date()).valueOf()</code>。执行结果：<code>1584546764856</code></li>\n</ul>\n<h2 id=\"4-RegExp类型\"><a href=\"#4-RegExp类型\" class=\"headerlink\" title=\"4. RegExp类型\"></a>4. RegExp类型</h2><h3 id=\"创建实例的方法-1\"><a href=\"#创建实例的方法-1\" class=\"headerlink\" title=\"创建实例的方法\"></a>创建实例的方法</h3><ol>\n<li>使用RegExp构造函数：<code>var pattern1 = new RegExp(&quot;[bc]at&quot;,&quot;i&quot;)</code>，<code>var pattern1 = new RegExp(/ab+c/,&quot;i&quot;)</code></li>\n<li>使用字面量形式：<code>var pattern2 = /[bc]at/i</code></li>\n</ol>\n<h3 id=\"匹配方法\"><a href=\"#匹配方法\" class=\"headerlink\" title=\"匹配方法\"></a>匹配方法</h3><ol>\n<li><code>exec()</code>，如：<code>var arr =  regex1.exec(str1)</code>。可以获取匹配的字符位于原字符串的索引、分组捕获、原始字符串等信息，同时RegExp对象也会更新下一次匹配开始的位置。更多信息详见：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec</a></li>\n<li><code>test()</code>，用来查看正则表达式与指定的字符串是否匹配，如：<code>let result = /^hello/.test(str)</code></li>\n</ol>\n<h2 id=\"5-Function类型。\"><a href=\"#5-Function类型。\" class=\"headerlink\" title=\"5. Function类型。\"></a>5. Function类型。</h2><h3 id=\"创建Function的方法\"><a href=\"#创建Function的方法\" class=\"headerlink\" title=\"创建Function的方法\"></a>创建Function的方法</h3><ol>\n<li>函数声明。如：<code>function sum(num1,num2){return num1+num2}</code></li>\n<li>函数表达式。如：<code>var sum = function(num1,num2){return num1+num2}</code><br>注意，函数声明存在提升。</li>\n</ol>\n<h3 id=\"函数内部的两个特殊变量\"><a href=\"#函数内部的两个特殊变量\" class=\"headerlink\" title=\"函数内部的两个特殊变量\"></a>函数内部的两个特殊变量</h3><ol>\n<li><code>arguments</code>，保存函数参数。<code>arguments</code>有一个特殊属性<code>callee</code>，可用于与函数名解耦。</li>\n<li><code>this</code>。</li>\n</ol>\n<h3 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h3><ol>\n<li><code>length</code>属性，表示函数希望接收的命名参数的个数。</li>\n<li><code>proptotype</code>属性。</li>\n<li><code>apply</code>、<code>call</code>和<code>bind</code>，更改函数的作用域。<code>functionName.apply(作用域，arguments数组)</code>,<code>functionName.call(作用域，数组1，数组2)</code>，<code>var newFunction = functionName.bind(作用域)</code></li>\n</ol>\n<h2 id=\"6-基本包装类型\"><a href=\"#6-基本包装类型\" class=\"headerlink\" title=\"6. 基本包装类型\"></a>6. 基本包装类型</h2><p>基本包装类型是对应基本类型值的特殊的引用类型<br>读取String、Boolean或者Number基本类型值时，后台可能会执行如下操作：</p>\n<ol>\n<li>创建String类型的一个实例。</li>\n<li>在实例上调用指定的方法。</li>\n<li>销毁这个实例。<br>注意：后台自动生成的基本包装类型对象，和通过<code>new</code>操作符生成的基本包装类型对象，生命周期不同。后台自动生成的对象，只存在于一行代码执行的瞬间。而<code>new</code>操作符生成的基本包装类型的对象，在执行流离开当前作用域之前都一直保存在内存中。</li>\n</ol>\n<h3 id=\"Boolean包装类型\"><a href=\"#Boolean包装类型\" class=\"headerlink\" title=\"Boolean包装类型\"></a>Boolean包装类型</h3><p>注意，在布尔表达式中使用Boolean对象，会将其转化为true。<br>建议永远不要使用Boolean对象。</p>\n<h3 id=\"Number包装类型\"><a href=\"#Number包装类型\" class=\"headerlink\" title=\"Number包装类型\"></a>Number包装类型</h3><ol>\n<li><code>toString()</code>方法可以传递一个表示基数的参数。</li>\n<li><code>toFixed()</code>方法可以传递指定小数位数的数字，将按指定的小数位返回数值的字符串表示。</li>\n</ol>\n<h3 id=\"String包装类型\"><a href=\"#String包装类型\" class=\"headerlink\" title=\"String包装类型\"></a>String包装类型</h3><ol>\n<li><code>concat()</code>，将一个或多个字符串拼接起来，返回拼接得到的新字符串。</li>\n</ol>\n<h2 id=\"7-Global对象\"><a href=\"#7-Global对象\" class=\"headerlink\" title=\"7. Global对象\"></a>7. Global对象</h2><p>Math对象、Window对象等</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h2 id=\"1-instance运算符\"><a href=\"#1-instance运算符\" class=\"headerlink\" title=\"1. instance运算符\"></a>1. instance运算符</h2><p>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>\n"},{"title":"js对象","date":"2020-08-23T15:39:00.000Z","_content":"\n## 对象的属性\n1. 数据属性\n    * `configurable`：能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为访问器属性。对于直接在对象上定义的属性，默认为true。\n    * `enumerable`：表示能否通过for-in循环返回属性。默认为true。\n    * `writable`：表示能否修改属性的值。默认为true。\n    * `value`：包含这个属性的数据值。默认为undefined。\n2. 访问器属性\n    * `configurable`：表示能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为数据属性。对于直接在对象上定义的属性，默认为true。\n    * `enumerable`：表示能否通过for-in循环返回属性。默认为true。\n    * `get`：在读取属性时调用的函数，默认值为undefined。\n    * `set`：在写入属性时调用的函数，默认值为undefined。\n3. 其他属性\n    * `constructor`：对象的构造函数。\n3. 相关方法\n    * 定义属性描述符的方法1：`Object.defineProperty(对象, 属性名, 描述符对象)`\n    * 定义属性描述符的方法2：`Object.defineProperties(对象, 描述符对象)`\n    * 读取属性描述符的方法：`Object.getOwnPropertyDescriptor(对象, 属性名)`\n\n\n## 创建对象\n\n### 1. 工厂模式\n```js\nfunction createPerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\n        alert(this.name);\n    }\n    return o;\n};\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\n```\n\n### 2. 构造函数模式\n创建实例时实际经历的步骤：\n1. 创建一个对象。\n2. 将构造函数的作用域赋给新对象\n3. 执行构造函数中的代码。\n4. 返回新对象。\n```js\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    }\n}\nvar person1 = new Person(\"Nicholas\",29,\"Software Enigneer\");\n```\n注意：\n1. 构造函数始终应该以大写字母开头。\n2. 构造出的不同对象的方法并不共用同一片内存。\n\n### 3. 原型模式\n创建新函数时，会为该函数创建一个prototype属性，该属性指向该函数的原型对象。默认情况下，所有的原型对象都会具有一个`constructor`属性，这个属性是一个指向`prototype`属性所在函数的指针，如下所示\n```js\nvar NewFunction = function(){}\nNewFunction.prototype.constructor === NewFunction // true.\n```\n#### 读取一个对象的属性，发生了什么？\n1. 首先搜索对象实例本身。如果在实例中找到了具有给定名字的属性，则返回该属性的值。\n2. 若第一步没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。\n\n#### 原型添加属性和方法\n1. 通过`prototype`属性。如:`NewFunction.prototype.a = 1`\n2. 通过对象字面量的方法，此时原型的constructor不再指向原函数，但是`instanceof`操作符仍然会返回true。可以通过显示地向对象添加constructor属性，以保证原型的constructor指向原函数。另外需要注意，使用对象字面量的方法，可能会重写原型链。\n    ```js\n    function NewFunction(){};\n    NewFunction.prototype = {\n        a:1\n    }\n    NewFunction.prototype.constructor === NewFunction; // false\n    var newFunctionObj = new NewFunction();\n    newFunctionObj instanceof NewFunction // true\n    NewFunction.prototype = {\n        constructor:NewFunction,\n        a:1,\n    }\n    NewFunction.prototype.constructor === NewFunction; // true\n    ```\n3. 使用`Object.defineProperty()`。\n\n#### 原型的动态性\n对原型对象所做的任何修改，都能立刻从实例上反映出来。\n\n#### 原型相关的方法\n1. `prototypeObject.prototype.isPrototypeOf(被测对象)` 用于prototypeObject是否存在于被测对象的原型链上。\n2. `Object.getPrototypeOf()`，用于获取指定对象的原型\n3. `obj.hasOwnProperty(属性名)`，方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性。不包括原型中的属性。\n4. `\"属性名\" in obj`，`in`操作符可检测对象是否有相应属性，不论属性在实例中还是在原型中。\n5. `Object.keys(obj)`,获取obj对象上的所有可枚举的实例属性。\n6. `Object.getOwnPropertyNames(obj)`，获取obj对象上的所有实例属性，无论是否可枚举。\n\n### 4. 组合使用构造函数模式和原型模式\n使用构造函数模式定义实例属性，使用原型模式定义方法和共享的属性。\n\n### 5. 动态原型模式\n将实例属性、原型方法和原型属性都定义在构造函数中。如下：\n```js\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    // 仅需检测一个原型中可能存在的属性或方法即可。若该属性/方法在原型中不存在，则将原型上应存在的所有属性和方法添加至原型。\n    if(typeof this.sayName !== \"function\"){\n        // 也可使用instanceof，如：\n        // if(this.sayName instanceof Function)\n        Person.prototype.sayName = function(){\n            alert(this.name);\n        }\n        Person.prototype.sayHello = function(name){\n            alert(`My name is ${this.name}, nice to meet you ${name}`)\n        }\n    }\n} \n```\n\n### 6. 寄生构造函数模式\n创建一个函数，该函数仅封装创建对象的代码，然后再返回新创建的对象。主要用来为现有的引用类型增加其他的功能，且不污染现有的引用类型。\n\n与工厂模式有两个区别：\n1. 命名上，不再采用createXxxx。\n2. 在实例化时，通过`new`运算符进行实例化，而不是仅调用方法。\n```js\nfunction SpecialArray(){\n    var values = new Array();\n    values.push.apply(values,arguments);\n    values.toPipedString = function(){\n        return this.join(\"|\");\n    }\n    return values;\n}\nvar colors = new SpecialArray(\"red\",\"blue\",\"green\");\nalert(colors.toPipedString());\ncolors instanceof SpecialArray // false\n```\n\n注意：寄生构造函数返回的对象与构造函数及构造函数的原型之间没有任何关系。\n\n### 7. 稳妥构造函数模式\n稳妥对象：没有公共属性，而且其方法也不引用this。\n\n稳妥构造函数模式不适用`new`操作符调用构造函数。\n```js\nfunction Person(name,age,job){\n    var o = new Object();\n\n    // 在此处定义私有变量\n\n    o.sayName = function(){\n        alert(name);\n    }\n    return o;\n}\n```\n\n## 原型链\n基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法，是js语言实现继承的主要方法。\n\n### 确定原型和实例的关系\n1. 方法1：使用`instanceof`\n2. 方法2：使用`isPrototypeOf`，如`Object.prototype.isPrototypeOf(instance)`;\n\n### 原型链存在的问题\n1. 原型上引用类型值的属性，会被所有实例共享。\n2. 在不影响所有对象实例的情况下，无法给超类型的构造函数提供参数。\n\n### 1. 借用构造函数\n在子类型构造函数的内部调用超类型构造函数,便可以实现向超类型传递参数。\n\n存在的问题：无法实现函数复用（因为超类型的原型中定义的方法，对于子类型而言是不可见的。）\n\n### 2. 组合继承\n一种继承模式，将原型链和借用构造函数的技术组合到一起。主要思路为使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。\n\n组合继承模式有两个关键步骤。在调用子类的构造函数实例化对象前，一定要先将超类挂载至子类的原型上，然后将子类原型的构造方法手动设置为子类的构造方法（因为在挂载原型时，构造方法会被覆盖）。\n\n### 3. 原型式继承\n借助原型，基于已有的对象创建新对象，同时也不必创建自定义类型。\n```js\nfunction object(o){\n    function F(){};\n    F.prototype = o;\n    return new F();\n}\n```\nES6的`Object.craete(用作新对象原型的对象, 为新对象定义额外属性的对象)`api实现了原型式继承。\n\n\n### 4. 寄生式继承\n创建一个仅用于封装继承过程的函数，使用该函数实现继承。","source":"_posts/js基础/js对象.md","raw":"---\ntitle: js对象 #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2020-08-23 23:39:00 #文章生成时间，一般不改，当然也可以任意修改\ncategories: 前端 #分类\ntags: [js, 前端] #文章标签，可空，多标签请用格式，注意:后面有个空格\n---\n\n## 对象的属性\n1. 数据属性\n    * `configurable`：能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为访问器属性。对于直接在对象上定义的属性，默认为true。\n    * `enumerable`：表示能否通过for-in循环返回属性。默认为true。\n    * `writable`：表示能否修改属性的值。默认为true。\n    * `value`：包含这个属性的数据值。默认为undefined。\n2. 访问器属性\n    * `configurable`：表示能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为数据属性。对于直接在对象上定义的属性，默认为true。\n    * `enumerable`：表示能否通过for-in循环返回属性。默认为true。\n    * `get`：在读取属性时调用的函数，默认值为undefined。\n    * `set`：在写入属性时调用的函数，默认值为undefined。\n3. 其他属性\n    * `constructor`：对象的构造函数。\n3. 相关方法\n    * 定义属性描述符的方法1：`Object.defineProperty(对象, 属性名, 描述符对象)`\n    * 定义属性描述符的方法2：`Object.defineProperties(对象, 描述符对象)`\n    * 读取属性描述符的方法：`Object.getOwnPropertyDescriptor(对象, 属性名)`\n\n\n## 创建对象\n\n### 1. 工厂模式\n```js\nfunction createPerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\n        alert(this.name);\n    }\n    return o;\n};\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\n```\n\n### 2. 构造函数模式\n创建实例时实际经历的步骤：\n1. 创建一个对象。\n2. 将构造函数的作用域赋给新对象\n3. 执行构造函数中的代码。\n4. 返回新对象。\n```js\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    }\n}\nvar person1 = new Person(\"Nicholas\",29,\"Software Enigneer\");\n```\n注意：\n1. 构造函数始终应该以大写字母开头。\n2. 构造出的不同对象的方法并不共用同一片内存。\n\n### 3. 原型模式\n创建新函数时，会为该函数创建一个prototype属性，该属性指向该函数的原型对象。默认情况下，所有的原型对象都会具有一个`constructor`属性，这个属性是一个指向`prototype`属性所在函数的指针，如下所示\n```js\nvar NewFunction = function(){}\nNewFunction.prototype.constructor === NewFunction // true.\n```\n#### 读取一个对象的属性，发生了什么？\n1. 首先搜索对象实例本身。如果在实例中找到了具有给定名字的属性，则返回该属性的值。\n2. 若第一步没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。\n\n#### 原型添加属性和方法\n1. 通过`prototype`属性。如:`NewFunction.prototype.a = 1`\n2. 通过对象字面量的方法，此时原型的constructor不再指向原函数，但是`instanceof`操作符仍然会返回true。可以通过显示地向对象添加constructor属性，以保证原型的constructor指向原函数。另外需要注意，使用对象字面量的方法，可能会重写原型链。\n    ```js\n    function NewFunction(){};\n    NewFunction.prototype = {\n        a:1\n    }\n    NewFunction.prototype.constructor === NewFunction; // false\n    var newFunctionObj = new NewFunction();\n    newFunctionObj instanceof NewFunction // true\n    NewFunction.prototype = {\n        constructor:NewFunction,\n        a:1,\n    }\n    NewFunction.prototype.constructor === NewFunction; // true\n    ```\n3. 使用`Object.defineProperty()`。\n\n#### 原型的动态性\n对原型对象所做的任何修改，都能立刻从实例上反映出来。\n\n#### 原型相关的方法\n1. `prototypeObject.prototype.isPrototypeOf(被测对象)` 用于prototypeObject是否存在于被测对象的原型链上。\n2. `Object.getPrototypeOf()`，用于获取指定对象的原型\n3. `obj.hasOwnProperty(属性名)`，方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性。不包括原型中的属性。\n4. `\"属性名\" in obj`，`in`操作符可检测对象是否有相应属性，不论属性在实例中还是在原型中。\n5. `Object.keys(obj)`,获取obj对象上的所有可枚举的实例属性。\n6. `Object.getOwnPropertyNames(obj)`，获取obj对象上的所有实例属性，无论是否可枚举。\n\n### 4. 组合使用构造函数模式和原型模式\n使用构造函数模式定义实例属性，使用原型模式定义方法和共享的属性。\n\n### 5. 动态原型模式\n将实例属性、原型方法和原型属性都定义在构造函数中。如下：\n```js\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    // 仅需检测一个原型中可能存在的属性或方法即可。若该属性/方法在原型中不存在，则将原型上应存在的所有属性和方法添加至原型。\n    if(typeof this.sayName !== \"function\"){\n        // 也可使用instanceof，如：\n        // if(this.sayName instanceof Function)\n        Person.prototype.sayName = function(){\n            alert(this.name);\n        }\n        Person.prototype.sayHello = function(name){\n            alert(`My name is ${this.name}, nice to meet you ${name}`)\n        }\n    }\n} \n```\n\n### 6. 寄生构造函数模式\n创建一个函数，该函数仅封装创建对象的代码，然后再返回新创建的对象。主要用来为现有的引用类型增加其他的功能，且不污染现有的引用类型。\n\n与工厂模式有两个区别：\n1. 命名上，不再采用createXxxx。\n2. 在实例化时，通过`new`运算符进行实例化，而不是仅调用方法。\n```js\nfunction SpecialArray(){\n    var values = new Array();\n    values.push.apply(values,arguments);\n    values.toPipedString = function(){\n        return this.join(\"|\");\n    }\n    return values;\n}\nvar colors = new SpecialArray(\"red\",\"blue\",\"green\");\nalert(colors.toPipedString());\ncolors instanceof SpecialArray // false\n```\n\n注意：寄生构造函数返回的对象与构造函数及构造函数的原型之间没有任何关系。\n\n### 7. 稳妥构造函数模式\n稳妥对象：没有公共属性，而且其方法也不引用this。\n\n稳妥构造函数模式不适用`new`操作符调用构造函数。\n```js\nfunction Person(name,age,job){\n    var o = new Object();\n\n    // 在此处定义私有变量\n\n    o.sayName = function(){\n        alert(name);\n    }\n    return o;\n}\n```\n\n## 原型链\n基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法，是js语言实现继承的主要方法。\n\n### 确定原型和实例的关系\n1. 方法1：使用`instanceof`\n2. 方法2：使用`isPrototypeOf`，如`Object.prototype.isPrototypeOf(instance)`;\n\n### 原型链存在的问题\n1. 原型上引用类型值的属性，会被所有实例共享。\n2. 在不影响所有对象实例的情况下，无法给超类型的构造函数提供参数。\n\n### 1. 借用构造函数\n在子类型构造函数的内部调用超类型构造函数,便可以实现向超类型传递参数。\n\n存在的问题：无法实现函数复用（因为超类型的原型中定义的方法，对于子类型而言是不可见的。）\n\n### 2. 组合继承\n一种继承模式，将原型链和借用构造函数的技术组合到一起。主要思路为使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。\n\n组合继承模式有两个关键步骤。在调用子类的构造函数实例化对象前，一定要先将超类挂载至子类的原型上，然后将子类原型的构造方法手动设置为子类的构造方法（因为在挂载原型时，构造方法会被覆盖）。\n\n### 3. 原型式继承\n借助原型，基于已有的对象创建新对象，同时也不必创建自定义类型。\n```js\nfunction object(o){\n    function F(){};\n    F.prototype = o;\n    return new F();\n}\n```\nES6的`Object.craete(用作新对象原型的对象, 为新对象定义额外属性的对象)`api实现了原型式继承。\n\n\n### 4. 寄生式继承\n创建一个仅用于封装继承过程的函数，使用该函数实现继承。","slug":"js基础/js对象","published":1,"updated":"2020-08-23T15:40:04.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6d000clzrvm4vhrcou","content":"<h2 id=\"对象的属性\"><a href=\"#对象的属性\" class=\"headerlink\" title=\"对象的属性\"></a>对象的属性</h2><ol>\n<li>数据属性<ul>\n<li><code>configurable</code>：能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为访问器属性。对于直接在对象上定义的属性，默认为true。</li>\n<li><code>enumerable</code>：表示能否通过for-in循环返回属性。默认为true。</li>\n<li><code>writable</code>：表示能否修改属性的值。默认为true。</li>\n<li><code>value</code>：包含这个属性的数据值。默认为undefined。</li>\n</ul>\n</li>\n<li>访问器属性<ul>\n<li><code>configurable</code>：表示能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为数据属性。对于直接在对象上定义的属性，默认为true。</li>\n<li><code>enumerable</code>：表示能否通过for-in循环返回属性。默认为true。</li>\n<li><code>get</code>：在读取属性时调用的函数，默认值为undefined。</li>\n<li><code>set</code>：在写入属性时调用的函数，默认值为undefined。</li>\n</ul>\n</li>\n<li>其他属性<ul>\n<li><code>constructor</code>：对象的构造函数。</li>\n</ul>\n</li>\n<li>相关方法<ul>\n<li>定义属性描述符的方法1：<code>Object.defineProperty(对象, 属性名, 描述符对象)</code></li>\n<li>定义属性描述符的方法2：<code>Object.defineProperties(对象, 描述符对象)</code></li>\n<li>读取属性描述符的方法：<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1. 工厂模式\"></a>1. 工厂模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-构造函数模式\"><a href=\"#2-构造函数模式\" class=\"headerlink\" title=\"2. 构造函数模式\"></a>2. 构造函数模式</h3><p>创建实例时实际经历的步骤：</p>\n<ol>\n<li>创建一个对象。</li>\n<li>将构造函数的作用域赋给新对象</li>\n<li>执行构造函数中的代码。</li>\n<li>返回新对象。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>,<span class=\"number\">29</span>,<span class=\"string\">\"Software Enigneer\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>构造函数始终应该以大写字母开头。</li>\n<li>构造出的不同对象的方法并不共用同一片内存。</li>\n</ol>\n<h3 id=\"3-原型模式\"><a href=\"#3-原型模式\" class=\"headerlink\" title=\"3. 原型模式\"></a>3. 原型模式</h3><p>创建新函数时，会为该函数创建一个prototype属性，该属性指向该函数的原型对象。默认情况下，所有的原型对象都会具有一个<code>constructor</code>属性，这个属性是一个指向<code>prototype</code>属性所在函数的指针，如下所示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> NewFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">NewFunction.prototype.constructor === NewFunction <span class=\"comment\">// true.</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"读取一个对象的属性，发生了什么？\"><a href=\"#读取一个对象的属性，发生了什么？\" class=\"headerlink\" title=\"读取一个对象的属性，发生了什么？\"></a>读取一个对象的属性，发生了什么？</h4><ol>\n<li>首先搜索对象实例本身。如果在实例中找到了具有给定名字的属性，则返回该属性的值。</li>\n<li>若第一步没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。</li>\n</ol>\n<h4 id=\"原型添加属性和方法\"><a href=\"#原型添加属性和方法\" class=\"headerlink\" title=\"原型添加属性和方法\"></a>原型添加属性和方法</h4><ol>\n<li>通过<code>prototype</code>属性。如:<code>NewFunction.prototype.a = 1</code></li>\n<li><p>通过对象字面量的方法，此时原型的constructor不再指向原函数，但是<code>instanceof</code>操作符仍然会返回true。可以通过显示地向对象添加constructor属性，以保证原型的constructor指向原函数。另外需要注意，使用对象字面量的方法，可能会重写原型链。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewFunction</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">NewFunction.prototype = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NewFunction.prototype.constructor === NewFunction; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFunctionObj = <span class=\"keyword\">new</span> NewFunction();</span><br><span class=\"line\">newFunctionObj <span class=\"keyword\">instanceof</span> NewFunction <span class=\"comment\">// true</span></span><br><span class=\"line\">NewFunction.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:NewFunction,</span><br><span class=\"line\">    a:1,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NewFunction.prototype.<span class=\"keyword\">constructor</span> === NewFunction; // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>Object.defineProperty()</code>。</p>\n</li>\n</ol>\n<h4 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h4><p>对原型对象所做的任何修改，都能立刻从实例上反映出来。</p>\n<h4 id=\"原型相关的方法\"><a href=\"#原型相关的方法\" class=\"headerlink\" title=\"原型相关的方法\"></a>原型相关的方法</h4><ol>\n<li><code>prototypeObject.prototype.isPrototypeOf(被测对象)</code> 用于prototypeObject是否存在于被测对象的原型链上。</li>\n<li><code>Object.getPrototypeOf()</code>，用于获取指定对象的原型</li>\n<li><code>obj.hasOwnProperty(属性名)</code>，方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性。不包括原型中的属性。</li>\n<li><code>&quot;属性名&quot; in obj</code>，<code>in</code>操作符可检测对象是否有相应属性，不论属性在实例中还是在原型中。</li>\n<li><code>Object.keys(obj)</code>,获取obj对象上的所有可枚举的实例属性。</li>\n<li><code>Object.getOwnPropertyNames(obj)</code>，获取obj对象上的所有实例属性，无论是否可枚举。</li>\n</ol>\n<h3 id=\"4-组合使用构造函数模式和原型模式\"><a href=\"#4-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4. 组合使用构造函数模式和原型模式\"></a>4. 组合使用构造函数模式和原型模式</h3><p>使用构造函数模式定义实例属性，使用原型模式定义方法和共享的属性。</p>\n<h3 id=\"5-动态原型模式\"><a href=\"#5-动态原型模式\" class=\"headerlink\" title=\"5. 动态原型模式\"></a>5. 动态原型模式</h3><p>将实例属性、原型方法和原型属性都定义在构造函数中。如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"comment\">// 仅需检测一个原型中可能存在的属性或方法即可。若该属性/方法在原型中不存在，则将原型上应存在的所有属性和方法添加至原型。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName !== <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 也可使用instanceof，如：</span></span><br><span class=\"line\">        <span class=\"comment\">// if(this.sayName instanceof Function)</span></span><br><span class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Person.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, nice to meet you <span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-寄生构造函数模式\"><a href=\"#6-寄生构造函数模式\" class=\"headerlink\" title=\"6. 寄生构造函数模式\"></a>6. 寄生构造函数模式</h3><p>创建一个函数，该函数仅封装创建对象的代码，然后再返回新创建的对象。主要用来为现有的引用类型增加其他的功能，且不污染现有的引用类型。</p>\n<p>与工厂模式有两个区别：</p>\n<ol>\n<li>命名上，不再采用createXxxx。</li>\n<li>在实例化时，通过<code>new</code>运算符进行实例化，而不是仅调用方法。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialArray</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    values.push.apply(values,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    values.toPipedString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.join(<span class=\"string\">\"|\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> SpecialArray(<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>,<span class=\"string\">\"green\"</span>);</span><br><span class=\"line\">alert(colors.toPipedString());</span><br><span class=\"line\">colors <span class=\"keyword\">instanceof</span> SpecialArray <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：寄生构造函数返回的对象与构造函数及构造函数的原型之间没有任何关系。</p>\n<h3 id=\"7-稳妥构造函数模式\"><a href=\"#7-稳妥构造函数模式\" class=\"headerlink\" title=\"7. 稳妥构造函数模式\"></a>7. 稳妥构造函数模式</h3><p>稳妥对象：没有公共属性，而且其方法也不引用this。</p>\n<p>稳妥构造函数模式不适用<code>new</code>操作符调用构造函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在此处定义私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法，是js语言实现继承的主要方法。</p>\n<h3 id=\"确定原型和实例的关系\"><a href=\"#确定原型和实例的关系\" class=\"headerlink\" title=\"确定原型和实例的关系\"></a>确定原型和实例的关系</h3><ol>\n<li>方法1：使用<code>instanceof</code></li>\n<li>方法2：使用<code>isPrototypeOf</code>，如<code>Object.prototype.isPrototypeOf(instance)</code>;</li>\n</ol>\n<h3 id=\"原型链存在的问题\"><a href=\"#原型链存在的问题\" class=\"headerlink\" title=\"原型链存在的问题\"></a>原型链存在的问题</h3><ol>\n<li>原型上引用类型值的属性，会被所有实例共享。</li>\n<li>在不影响所有对象实例的情况下，无法给超类型的构造函数提供参数。</li>\n</ol>\n<h3 id=\"1-借用构造函数\"><a href=\"#1-借用构造函数\" class=\"headerlink\" title=\"1. 借用构造函数\"></a>1. 借用构造函数</h3><p>在子类型构造函数的内部调用超类型构造函数,便可以实现向超类型传递参数。</p>\n<p>存在的问题：无法实现函数复用（因为超类型的原型中定义的方法，对于子类型而言是不可见的。）</p>\n<h3 id=\"2-组合继承\"><a href=\"#2-组合继承\" class=\"headerlink\" title=\"2. 组合继承\"></a>2. 组合继承</h3><p>一种继承模式，将原型链和借用构造函数的技术组合到一起。主要思路为使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。</p>\n<p>组合继承模式有两个关键步骤。在调用子类的构造函数实例化对象前，一定要先将超类挂载至子类的原型上，然后将子类原型的构造方法手动设置为子类的构造方法（因为在挂载原型时，构造方法会被覆盖）。</p>\n<h3 id=\"3-原型式继承\"><a href=\"#3-原型式继承\" class=\"headerlink\" title=\"3. 原型式继承\"></a>3. 原型式继承</h3><p>借助原型，基于已有的对象创建新对象，同时也不必创建自定义类型。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6的<code>Object.craete(用作新对象原型的对象, 为新对象定义额外属性的对象)</code>api实现了原型式继承。</p>\n<h3 id=\"4-寄生式继承\"><a href=\"#4-寄生式继承\" class=\"headerlink\" title=\"4. 寄生式继承\"></a>4. 寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，使用该函数实现继承。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"对象的属性\"><a href=\"#对象的属性\" class=\"headerlink\" title=\"对象的属性\"></a>对象的属性</h2><ol>\n<li>数据属性<ul>\n<li><code>configurable</code>：能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为访问器属性。对于直接在对象上定义的属性，默认为true。</li>\n<li><code>enumerable</code>：表示能否通过for-in循环返回属性。默认为true。</li>\n<li><code>writable</code>：表示能否修改属性的值。默认为true。</li>\n<li><code>value</code>：包含这个属性的数据值。默认为undefined。</li>\n</ul>\n</li>\n<li>访问器属性<ul>\n<li><code>configurable</code>：表示能否通过delete删除属性从而重新定义属性、能否修改属性的特性、能否把属性修改为数据属性。对于直接在对象上定义的属性，默认为true。</li>\n<li><code>enumerable</code>：表示能否通过for-in循环返回属性。默认为true。</li>\n<li><code>get</code>：在读取属性时调用的函数，默认值为undefined。</li>\n<li><code>set</code>：在写入属性时调用的函数，默认值为undefined。</li>\n</ul>\n</li>\n<li>其他属性<ul>\n<li><code>constructor</code>：对象的构造函数。</li>\n</ul>\n</li>\n<li>相关方法<ul>\n<li>定义属性描述符的方法1：<code>Object.defineProperty(对象, 属性名, 描述符对象)</code></li>\n<li>定义属性描述符的方法2：<code>Object.defineProperties(对象, 描述符对象)</code></li>\n<li>读取属性描述符的方法：<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1. 工厂模式\"></a>1. 工厂模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age = age;</span><br><span class=\"line\">    o.job = job;</span><br><span class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">\"Nicholas\"</span>, <span class=\"number\">29</span>, <span class=\"string\">\"Software Engineer\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-构造函数模式\"><a href=\"#2-构造函数模式\" class=\"headerlink\" title=\"2. 构造函数模式\"></a>2. 构造函数模式</h3><p>创建实例时实际经历的步骤：</p>\n<ol>\n<li>创建一个对象。</li>\n<li>将构造函数的作用域赋给新对象</li>\n<li>执行构造函数中的代码。</li>\n<li>返回新对象。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>,<span class=\"number\">29</span>,<span class=\"string\">\"Software Enigneer\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>构造函数始终应该以大写字母开头。</li>\n<li>构造出的不同对象的方法并不共用同一片内存。</li>\n</ol>\n<h3 id=\"3-原型模式\"><a href=\"#3-原型模式\" class=\"headerlink\" title=\"3. 原型模式\"></a>3. 原型模式</h3><p>创建新函数时，会为该函数创建一个prototype属性，该属性指向该函数的原型对象。默认情况下，所有的原型对象都会具有一个<code>constructor</code>属性，这个属性是一个指向<code>prototype</code>属性所在函数的指针，如下所示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> NewFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">NewFunction.prototype.constructor === NewFunction <span class=\"comment\">// true.</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"读取一个对象的属性，发生了什么？\"><a href=\"#读取一个对象的属性，发生了什么？\" class=\"headerlink\" title=\"读取一个对象的属性，发生了什么？\"></a>读取一个对象的属性，发生了什么？</h4><ol>\n<li>首先搜索对象实例本身。如果在实例中找到了具有给定名字的属性，则返回该属性的值。</li>\n<li>若第一步没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。</li>\n</ol>\n<h4 id=\"原型添加属性和方法\"><a href=\"#原型添加属性和方法\" class=\"headerlink\" title=\"原型添加属性和方法\"></a>原型添加属性和方法</h4><ol>\n<li>通过<code>prototype</code>属性。如:<code>NewFunction.prototype.a = 1</code></li>\n<li><p>通过对象字面量的方法，此时原型的constructor不再指向原函数，但是<code>instanceof</code>操作符仍然会返回true。可以通过显示地向对象添加constructor属性，以保证原型的constructor指向原函数。另外需要注意，使用对象字面量的方法，可能会重写原型链。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewFunction</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">NewFunction.prototype = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NewFunction.prototype.constructor === NewFunction; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFunctionObj = <span class=\"keyword\">new</span> NewFunction();</span><br><span class=\"line\">newFunctionObj <span class=\"keyword\">instanceof</span> NewFunction <span class=\"comment\">// true</span></span><br><span class=\"line\">NewFunction.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:NewFunction,</span><br><span class=\"line\">    a:1,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NewFunction.prototype.<span class=\"keyword\">constructor</span> === NewFunction; // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>Object.defineProperty()</code>。</p>\n</li>\n</ol>\n<h4 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h4><p>对原型对象所做的任何修改，都能立刻从实例上反映出来。</p>\n<h4 id=\"原型相关的方法\"><a href=\"#原型相关的方法\" class=\"headerlink\" title=\"原型相关的方法\"></a>原型相关的方法</h4><ol>\n<li><code>prototypeObject.prototype.isPrototypeOf(被测对象)</code> 用于prototypeObject是否存在于被测对象的原型链上。</li>\n<li><code>Object.getPrototypeOf()</code>，用于获取指定对象的原型</li>\n<li><code>obj.hasOwnProperty(属性名)</code>，方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性。不包括原型中的属性。</li>\n<li><code>&quot;属性名&quot; in obj</code>，<code>in</code>操作符可检测对象是否有相应属性，不论属性在实例中还是在原型中。</li>\n<li><code>Object.keys(obj)</code>,获取obj对象上的所有可枚举的实例属性。</li>\n<li><code>Object.getOwnPropertyNames(obj)</code>，获取obj对象上的所有实例属性，无论是否可枚举。</li>\n</ol>\n<h3 id=\"4-组合使用构造函数模式和原型模式\"><a href=\"#4-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4. 组合使用构造函数模式和原型模式\"></a>4. 组合使用构造函数模式和原型模式</h3><p>使用构造函数模式定义实例属性，使用原型模式定义方法和共享的属性。</p>\n<h3 id=\"5-动态原型模式\"><a href=\"#5-动态原型模式\" class=\"headerlink\" title=\"5. 动态原型模式\"></a>5. 动态原型模式</h3><p>将实例属性、原型方法和原型属性都定义在构造函数中。如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"comment\">// 仅需检测一个原型中可能存在的属性或方法即可。若该属性/方法在原型中不存在，则将原型上应存在的所有属性和方法添加至原型。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.sayName !== <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 也可使用instanceof，如：</span></span><br><span class=\"line\">        <span class=\"comment\">// if(this.sayName instanceof Function)</span></span><br><span class=\"line\">        Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Person.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, nice to meet you <span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-寄生构造函数模式\"><a href=\"#6-寄生构造函数模式\" class=\"headerlink\" title=\"6. 寄生构造函数模式\"></a>6. 寄生构造函数模式</h3><p>创建一个函数，该函数仅封装创建对象的代码，然后再返回新创建的对象。主要用来为现有的引用类型增加其他的功能，且不污染现有的引用类型。</p>\n<p>与工厂模式有两个区别：</p>\n<ol>\n<li>命名上，不再采用createXxxx。</li>\n<li>在实例化时，通过<code>new</code>运算符进行实例化，而不是仅调用方法。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialArray</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    values.push.apply(values,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    values.toPipedString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.join(<span class=\"string\">\"|\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> SpecialArray(<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>,<span class=\"string\">\"green\"</span>);</span><br><span class=\"line\">alert(colors.toPipedString());</span><br><span class=\"line\">colors <span class=\"keyword\">instanceof</span> SpecialArray <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：寄生构造函数返回的对象与构造函数及构造函数的原型之间没有任何关系。</p>\n<h3 id=\"7-稳妥构造函数模式\"><a href=\"#7-稳妥构造函数模式\" class=\"headerlink\" title=\"7. 稳妥构造函数模式\"></a>7. 稳妥构造函数模式</h3><p>稳妥对象：没有公共属性，而且其方法也不引用this。</p>\n<p>稳妥构造函数模式不适用<code>new</code>操作符调用构造函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在此处定义私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    o.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法，是js语言实现继承的主要方法。</p>\n<h3 id=\"确定原型和实例的关系\"><a href=\"#确定原型和实例的关系\" class=\"headerlink\" title=\"确定原型和实例的关系\"></a>确定原型和实例的关系</h3><ol>\n<li>方法1：使用<code>instanceof</code></li>\n<li>方法2：使用<code>isPrototypeOf</code>，如<code>Object.prototype.isPrototypeOf(instance)</code>;</li>\n</ol>\n<h3 id=\"原型链存在的问题\"><a href=\"#原型链存在的问题\" class=\"headerlink\" title=\"原型链存在的问题\"></a>原型链存在的问题</h3><ol>\n<li>原型上引用类型值的属性，会被所有实例共享。</li>\n<li>在不影响所有对象实例的情况下，无法给超类型的构造函数提供参数。</li>\n</ol>\n<h3 id=\"1-借用构造函数\"><a href=\"#1-借用构造函数\" class=\"headerlink\" title=\"1. 借用构造函数\"></a>1. 借用构造函数</h3><p>在子类型构造函数的内部调用超类型构造函数,便可以实现向超类型传递参数。</p>\n<p>存在的问题：无法实现函数复用（因为超类型的原型中定义的方法，对于子类型而言是不可见的。）</p>\n<h3 id=\"2-组合继承\"><a href=\"#2-组合继承\" class=\"headerlink\" title=\"2. 组合继承\"></a>2. 组合继承</h3><p>一种继承模式，将原型链和借用构造函数的技术组合到一起。主要思路为使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。</p>\n<p>组合继承模式有两个关键步骤。在调用子类的构造函数实例化对象前，一定要先将超类挂载至子类的原型上，然后将子类原型的构造方法手动设置为子类的构造方法（因为在挂载原型时，构造方法会被覆盖）。</p>\n<h3 id=\"3-原型式继承\"><a href=\"#3-原型式继承\" class=\"headerlink\" title=\"3. 原型式继承\"></a>3. 原型式继承</h3><p>借助原型，基于已有的对象创建新对象，同时也不必创建自定义类型。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6的<code>Object.craete(用作新对象原型的对象, 为新对象定义额外属性的对象)</code>api实现了原型式继承。</p>\n<h3 id=\"4-寄生式继承\"><a href=\"#4-寄生式继承\" class=\"headerlink\" title=\"4. 寄生式继承\"></a>4. 寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，使用该函数实现继承。</p>\n"},{"title":"关于箭头函数","date":"2020-05-20T03:09:00.000Z","_content":"\n### 常用方法\n* `console.log` 用于输出普通信息\n* `console.info` 用于输出提示性信息\n* `console.error` 用于输出错误信息\n* `console.warn` 用于输出警示信息\n* `console.debug` 用于输出调试信息\n\n针对不同类型的信息，大多数浏览器在consoole会使用不同的标志进行标识，并可以根据信息类型进行筛选。\n\n### 辅助方法\n* `console.table(obj)` ：可以将对象或者数组以表格的形式直观地打印出来\n* `console.count()`：以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。\n* `console.countReset()`：重置指定标签的计数器值。\n* `console.time()`：启动一个以入参作为特定名称的计时器，在显示页面中可同时运行的计时器上限为10,000.\n* `console.timeEnd()`：结束特定的 计时器 并以豪秒打印其从开始到结束所用的时间。\n* `console.timeLog()`：打印特定 计时器 所运行的时间。\n\n### 占位符\n* css占位符（仅在chrome支持？）：`console.log(\"%cHello World\",padding:50px;font-size:40px;color:gray);`","source":"_posts/js基础/常用console方法总结.md","raw":"---\ntitle: 关于箭头函数 \ndate: 2020-05-20 11:09:00 \ncategories: es6\ntags: [es6, js]\n---\n\n### 常用方法\n* `console.log` 用于输出普通信息\n* `console.info` 用于输出提示性信息\n* `console.error` 用于输出错误信息\n* `console.warn` 用于输出警示信息\n* `console.debug` 用于输出调试信息\n\n针对不同类型的信息，大多数浏览器在consoole会使用不同的标志进行标识，并可以根据信息类型进行筛选。\n\n### 辅助方法\n* `console.table(obj)` ：可以将对象或者数组以表格的形式直观地打印出来\n* `console.count()`：以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。\n* `console.countReset()`：重置指定标签的计数器值。\n* `console.time()`：启动一个以入参作为特定名称的计时器，在显示页面中可同时运行的计时器上限为10,000.\n* `console.timeEnd()`：结束特定的 计时器 并以豪秒打印其从开始到结束所用的时间。\n* `console.timeLog()`：打印特定 计时器 所运行的时间。\n\n### 占位符\n* css占位符（仅在chrome支持？）：`console.log(\"%cHello World\",padding:50px;font-size:40px;color:gray);`","slug":"js基础/常用console方法总结","published":1,"updated":"2020-08-21T03:09:41.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6d000dlzrv3am43xe6","content":"<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li><code>console.log</code> 用于输出普通信息</li>\n<li><code>console.info</code> 用于输出提示性信息</li>\n<li><code>console.error</code> 用于输出错误信息</li>\n<li><code>console.warn</code> 用于输出警示信息</li>\n<li><code>console.debug</code> 用于输出调试信息</li>\n</ul>\n<p>针对不同类型的信息，大多数浏览器在consoole会使用不同的标志进行标识，并可以根据信息类型进行筛选。</p>\n<h3 id=\"辅助方法\"><a href=\"#辅助方法\" class=\"headerlink\" title=\"辅助方法\"></a>辅助方法</h3><ul>\n<li><code>console.table(obj)</code> ：可以将对象或者数组以表格的形式直观地打印出来</li>\n<li><code>console.count()</code>：以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。</li>\n<li><code>console.countReset()</code>：重置指定标签的计数器值。</li>\n<li><code>console.time()</code>：启动一个以入参作为特定名称的计时器，在显示页面中可同时运行的计时器上限为10,000.</li>\n<li><code>console.timeEnd()</code>：结束特定的 计时器 并以豪秒打印其从开始到结束所用的时间。</li>\n<li><code>console.timeLog()</code>：打印特定 计时器 所运行的时间。</li>\n</ul>\n<h3 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><ul>\n<li>css占位符（仅在chrome支持？）：<code>console.log(&quot;%cHello World&quot;,padding:50px;font-size:40px;color:gray);</code></li>\n</ul>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li><code>console.log</code> 用于输出普通信息</li>\n<li><code>console.info</code> 用于输出提示性信息</li>\n<li><code>console.error</code> 用于输出错误信息</li>\n<li><code>console.warn</code> 用于输出警示信息</li>\n<li><code>console.debug</code> 用于输出调试信息</li>\n</ul>\n<p>针对不同类型的信息，大多数浏览器在consoole会使用不同的标志进行标识，并可以根据信息类型进行筛选。</p>\n<h3 id=\"辅助方法\"><a href=\"#辅助方法\" class=\"headerlink\" title=\"辅助方法\"></a>辅助方法</h3><ul>\n<li><code>console.table(obj)</code> ：可以将对象或者数组以表格的形式直观地打印出来</li>\n<li><code>console.count()</code>：以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。</li>\n<li><code>console.countReset()</code>：重置指定标签的计数器值。</li>\n<li><code>console.time()</code>：启动一个以入参作为特定名称的计时器，在显示页面中可同时运行的计时器上限为10,000.</li>\n<li><code>console.timeEnd()</code>：结束特定的 计时器 并以豪秒打印其从开始到结束所用的时间。</li>\n<li><code>console.timeLog()</code>：打印特定 计时器 所运行的时间。</li>\n</ul>\n<h3 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><ul>\n<li>css占位符（仅在chrome支持？）：<code>console.log(&quot;%cHello World&quot;,padding:50px;font-size:40px;color:gray);</code></li>\n</ul>\n"},{"title":"实用vue工具推荐：treeselect多选插件","date":"2020-04-02T03:35:30.000Z","description":"23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现","thumbnail":"http://cdn.ewinds.pw/kungfu.jpeg","_content":"\n\n<!-- more -->\n### 常用属性\n#### options属性\noptions属性是一个数组，每一个对象为多选框的一条记录。每条记录拥有如下三个属性：\n* id:该记录的唯一标识符，选中后将该值存放进v-model绑定的数组内。\n* label：用户看到的、显示的内容\n* children:子数据。\n\n#### normalizer属性\nnormalizer属性用于为options的id、label和children属性设置别名。格式如下：\n```\nnormalizer(node){\n    return {\n        id:node.key,                // options数组中对象的key属性作为原id属性。\n        label:node.name,            // options数组中对象的name属性作为原label属性。\n        children:node.subOptions    // options数组中对象的children属性作为原children属性。\n    }\n}\n```\n\n","source":"_posts/vue/实用的vue工具：treeselect多选插件.md","raw":"---\ntitle: 实用vue工具推荐：treeselect多选插件 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2020-04-02 11:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 软件设计 #分类\n\ntags: 软件设计 #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现\n\nthumbnail: http://cdn.ewinds.pw/kungfu.jpeg\n---\n\n\n<!-- more -->\n### 常用属性\n#### options属性\noptions属性是一个数组，每一个对象为多选框的一条记录。每条记录拥有如下三个属性：\n* id:该记录的唯一标识符，选中后将该值存放进v-model绑定的数组内。\n* label：用户看到的、显示的内容\n* children:子数据。\n\n#### normalizer属性\nnormalizer属性用于为options的id、label和children属性设置别名。格式如下：\n```\nnormalizer(node){\n    return {\n        id:node.key,                // options数组中对象的key属性作为原id属性。\n        label:node.name,            // options数组中对象的name属性作为原label属性。\n        children:node.subOptions    // options数组中对象的children属性作为原children属性。\n    }\n}\n```\n\n","slug":"vue/实用的vue工具：treeselect多选插件","published":1,"updated":"2020-08-22T04:05:12.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6f000elzrvvpau7scf","content":"<a id=\"more\"></a>\n<h3 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h3><h4 id=\"options属性\"><a href=\"#options属性\" class=\"headerlink\" title=\"options属性\"></a>options属性</h4><p>options属性是一个数组，每一个对象为多选框的一条记录。每条记录拥有如下三个属性：</p>\n<ul>\n<li>id:该记录的唯一标识符，选中后将该值存放进v-model绑定的数组内。</li>\n<li>label：用户看到的、显示的内容</li>\n<li>children:子数据。</li>\n</ul>\n<h4 id=\"normalizer属性\"><a href=\"#normalizer属性\" class=\"headerlink\" title=\"normalizer属性\"></a>normalizer属性</h4><p>normalizer属性用于为options的id、label和children属性设置别名。格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normalizer(node)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id:node.key,                // options数组中对象的key属性作为原id属性。</span><br><span class=\"line\">        label:node.name,            // options数组中对象的name属性作为原label属性。</span><br><span class=\"line\">        children:node.subOptions    // options数组中对象的children属性作为原children属性。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h3 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h3><h4 id=\"options属性\"><a href=\"#options属性\" class=\"headerlink\" title=\"options属性\"></a>options属性</h4><p>options属性是一个数组，每一个对象为多选框的一条记录。每条记录拥有如下三个属性：</p>\n<ul>\n<li>id:该记录的唯一标识符，选中后将该值存放进v-model绑定的数组内。</li>\n<li>label：用户看到的、显示的内容</li>\n<li>children:子数据。</li>\n</ul>\n<h4 id=\"normalizer属性\"><a href=\"#normalizer属性\" class=\"headerlink\" title=\"normalizer属性\"></a>normalizer属性</h4><p>normalizer属性用于为options的id、label和children属性设置别名。格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">normalizer(node)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        id:node.key,                // options数组中对象的key属性作为原id属性。</span><br><span class=\"line\">        label:node.name,            // options数组中对象的name属性作为原label属性。</span><br><span class=\"line\">        children:node.subOptions    // options数组中对象的children属性作为原children属性。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"同源策略及跨域","date":"2019-12-02T03:35:30.000Z","description":"23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现","thumbnail":"http://cdn.ewinds.pw/kungfu.jpeg","_content":"\n## 为什么跨域会出现问题？\n同源策略（Same origin policy）内容有二：\n1. 禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。\n2. 禁止对不同源页面 DOM 进行操作。这里主要场景是 iframe 跨域的情况，不同域名的 iframe 是限制互相访问的。\n\n同源指：域名、协议、端口相同。\n\n## 如何解决？\n### 1. CORS（Cross-origin resource sharing，跨域资源共享）\n本质：使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。\n\n","source":"_posts/浏览器/同源策略及跨域.md","raw":"---\ntitle: 同源策略及跨域 #文章页面上的显示名称，可以任意修改，不会出现在URL中\n\ndate: 2019-12-02 11:35:30 #文章生成时间，一般不改，当然也可以任意修改\n\ncategories: 软件设计 #分类\n\ntags: 软件设计 #文章标签，可空，多标签请用格式，注意:后面有个空格\n\ndescription: 23种设计模式，包括设计模式的UML图、定义、优缺点及java代码实现\n\nthumbnail: http://cdn.ewinds.pw/kungfu.jpeg\n---\n\n## 为什么跨域会出现问题？\n同源策略（Same origin policy）内容有二：\n1. 禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。\n2. 禁止对不同源页面 DOM 进行操作。这里主要场景是 iframe 跨域的情况，不同域名的 iframe 是限制互相访问的。\n\n同源指：域名、协议、端口相同。\n\n## 如何解决？\n### 1. CORS（Cross-origin resource sharing，跨域资源共享）\n本质：使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。\n\n","slug":"浏览器/同源策略及跨域","published":1,"updated":"2020-08-24T04:00:34.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6f000flzrvh7pjk3mq","content":"<h2 id=\"为什么跨域会出现问题？\"><a href=\"#为什么跨域会出现问题？\" class=\"headerlink\" title=\"为什么跨域会出现问题？\"></a>为什么跨域会出现问题？</h2><p>同源策略（Same origin policy）内容有二：</p>\n<ol>\n<li>禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。</li>\n<li>禁止对不同源页面 DOM 进行操作。这里主要场景是 iframe 跨域的情况，不同域名的 iframe 是限制互相访问的。</li>\n</ol>\n<p>同源指：域名、协议、端口相同。</p>\n<h2 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h2><h3 id=\"1-CORS（Cross-origin-resource-sharing，跨域资源共享）\"><a href=\"#1-CORS（Cross-origin-resource-sharing，跨域资源共享）\" class=\"headerlink\" title=\"1. CORS（Cross-origin resource sharing，跨域资源共享）\"></a>1. CORS（Cross-origin resource sharing，跨域资源共享）</h3><p>本质：使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"为什么跨域会出现问题？\"><a href=\"#为什么跨域会出现问题？\" class=\"headerlink\" title=\"为什么跨域会出现问题？\"></a>为什么跨域会出现问题？</h2><p>同源策略（Same origin policy）内容有二：</p>\n<ol>\n<li>禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。</li>\n<li>禁止对不同源页面 DOM 进行操作。这里主要场景是 iframe 跨域的情况，不同域名的 iframe 是限制互相访问的。</li>\n</ol>\n<p>同源指：域名、协议、端口相同。</p>\n<h2 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h2><h3 id=\"1-CORS（Cross-origin-resource-sharing，跨域资源共享）\"><a href=\"#1-CORS（Cross-origin-resource-sharing，跨域资源共享）\" class=\"headerlink\" title=\"1. CORS（Cross-origin resource sharing，跨域资源共享）\"></a>1. CORS（Cross-origin resource sharing，跨域资源共享）</h3><p>本质：使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>\n"},{"title":"chrome浏览器的渲染过程","date":"2020-08-17T07:04:50.000Z","_content":"\n## 浏览器的渲染过程分为以下几步：\n1.解析HTML，构建DOM树\n2.解析CSS样式表，构建CSSOM(CSS Object Model)\n3.将DOM和CSSOM进行合并生成Render Tree(渲染树)\n4.根据Render Tree计算布局\n5.依据Render Tree进行渲染\n\n## 关于回流和重绘\n1. 回流(reflow/layout)：当Render Tree中的一部分(或所有)因为其中元素的规模尺寸、布局(计算确切位置)、隐藏等改变而需要重新构建Render Tree。\n2. 重绘(repaint/painting)：当Render Tree中的一些元素需要更新属性，但这些属性只会影响元素的外观，风格，而不会影响布局，无需重新构建render tree。\n\n导致回流的具体情况：\n* 添加或删除可见的DOM元素\n* 元素的位置发生变化\n* 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n* 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n* 页面一开始渲染的时候（这肯定避免不了）\n* 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n\n回流一定会触发重绘，但是重绘不一定触发回流。\n\n## 优化方法\n* 利用cssTest属性和修改class更改元素样式，避免直接修改元素样式，最小化重绘和重排。\n* 让DOM脱离文档流，进行修改完毕后，再回到文档流。脱离文档流后的改动不会引起回流。\n* 现代浏览器大部分有一个队列，用于优化重排过程。而类似offsetTop的方法会强制队列刷新。所以需要避免在修改样式时直接引用以上属性，即避免触发同步布局事件。\n* 复杂动画最好能脱离文档流。\n* css3硬件加速。\n\n### 参考资料\n1. 谷歌开发者web基础：https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\n2. 你真的了解重流和重绘吗：https://segmentfault.com/a/1190000017329980","source":"_posts/浏览器/Chrome浏览器的渲染过程.md","raw":"---\ntitle: chrome浏览器的渲染过程\ndate: 2020-08-17 15:04:50\ncategories: 前端 \ntags: [浏览器原理]\n---\n\n## 浏览器的渲染过程分为以下几步：\n1.解析HTML，构建DOM树\n2.解析CSS样式表，构建CSSOM(CSS Object Model)\n3.将DOM和CSSOM进行合并生成Render Tree(渲染树)\n4.根据Render Tree计算布局\n5.依据Render Tree进行渲染\n\n## 关于回流和重绘\n1. 回流(reflow/layout)：当Render Tree中的一部分(或所有)因为其中元素的规模尺寸、布局(计算确切位置)、隐藏等改变而需要重新构建Render Tree。\n2. 重绘(repaint/painting)：当Render Tree中的一些元素需要更新属性，但这些属性只会影响元素的外观，风格，而不会影响布局，无需重新构建render tree。\n\n导致回流的具体情况：\n* 添加或删除可见的DOM元素\n* 元素的位置发生变化\n* 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n* 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n* 页面一开始渲染的时候（这肯定避免不了）\n* 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n\n回流一定会触发重绘，但是重绘不一定触发回流。\n\n## 优化方法\n* 利用cssTest属性和修改class更改元素样式，避免直接修改元素样式，最小化重绘和重排。\n* 让DOM脱离文档流，进行修改完毕后，再回到文档流。脱离文档流后的改动不会引起回流。\n* 现代浏览器大部分有一个队列，用于优化重排过程。而类似offsetTop的方法会强制队列刷新。所以需要避免在修改样式时直接引用以上属性，即避免触发同步布局事件。\n* 复杂动画最好能脱离文档流。\n* css3硬件加速。\n\n### 参考资料\n1. 谷歌开发者web基础：https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\n2. 你真的了解重流和重绘吗：https://segmentfault.com/a/1190000017329980","slug":"浏览器/Chrome浏览器的渲染过程","published":1,"updated":"2020-08-17T15:24:43.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke7zut6g000glzrvzaqrnbn2","content":"<h2 id=\"浏览器的渲染过程分为以下几步：\"><a href=\"#浏览器的渲染过程分为以下几步：\" class=\"headerlink\" title=\"浏览器的渲染过程分为以下几步：\"></a>浏览器的渲染过程分为以下几步：</h2><p>1.解析HTML，构建DOM树<br>2.解析CSS样式表，构建CSSOM(CSS Object Model)<br>3.将DOM和CSSOM进行合并生成Render Tree(渲染树)<br>4.根据Render Tree计算布局<br>5.依据Render Tree进行渲染</p>\n<h2 id=\"关于回流和重绘\"><a href=\"#关于回流和重绘\" class=\"headerlink\" title=\"关于回流和重绘\"></a>关于回流和重绘</h2><ol>\n<li>回流(reflow/layout)：当Render Tree中的一部分(或所有)因为其中元素的规模尺寸、布局(计算确切位置)、隐藏等改变而需要重新构建Render Tree。</li>\n<li>重绘(repaint/painting)：当Render Tree中的一些元素需要更新属性，但这些属性只会影响元素的外观，风格，而不会影响布局，无需重新构建render tree。</li>\n</ol>\n<p>导致回流的具体情况：</p>\n<ul>\n<li>添加或删除可见的DOM元素</li>\n<li>元素的位置发生变化</li>\n<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>\n<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li>\n<li>页面一开始渲染的时候（这肯定避免不了）</li>\n<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>\n</ul>\n<p>回流一定会触发重绘，但是重绘不一定触发回流。</p>\n<h2 id=\"优化方法\"><a href=\"#优化方法\" class=\"headerlink\" title=\"优化方法\"></a>优化方法</h2><ul>\n<li>利用cssTest属性和修改class更改元素样式，避免直接修改元素样式，最小化重绘和重排。</li>\n<li>让DOM脱离文档流，进行修改完毕后，再回到文档流。脱离文档流后的改动不会引起回流。</li>\n<li>现代浏览器大部分有一个队列，用于优化重排过程。而类似offsetTop的方法会强制队列刷新。所以需要避免在修改样式时直接引用以上属性，即避免触发同步布局事件。</li>\n<li>复杂动画最好能脱离文档流。</li>\n<li>css3硬件加速。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>谷歌开发者web基础：<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn</a></li>\n<li>你真的了解重流和重绘吗：<a href=\"https://segmentfault.com/a/1190000017329980\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000017329980</a></li>\n</ol>\n","site":{"data":{"gallery":{"测试图片":{"full_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","thumb_link":"https://cn.bing.com/th?id=OHR.OberweissbacherBergbahn_ZH-CN1289048050_1920x1080.jpg","descr":"这是一个描述"}},"links":{"Carrie博客":{"link":"http://mperson.club","avatar":"http://mperson.club/images/a.jpg","descr":"小花同学"}}}},"excerpt":"","more":"<h2 id=\"浏览器的渲染过程分为以下几步：\"><a href=\"#浏览器的渲染过程分为以下几步：\" class=\"headerlink\" title=\"浏览器的渲染过程分为以下几步：\"></a>浏览器的渲染过程分为以下几步：</h2><p>1.解析HTML，构建DOM树<br>2.解析CSS样式表，构建CSSOM(CSS Object Model)<br>3.将DOM和CSSOM进行合并生成Render Tree(渲染树)<br>4.根据Render Tree计算布局<br>5.依据Render Tree进行渲染</p>\n<h2 id=\"关于回流和重绘\"><a href=\"#关于回流和重绘\" class=\"headerlink\" title=\"关于回流和重绘\"></a>关于回流和重绘</h2><ol>\n<li>回流(reflow/layout)：当Render Tree中的一部分(或所有)因为其中元素的规模尺寸、布局(计算确切位置)、隐藏等改变而需要重新构建Render Tree。</li>\n<li>重绘(repaint/painting)：当Render Tree中的一些元素需要更新属性，但这些属性只会影响元素的外观，风格，而不会影响布局，无需重新构建render tree。</li>\n</ol>\n<p>导致回流的具体情况：</p>\n<ul>\n<li>添加或删除可见的DOM元素</li>\n<li>元素的位置发生变化</li>\n<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>\n<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li>\n<li>页面一开始渲染的时候（这肯定避免不了）</li>\n<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>\n</ul>\n<p>回流一定会触发重绘，但是重绘不一定触发回流。</p>\n<h2 id=\"优化方法\"><a href=\"#优化方法\" class=\"headerlink\" title=\"优化方法\"></a>优化方法</h2><ul>\n<li>利用cssTest属性和修改class更改元素样式，避免直接修改元素样式，最小化重绘和重排。</li>\n<li>让DOM脱离文档流，进行修改完毕后，再回到文档流。脱离文档流后的改动不会引起回流。</li>\n<li>现代浏览器大部分有一个队列，用于优化重排过程。而类似offsetTop的方法会强制队列刷新。所以需要避免在修改样式时直接引用以上属性，即避免触发同步布局事件。</li>\n<li>复杂动画最好能脱离文档流。</li>\n<li>css3硬件加速。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>谷歌开发者web基础：<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn</a></li>\n<li>你真的了解重流和重绘吗：<a href=\"https://segmentfault.com/a/1190000017329980\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000017329980</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdych0k4000xykrv098jyzea","category_id":"ckdych0ku001yykrvfxk38p42","_id":"ckdych0lx004mykrvg88f937w"},{"post_id":"ckdych0k6000yykrvcg27t1o1","category_id":"ckdych0l10020ykrvo0rak05r","_id":"ckdych0lx004oykrv0hewzpr7"},{"post_id":"ckdych0k7000zykrv8tmrztj1","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0lx004qykrv0qrcfbol"},{"post_id":"ckdych0k70010ykrvscxw8122","category_id":"ckdych0l20024ykrveql0sw7p","_id":"ckdych0lx004sykrvfnjtz7r1"},{"post_id":"ckdych0k80011ykrvr34y4mju","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0lx004uykrvr957gbln"},{"post_id":"ckdych0k90012ykrv2evgqfrp","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0ly004wykrvxkdk6hvx"},{"post_id":"ckdych0k90013ykrvpollc0jy","category_id":"ckdych0l20024ykrveql0sw7p","_id":"ckdych0ly004yykrvdaw4rlxn"},{"post_id":"ckdych0ka0014ykrvmsxw6w9f","category_id":"ckdych0l5002cykrvbr8dvvzu","_id":"ckdych0ly0050ykrvt0dol4zt"},{"post_id":"ckdych0ka0015ykrvfrhy5n4k","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0ly0052ykrv29wuxn14"},{"post_id":"ckdych0kc0018ykrvtkg0048u","category_id":"ckdych0l20024ykrveql0sw7p","_id":"ckdych0ly0058ykrvlak2nnnw"},{"post_id":"ckdych0kc0019ykrvd8u14hun","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0ly005aykrvp5it0pxa"},{"post_id":"ckdych0kd001aykrv4k0zsecn","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0ly005cykrvd3v63nx7"},{"post_id":"ckdych0kd001bykrvneku8meq","category_id":"ckdych0ku001yykrvfxk38p42","_id":"ckdych0ly005eykrvqsgz10q4"},{"post_id":"ckdych0ke001cykrvmiqv68ab","category_id":"ckdych0la002sykrv474ukpwl","_id":"ckdych0ly005gykrv6bpzy4z2"},{"post_id":"ckdych0ke001dykrvh3v62jz8","category_id":"ckdych0la002uykrv8lll4o5b","_id":"ckdych0ly005iykrvcc0y3esg"},{"post_id":"ckdych0kf001eykrv7hq1hnqc","category_id":"ckdych0lb002wykrv5wqpiuhy","_id":"ckdych0lz005kykrv5tvcmpa4"},{"post_id":"ckdych0kf001fykrvmnqz8hyw","category_id":"ckdych0la002uykrv8lll4o5b","_id":"ckdych0lz005mykrvdml4r2rq"},{"post_id":"ckdych0kf001gykrve9nte7mc","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0lz005oykrvxrv5pt0d"},{"post_id":"ckdych0kg001hykrv69jecpmp","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0lz005qykrvdmq9ynd7"},{"post_id":"ckdych0kg001iykrvdnqgyeb2","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0lz005sykrv66oamhc6"},{"post_id":"ckdych0kh001jykrv9qp81fa1","category_id":"ckdych0le0036ykrvn764rsmd","_id":"ckdych0m0005uykrvr6mdaidr"},{"post_id":"ckdych0kh001kykrv2nl7bt2b","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0m0005wykrv3sl6ctdl"},{"post_id":"ckdych0kh001lykrv00i4v23d","category_id":"ckdych0lf003aykrvhj9szby1","_id":"ckdych0m0005yykrv0dm0a1ie"},{"post_id":"ckdych0ki001mykrvaxauvjlx","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0m00060ykrvxj5v9i3q"},{"post_id":"ckdych0ki001nykrvafnc5zba","category_id":"ckdych0lb002wykrv5wqpiuhy","_id":"ckdych0m00062ykrv7c3ia0g2"},{"post_id":"ckdych0kj001oykrvdto2yoe9","category_id":"ckdych0lb002wykrv5wqpiuhy","_id":"ckdych0m00064ykrva6unyiod"},{"post_id":"ckdych0kj001pykrv1yptmpcv","category_id":"ckdych0li003iykrvkbdmlopn","_id":"ckdych0m00066ykrv4qj5s57t"},{"post_id":"ckdych0kk001qykrvyyevb7p7","category_id":"ckdych0li003kykrvlu149ydh","_id":"ckdych0m00068ykrvp6kzl1qn"},{"post_id":"ckdych0kk001rykrvy6zesm8f","category_id":"ckdych0la002sykrv474ukpwl","_id":"ckdych0m0006aykrv1c30iuy6"},{"post_id":"ckdych0kk001sykrvh6ngpqf1","category_id":"ckdych0lj003oykrv6jijh5o0","_id":"ckdych0m0006cykrvkcz1xsb2"},{"post_id":"ckdych0kl001tykrvtzkdvf7o","category_id":"ckdych0l20022ykrvctlsk56t","_id":"ckdych0m1006eykrvk53xkk7q"},{"post_id":"ckdych0kl001uykrv1yqg8yxz","category_id":"ckdych0l20024ykrveql0sw7p","_id":"ckdych0m1006gykrvepx4admt"},{"post_id":"ckdych0km001vykrv7fwqfejr","category_id":"ckdych0ll003uykrvehlkp900","_id":"ckdych0m1006iykrvi0mkh9lw"},{"post_id":"ckdych0km001wykrvsjg2wgso","category_id":"ckdych0lm003wykrvnqdxa7dl","_id":"ckdych0m1006kykrv2lh84czm"},{"post_id":"ckdych0km001xykrvwy0nwjof","category_id":"ckdych0lm003yykrvxg2nugx8","_id":"ckdych0m1006mykrvld6wxq1v"},{"post_id":"cke7zut670005lzrv7ja8m500","category_id":"ckdych0l10020ykrvo0rak05r","_id":"cke7zut7d000klzrv6z5bqgmm"},{"post_id":"cke7zut6a0009lzrvea74ae07","category_id":"ckdych0l20022ykrvctlsk56t","_id":"cke7zut7d000mlzrvwaiwhppr"},{"post_id":"cke7zut6b000alzrv76dibs72","category_id":"ckdych0l20022ykrvctlsk56t","_id":"cke7zut7d000olzrv4j2zu9ot"},{"post_id":"cke7zut6c000blzrvw8d8m2jz","category_id":"ckdych0l20022ykrvctlsk56t","_id":"cke7zut7d000qlzrv3x2tpg7k"},{"post_id":"cke7zut6d000clzrvm4vhrcou","category_id":"ckdych0l20022ykrvctlsk56t","_id":"cke7zut7e000slzrvhfy9mp2e"},{"post_id":"cke7zut6d000dlzrv3am43xe6","category_id":"ckdych0ku001yykrvfxk38p42","_id":"cke7zut7e000ulzrvky5qkxd9"},{"post_id":"cke7zut6f000elzrvvpau7scf","category_id":"ckdych0lm003wykrvnqdxa7dl","_id":"cke7zut7e000wlzrv5oirpuc4"},{"post_id":"cke7zut6f000flzrvh7pjk3mq","category_id":"ckdych0lm003wykrvnqdxa7dl","_id":"cke7zut7e000ylzrvbshad4kn"},{"post_id":"cke7zut6g000glzrvzaqrnbn2","category_id":"ckdych0l20022ykrvctlsk56t","_id":"cke7zut7e0010lzrvyf7614z6"},{"post_id":"cke7zut650004lzrvn2cm1urg","category_id":"cke7zut75000hlzrvxys9zyyw","_id":"cke7zut7j0016lzrve356bhq7"}],"PostTag":[{"post_id":"ckdych0k4000xykrv098jyzea","tag_id":"ckdych0l1001zykrvptggoojv","_id":"ckdych0lx004lykrv9v76o6bg"},{"post_id":"ckdych0k4000xykrv098jyzea","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"ckdych0lx004nykrv6n4irf2c"},{"post_id":"ckdych0k6000yykrvcg27t1o1","tag_id":"ckdych0l20023ykrvy87r8ipi","_id":"ckdych0lx004pykrvtnerv1tw"},{"post_id":"ckdych0k7000zykrv8tmrztj1","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0lx004rykrvojgrfxq2"},{"post_id":"ckdych0k70010ykrvscxw8122","tag_id":"ckdych0l20027ykrvmabqwwap","_id":"ckdych0lx004tykrvyk5878xq"},{"post_id":"ckdych0k70010ykrvscxw8122","tag_id":"ckdych0l40029ykrvq2iqzvy0","_id":"ckdych0ly004vykrvoa1zb505"},{"post_id":"ckdych0k80011ykrvr34y4mju","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0ly004xykrv4jii1z72"},{"post_id":"ckdych0k80011ykrvr34y4mju","tag_id":"ckdych0l1001zykrvptggoojv","_id":"ckdych0ly004zykrv39h8dkxs"},{"post_id":"ckdych0k90012ykrv2evgqfrp","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0ly0051ykrvvz1u470s"},{"post_id":"ckdych0k90012ykrv2evgqfrp","tag_id":"ckdych0l6002hykrvd4jhg457","_id":"ckdych0ly0053ykrvdi9bz83x"},{"post_id":"ckdych0k90013ykrvpollc0jy","tag_id":"ckdych0l20027ykrvmabqwwap","_id":"ckdych0ly0055ykrv25wp62rb"},{"post_id":"ckdych0k90013ykrvpollc0jy","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0ly0057ykrv8j99uabw"},{"post_id":"ckdych0ka0014ykrvmsxw6w9f","tag_id":"ckdych0l8002nykrvl603mrrl","_id":"ckdych0ly0059ykrvt64amzq9"},{"post_id":"ckdych0ka0015ykrvfrhy5n4k","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0ly005bykrv8m9n31z5"},{"post_id":"ckdych0kc0018ykrvtkg0048u","tag_id":"ckdych0l20027ykrvmabqwwap","_id":"ckdych0lz005jykrvd6f0zs07"},{"post_id":"ckdych0kc0018ykrvtkg0048u","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0lz005lykrvgrr251t5"},{"post_id":"ckdych0kc0019ykrvd8u14hun","tag_id":"ckdych0lc0031ykrvtmbndx3c","_id":"ckdych0lz005nykrvpiwk8ko0"},{"post_id":"ckdych0kd001aykrv4k0zsecn","tag_id":"ckdych0lc0031ykrvtmbndx3c","_id":"ckdych0lz005pykrvnph9iesj"},{"post_id":"ckdych0kd001bykrvneku8meq","tag_id":"ckdych0l1001zykrvptggoojv","_id":"ckdych0lz005rykrvv5jp928m"},{"post_id":"ckdych0kd001bykrvneku8meq","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"ckdych0lz005tykrv84mtw2sw"},{"post_id":"ckdych0ke001cykrvmiqv68ab","tag_id":"ckdych0le0039ykrvkz583dn4","_id":"ckdych0m0005vykrv9xzflym8"},{"post_id":"ckdych0ke001dykrvh3v62jz8","tag_id":"ckdych0lf003bykrv3wlstqeq","_id":"ckdych0m0005xykrvgnhkken7"},{"post_id":"ckdych0kf001eykrv7hq1hnqc","tag_id":"ckdych0lg003dykrvakozkmns","_id":"ckdych0m0005zykrv08ra7ro8"},{"post_id":"ckdych0kf001eykrv7hq1hnqc","tag_id":"ckdych0lh003fykrv7rfvbi1z","_id":"ckdych0m00061ykrve5zxa3cs"},{"post_id":"ckdych0kf001fykrvmnqz8hyw","tag_id":"ckdych0lf003bykrv3wlstqeq","_id":"ckdych0m00063ykrvjfupmg4c"},{"post_id":"ckdych0kf001gykrve9nte7mc","tag_id":"ckdych0li003jykrvzewif32m","_id":"ckdych0m00065ykrvmmgtehvp"},{"post_id":"ckdych0kf001gykrve9nte7mc","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0m00067ykrvnhq05wtt"},{"post_id":"ckdych0kg001hykrv69jecpmp","tag_id":"ckdych0li003jykrvzewif32m","_id":"ckdych0m00069ykrvore6wgg1"},{"post_id":"ckdych0kg001hykrv69jecpmp","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0m0006bykrvbu1ws1o8"},{"post_id":"ckdych0kg001iykrvdnqgyeb2","tag_id":"ckdych0lk003rykrvj8mg3snt","_id":"ckdych0m1006dykrvl1gpjrns"},{"post_id":"ckdych0kg001iykrvdnqgyeb2","tag_id":"ckdych0ll003tykrv64p4ecw8","_id":"ckdych0m1006fykrvo11k6rpo"},{"post_id":"ckdych0kh001jykrv9qp81fa1","tag_id":"ckdych0lk003rykrvj8mg3snt","_id":"ckdych0m1006hykrvujp1suda"},{"post_id":"ckdych0kh001jykrv9qp81fa1","tag_id":"ckdych0lm003xykrvguyig67e","_id":"ckdych0m1006jykrvjihcxefv"},{"post_id":"ckdych0kh001kykrv2nl7bt2b","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0m1006lykrveunz0bnh"},{"post_id":"ckdych0kh001lykrv00i4v23d","tag_id":"ckdych0lm0040ykrvslhh960c","_id":"ckdych0m1006nykrvloogv4qm"},{"post_id":"ckdych0kh001lykrv00i4v23d","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"ckdych0m1006oykrvy3eofn5m"},{"post_id":"ckdych0ki001mykrvaxauvjlx","tag_id":"ckdych0ln0042ykrvsfyg50da","_id":"ckdych0m1006pykrvh7zd5jfq"},{"post_id":"ckdych0ki001nykrvafnc5zba","tag_id":"ckdych0ln0043ykrv9tgy4e3r","_id":"ckdych0m1006qykrvpfmddw1k"},{"post_id":"ckdych0ki001nykrvafnc5zba","tag_id":"ckdych0ln0044ykrvo5qxtxp2","_id":"ckdych0m1006rykrv88k6encl"},{"post_id":"ckdych0kj001oykrvdto2yoe9","tag_id":"ckdych0ln0045ykrvm907zuza","_id":"ckdych0m1006sykrvhj642blu"},{"post_id":"ckdych0kj001oykrvdto2yoe9","tag_id":"ckdych0ln0044ykrvo5qxtxp2","_id":"ckdych0m1006tykrvlwl5o4yi"},{"post_id":"ckdych0kj001pykrv1yptmpcv","tag_id":"ckdych0lo0047ykrvwyhhostu","_id":"ckdych0m1006uykrvh0abd5vq"},{"post_id":"ckdych0kj001pykrv1yptmpcv","tag_id":"ckdych0lg003dykrvakozkmns","_id":"ckdych0m1006vykrvxj32ubh7"},{"post_id":"ckdych0kk001qykrvyyevb7p7","tag_id":"ckdych0lo0049ykrv9on3aa7c","_id":"ckdych0m1006wykrv4c8uz5uo"},{"post_id":"ckdych0kk001qykrvyyevb7p7","tag_id":"ckdych0lo004aykrvfe8plktt","_id":"ckdych0m1006xykrv3fb5ke13"},{"post_id":"ckdych0kk001rykrvy6zesm8f","tag_id":"ckdych0lp004bykrva7lgtjmv","_id":"ckdych0m1006yykrvdvqdrcqr"},{"post_id":"ckdych0kk001rykrvy6zesm8f","tag_id":"ckdych0le0039ykrvkz583dn4","_id":"ckdych0m1006zykrvwhhrc2kx"},{"post_id":"ckdych0kk001sykrvh6ngpqf1","tag_id":"ckdych0lp004dykrvatsxig6k","_id":"ckdych0m20070ykrv54gacmde"},{"post_id":"ckdych0kl001tykrvtzkdvf7o","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"ckdych0m20071ykrvv9jfi7n5"},{"post_id":"ckdych0kl001uykrv1yqg8yxz","tag_id":"ckdych0l20027ykrvmabqwwap","_id":"ckdych0m20072ykrv6k1tt976"},{"post_id":"ckdych0kl001uykrv1yqg8yxz","tag_id":"ckdych0l40029ykrvq2iqzvy0","_id":"ckdych0m20073ykrv50z6jm96"},{"post_id":"ckdych0km001vykrv7fwqfejr","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"ckdych0m20074ykrvq78ivlxo"},{"post_id":"ckdych0km001vykrv7fwqfejr","tag_id":"ckdych0lq004iykrv65tvr47c","_id":"ckdych0m20075ykrvujioocwp"},{"post_id":"ckdych0km001wykrvsjg2wgso","tag_id":"ckdych0lr004jykrv4guc5slw","_id":"ckdych0m20076ykrvd2qehkvb"},{"post_id":"ckdych0km001xykrvwy0nwjof","tag_id":"ckdych0lr004kykrv3vk66pxk","_id":"ckdych0m20077ykrvbnrm0gun"},{"post_id":"cke7zut670005lzrv7ja8m500","tag_id":"ckdych0l20023ykrvy87r8ipi","_id":"cke7zut7c000jlzrvzgogtut9"},{"post_id":"cke7zut6a0009lzrvea74ae07","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"cke7zut7d000llzrvesgo9c9d"},{"post_id":"cke7zut6b000alzrv76dibs72","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"cke7zut7d000nlzrv1ukzkxk6"},{"post_id":"cke7zut6b000alzrv76dibs72","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"cke7zut7d000plzrv456hk51g"},{"post_id":"cke7zut6c000blzrvw8d8m2jz","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"cke7zut7e000rlzrvn0j3y5q9"},{"post_id":"cke7zut6c000blzrvw8d8m2jz","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"cke7zut7e000tlzrveifb85lr"},{"post_id":"cke7zut6d000clzrvm4vhrcou","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"cke7zut7e000vlzrvc8f0hsex"},{"post_id":"cke7zut6d000clzrvm4vhrcou","tag_id":"ckdych0l20025ykrv8fcqhvrg","_id":"cke7zut7e000xlzrv9k0wakz8"},{"post_id":"cke7zut6d000dlzrv3am43xe6","tag_id":"ckdych0l1001zykrvptggoojv","_id":"cke7zut7e000zlzrvmw07ekbo"},{"post_id":"cke7zut6d000dlzrv3am43xe6","tag_id":"ckdych0l10021ykrv4aay2xjl","_id":"cke7zut7e0011lzrvmhgodlc3"},{"post_id":"cke7zut6f000elzrvvpau7scf","tag_id":"ckdych0lr004jykrv4guc5slw","_id":"cke7zut7e0012lzrvad5w4xim"},{"post_id":"cke7zut6f000flzrvh7pjk3mq","tag_id":"ckdych0lr004jykrv4guc5slw","_id":"cke7zut7e0013lzrvxiehltkg"},{"post_id":"cke7zut6g000glzrvzaqrnbn2","tag_id":"ckdych0ln0042ykrvsfyg50da","_id":"cke7zut7e0014lzrv975nd7l1"},{"post_id":"cke7zut650004lzrvn2cm1urg","tag_id":"cke7zut7c000ilzrvc0zf7rmj","_id":"cke7zut7j0015lzrv5thjjqpn"}],"Tag":[{"name":"es6","_id":"ckdych0l1001zykrvptggoojv"},{"name":"js","_id":"ckdych0l10021ykrv4aay2xjl"},{"name":"css","_id":"ckdych0l20023ykrvy87r8ipi"},{"name":"前端","_id":"ckdych0l20025ykrv8fcqhvrg"},{"name":"读书笔记","_id":"ckdych0l20027ykrvmabqwwap"},{"name":"设计","_id":"ckdych0l40029ykrvq2iqzvy0"},{"name":"let","_id":"ckdych0l6002hykrvd4jhg457"},{"name":"Java插件","_id":"ckdych0l8002nykrvl603mrrl"},{"name":"js异步","_id":"ckdych0lc0031ykrvtmbndx3c"},{"name":"mysql","_id":"ckdych0le0039ykrvkz583dn4"},{"name":"sql","_id":"ckdych0lf003bykrv3wlstqeq"},{"name":"工具","_id":"ckdych0lg003dykrvakozkmns"},{"name":"vim","_id":"ckdych0lh003fykrv7rfvbi1z"},{"name":"vue","_id":"ckdych0li003jykrvzewif32m"},{"name":"代码质量检查","_id":"ckdych0lk003rykrvj8mg3snt"},{"name":"eslint","_id":"ckdych0ll003tykrv64p4ecw8"},{"name":"SonarQube","_id":"ckdych0lm003xykrvguyig67e"},{"name":"命名规范","_id":"ckdych0lm0040ykrvslhh960c"},{"name":"浏览器原理","_id":"ckdych0ln0042ykrvsfyg50da"},{"name":"git","_id":"ckdych0ln0043ykrv9tgy4e3r"},{"name":"版本管理工具","_id":"ckdych0ln0044ykrvo5qxtxp2"},{"name":"svn","_id":"ckdych0ln0045ykrvm907zuza"},{"name":"mac","_id":"ckdych0lo0047ykrvwyhhostu"},{"name":"win10","_id":"ckdych0lo0049ykrv9on3aa7c"},{"name":"博客","_id":"ckdych0lo004aykrvfe8plktt"},{"name":"环境搭建","_id":"ckdych0lp004bykrva7lgtjmv"},{"name":"vps","_id":"ckdych0lp004dykrvatsxig6k"},{"name":"设计模式","_id":"ckdych0lq004iykrv65tvr47c"},{"name":"软件设计","_id":"ckdych0lr004jykrv4guc5slw"},{"name":"诗歌","_id":"ckdych0lr004kykrv3vk66pxk"},{"name":"NodeJS","_id":"cke7zut7c000ilzrvc0zf7rmj"}]}}